/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ProjectTemplateInstantiateProjectRequest } from '../models';
// @ts-ignore
import { ProjectTemplatesDeleteTemplateRecordResponse } from '../models';
// @ts-ignore
import { ProjectTemplatesGetAllTemplateRecordsResponse } from '../models';
// @ts-ignore
import { ProjectTemplatesGetRecordResponse } from '../models';
// @ts-ignore
import { ProjectTemplatesInstantiateProjectJobRequest } from '../models';
// @ts-ignore
import { ProjectTemplatesInstantiateProjectJobResponse } from '../models';
// @ts-ignore
import { ProjectTemplatesListMultipleResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectTemplatesApi - axios parameter creator
 * @export
 */
export const ProjectTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
         * @summary Delete a project template
         * @param {string} projectTemplateGid Globally unique identifier for the project template.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplateRecord: async (projectTemplateGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTemplateGid' is not null or undefined
            assertParamExists('deleteTemplateRecord', 'projectTemplateGid', projectTemplateGid)
            const localVarPath = `/project_templates/{project_template_gid}`
                .replace(`{${"project_template_gid"}}`, encodeURIComponent(String(projectTemplateGid !== undefined ? projectTemplateGid : `-project_template_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project_templates/{project_template_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact project template records for all project templates in the team.
         * @summary Get a team\'s project templates
         * @param {string} teamGid Globally unique identifier for the team.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTemplateRecords: async (teamGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamGid' is not null or undefined
            assertParamExists('getAllTemplateRecords', 'teamGid', teamGid)
            const localVarPath = `/teams/{team_gid}/project_templates`
                .replace(`{${"team_gid"}}`, encodeURIComponent(String(teamGid !== undefined ? teamGid : `-team_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_gid}/project_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete project template record for a single project template.
         * @summary Get a project template
         * @param {string} projectTemplateGid Globally unique identifier for the project template.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'description' | 'html_description' | 'name' | 'owner' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (projectTemplateGid: string, optPretty?: boolean, optFields?: Array<'color' | 'description' | 'html_description' | 'name' | 'owner' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTemplateGid' is not null or undefined
            assertParamExists('getRecord', 'projectTemplateGid', projectTemplateGid)
            const localVarPath = `/project_templates/{project_template_gid}`
                .replace(`{${"project_template_gid"}}`, encodeURIComponent(String(projectTemplateGid !== undefined ? projectTemplateGid : `-project_template_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project_templates/{project_template_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](https://developers.asana.com/reference/rest-api-reference). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](https://developers.asana.com/reference/rest-api-reference) parameter._
         * @summary Instantiate a project from a project template
         * @param {string} projectTemplateGid Globally unique identifier for the project template.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {ProjectTemplatesInstantiateProjectJobRequest} [projectTemplatesInstantiateProjectJobRequest] Describes the inputs used for instantiating a project, such as the resulting project\&#39;s name, which team it should be created in, and values for date variables.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instantiateProjectJob: async (projectTemplateGid: string, optPretty?: boolean, optFields?: Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>, projectTemplatesInstantiateProjectJobRequest?: ProjectTemplatesInstantiateProjectJobRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectTemplateGid' is not null or undefined
            assertParamExists('instantiateProjectJob', 'projectTemplateGid', projectTemplateGid)
            const localVarPath = `/project_templates/{project_template_gid}/instantiateProject`
                .replace(`{${"project_template_gid"}}`, encodeURIComponent(String(projectTemplateGid !== undefined ? projectTemplateGid : `-project_template_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: projectTemplatesInstantiateProjectJobRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project_templates/{project_template_gid}/instantiateProject',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(projectTemplatesInstantiateProjectJobRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact project template records for all project templates in the given team or workspace.
         * @summary Get multiple project templates
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {string} [workspace] The workspace to filter results on.
         * @param {string} [team] The team to filter projects on.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultiple: async (optPretty?: boolean, workspace?: string, team?: string, limit?: number, offset?: string, optFields?: Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/project_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (team !== undefined) {
                localVarQueryParameter['team'] = team;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectTemplatesApi - functional programming interface
 * @export
 */
export const ProjectTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
         * @summary Delete a project template
         * @param {ProjectTemplatesApiDeleteTemplateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplateRecord(requestParameters: ProjectTemplatesApiDeleteTemplateRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectTemplatesDeleteTemplateRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplateRecord(requestParameters.projectTemplateGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact project template records for all project templates in the team.
         * @summary Get a team\'s project templates
         * @param {ProjectTemplatesApiGetAllTemplateRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTemplateRecords(requestParameters: ProjectTemplatesApiGetAllTemplateRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectTemplatesGetAllTemplateRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTemplateRecords(requestParameters.teamGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete project template record for a single project template.
         * @summary Get a project template
         * @param {ProjectTemplatesApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: ProjectTemplatesApiGetRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectTemplatesGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.projectTemplateGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](https://developers.asana.com/reference/rest-api-reference). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](https://developers.asana.com/reference/rest-api-reference) parameter._
         * @summary Instantiate a project from a project template
         * @param {ProjectTemplatesApiInstantiateProjectJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async instantiateProjectJob(requestParameters: ProjectTemplatesApiInstantiateProjectJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectTemplatesInstantiateProjectJobResponse>> {
            const projectTemplatesInstantiateProjectJobRequest: ProjectTemplatesInstantiateProjectJobRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.instantiateProjectJob(requestParameters.projectTemplateGid, requestParameters.optPretty, requestParameters.optFields, projectTemplatesInstantiateProjectJobRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact project template records for all project templates in the given team or workspace.
         * @summary Get multiple project templates
         * @param {ProjectTemplatesApiListMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultiple(requestParameters: ProjectTemplatesApiListMultipleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectTemplatesListMultipleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultiple(requestParameters.optPretty, requestParameters.workspace, requestParameters.team, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectTemplatesApi - factory interface
 * @export
 */
export const ProjectTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectTemplatesApiFp(configuration)
    return {
        /**
         * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
         * @summary Delete a project template
         * @param {ProjectTemplatesApiDeleteTemplateRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplateRecord(requestParameters: ProjectTemplatesApiDeleteTemplateRecordRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectTemplatesDeleteTemplateRecordResponse> {
            return localVarFp.deleteTemplateRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact project template records for all project templates in the team.
         * @summary Get a team\'s project templates
         * @param {ProjectTemplatesApiGetAllTemplateRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTemplateRecords(requestParameters: ProjectTemplatesApiGetAllTemplateRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectTemplatesGetAllTemplateRecordsResponse> {
            return localVarFp.getAllTemplateRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete project template record for a single project template.
         * @summary Get a project template
         * @param {ProjectTemplatesApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: ProjectTemplatesApiGetRecordRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectTemplatesGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](https://developers.asana.com/reference/rest-api-reference). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](https://developers.asana.com/reference/rest-api-reference) parameter._
         * @summary Instantiate a project from a project template
         * @param {ProjectTemplatesApiInstantiateProjectJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instantiateProjectJob(requestParameters: ProjectTemplatesApiInstantiateProjectJobRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectTemplatesInstantiateProjectJobResponse> {
            return localVarFp.instantiateProjectJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact project template records for all project templates in the given team or workspace.
         * @summary Get multiple project templates
         * @param {ProjectTemplatesApiListMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultiple(requestParameters: ProjectTemplatesApiListMultipleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProjectTemplatesListMultipleResponse> {
            return localVarFp.listMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTemplateRecord operation in ProjectTemplatesApi.
 * @export
 * @interface ProjectTemplatesApiDeleteTemplateRecordRequest
 */
export type ProjectTemplatesApiDeleteTemplateRecordRequest = {
    
    /**
    * Globally unique identifier for the project template.
    * @type {string}
    * @memberof ProjectTemplatesApiDeleteTemplateRecord
    */
    readonly projectTemplateGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectTemplatesApiDeleteTemplateRecord
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getAllTemplateRecords operation in ProjectTemplatesApi.
 * @export
 * @interface ProjectTemplatesApiGetAllTemplateRecordsRequest
 */
export type ProjectTemplatesApiGetAllTemplateRecordsRequest = {
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof ProjectTemplatesApiGetAllTemplateRecords
    */
    readonly teamGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectTemplatesApiGetAllTemplateRecords
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof ProjectTemplatesApiGetAllTemplateRecords
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof ProjectTemplatesApiGetAllTemplateRecords
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>}
    * @memberof ProjectTemplatesApiGetAllTemplateRecords
    */
    readonly optFields?: Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>
    
}

/**
 * Request parameters for getRecord operation in ProjectTemplatesApi.
 * @export
 * @interface ProjectTemplatesApiGetRecordRequest
 */
export type ProjectTemplatesApiGetRecordRequest = {
    
    /**
    * Globally unique identifier for the project template.
    * @type {string}
    * @memberof ProjectTemplatesApiGetRecord
    */
    readonly projectTemplateGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectTemplatesApiGetRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'description' | 'html_description' | 'name' | 'owner' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name'>}
    * @memberof ProjectTemplatesApiGetRecord
    */
    readonly optFields?: Array<'color' | 'description' | 'html_description' | 'name' | 'owner' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name'>
    
}

/**
 * Request parameters for instantiateProjectJob operation in ProjectTemplatesApi.
 * @export
 * @interface ProjectTemplatesApiInstantiateProjectJobRequest
 */
export type ProjectTemplatesApiInstantiateProjectJobRequest = {
    
    /**
    * Globally unique identifier for the project template.
    * @type {string}
    * @memberof ProjectTemplatesApiInstantiateProjectJob
    */
    readonly projectTemplateGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectTemplatesApiInstantiateProjectJob
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>}
    * @memberof ProjectTemplatesApiInstantiateProjectJob
    */
    readonly optFields?: Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>
    
} & ProjectTemplatesInstantiateProjectJobRequest

/**
 * Request parameters for listMultiple operation in ProjectTemplatesApi.
 * @export
 * @interface ProjectTemplatesApiListMultipleRequest
 */
export type ProjectTemplatesApiListMultipleRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectTemplatesApiListMultiple
    */
    readonly optPretty?: boolean
    
    /**
    * The workspace to filter results on.
    * @type {string}
    * @memberof ProjectTemplatesApiListMultiple
    */
    readonly workspace?: string
    
    /**
    * The team to filter projects on.
    * @type {string}
    * @memberof ProjectTemplatesApiListMultiple
    */
    readonly team?: string
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof ProjectTemplatesApiListMultiple
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof ProjectTemplatesApiListMultiple
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>}
    * @memberof ProjectTemplatesApiListMultiple
    */
    readonly optFields?: Array<'color' | 'description' | 'html_description' | 'name' | 'offset' | 'owner' | 'path' | 'public' | 'requested_dates' | 'requested_dates.description' | 'requested_dates.name' | 'requested_roles' | 'requested_roles.name' | 'team' | 'team.name' | 'uri'>
    
}

/**
 * ProjectTemplatesApiGenerated - object-oriented interface
 * @export
 * @class ProjectTemplatesApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectTemplatesApiGenerated extends BaseAPI {
    /**
     * A specific, existing project template can be deleted by making a DELETE request on the URL for that project template.  Returns an empty data record.
     * @summary Delete a project template
     * @param {ProjectTemplatesApiDeleteTemplateRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplatesApiGenerated
     */
    public deleteTemplateRecord(requestParameters: ProjectTemplatesApiDeleteTemplateRecordRequest, options?: AxiosRequestConfig) {
        return ProjectTemplatesApiFp(this.configuration).deleteTemplateRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact project template records for all project templates in the team.
     * @summary Get a team\'s project templates
     * @param {ProjectTemplatesApiGetAllTemplateRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplatesApiGenerated
     */
    public getAllTemplateRecords(requestParameters: ProjectTemplatesApiGetAllTemplateRecordsRequest, options?: AxiosRequestConfig) {
        return ProjectTemplatesApiFp(this.configuration).getAllTemplateRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete project template record for a single project template.
     * @summary Get a project template
     * @param {ProjectTemplatesApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplatesApiGenerated
     */
    public getRecord(requestParameters: ProjectTemplatesApiGetRecordRequest, options?: AxiosRequestConfig) {
        return ProjectTemplatesApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates and returns a job that will asynchronously handle the project instantiation.  To form this request, it is recommended to first make a request to [get a project template](https://developers.asana.com/reference/rest-api-reference). Then, from the response, copy the `gid` from the object in the `requested_dates` array. This `gid` should be used in `requested_dates` to instantiate a project.  _Note: The body of this request will differ if your workspace is an organization. To determine if your workspace is an organization, use the [is_organization](https://developers.asana.com/reference/rest-api-reference) parameter._
     * @summary Instantiate a project from a project template
     * @param {ProjectTemplatesApiInstantiateProjectJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplatesApiGenerated
     */
    public instantiateProjectJob(requestParameters: ProjectTemplatesApiInstantiateProjectJobRequest, options?: AxiosRequestConfig) {
        return ProjectTemplatesApiFp(this.configuration).instantiateProjectJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact project template records for all project templates in the given team or workspace.
     * @summary Get multiple project templates
     * @param {ProjectTemplatesApiListMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTemplatesApiGenerated
     */
    public listMultiple(requestParameters: ProjectTemplatesApiListMultipleRequest = {}, options?: AxiosRequestConfig) {
        return ProjectTemplatesApiFp(this.configuration).listMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
