/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { UserTaskListsGetRecordResponse } from '../models';
// @ts-ignore
import { UserTaskListsGetUserTaskListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserTaskListsApi - axios parameter creator
 * @export
 */
export const UserTaskListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the full record for a user task list.
         * @summary Get a user task list
         * @param {string} userTaskListGid Globally unique identifier for the user task list.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'name' | 'owner' | 'workspace'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (userTaskListGid: string, optPretty?: boolean, optFields?: Array<'name' | 'owner' | 'workspace'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userTaskListGid' is not null or undefined
            assertParamExists('getRecord', 'userTaskListGid', userTaskListGid)
            const localVarPath = `/user_task_lists/{user_task_list_gid}`
                .replace(`{${"user_task_list_gid"}}`, encodeURIComponent(String(userTaskListGid !== undefined ? userTaskListGid : `-user_task_list_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user_task_lists/{user_task_list_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the full record for a user\'s task list.
         * @summary Get a user\'s task list
         * @param {string} userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {string} workspace The workspace in which to get the user task list.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'name' | 'owner' | 'workspace'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTaskList: async (userGid: string, workspace: string, optPretty?: boolean, optFields?: Array<'name' | 'owner' | 'workspace'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userGid' is not null or undefined
            assertParamExists('getUserTaskList', 'userGid', userGid)
            // verify required parameter 'workspace' is not null or undefined
            assertParamExists('getUserTaskList', 'workspace', workspace)
            const localVarPath = `/users/{user_gid}/user_task_list`
                .replace(`{${"user_gid"}}`, encodeURIComponent(String(userGid !== undefined ? userGid : `-user_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_gid}/user_task_list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTaskListsApi - functional programming interface
 * @export
 */
export const UserTaskListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTaskListsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the full record for a user task list.
         * @summary Get a user task list
         * @param {UserTaskListsApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: UserTaskListsApiGetRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTaskListsGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.userTaskListGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the full record for a user\'s task list.
         * @summary Get a user\'s task list
         * @param {UserTaskListsApiGetUserTaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTaskList(requestParameters: UserTaskListsApiGetUserTaskListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTaskListsGetUserTaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTaskList(requestParameters.userGid, requestParameters.workspace, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserTaskListsApi - factory interface
 * @export
 */
export const UserTaskListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTaskListsApiFp(configuration)
    return {
        /**
         * Returns the full record for a user task list.
         * @summary Get a user task list
         * @param {UserTaskListsApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: UserTaskListsApiGetRecordRequest, options?: AxiosRequestConfig): AxiosPromise<UserTaskListsGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the full record for a user\'s task list.
         * @summary Get a user\'s task list
         * @param {UserTaskListsApiGetUserTaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTaskList(requestParameters: UserTaskListsApiGetUserTaskListRequest, options?: AxiosRequestConfig): AxiosPromise<UserTaskListsGetUserTaskListResponse> {
            return localVarFp.getUserTaskList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRecord operation in UserTaskListsApi.
 * @export
 * @interface UserTaskListsApiGetRecordRequest
 */
export type UserTaskListsApiGetRecordRequest = {
    
    /**
    * Globally unique identifier for the user task list.
    * @type {string}
    * @memberof UserTaskListsApiGetRecord
    */
    readonly userTaskListGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof UserTaskListsApiGetRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'name' | 'owner' | 'workspace'>}
    * @memberof UserTaskListsApiGetRecord
    */
    readonly optFields?: Array<'name' | 'owner' | 'workspace'>
    
}

/**
 * Request parameters for getUserTaskList operation in UserTaskListsApi.
 * @export
 * @interface UserTaskListsApiGetUserTaskListRequest
 */
export type UserTaskListsApiGetUserTaskListRequest = {
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof UserTaskListsApiGetUserTaskList
    */
    readonly userGid: string
    
    /**
    * The workspace in which to get the user task list.
    * @type {string}
    * @memberof UserTaskListsApiGetUserTaskList
    */
    readonly workspace: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof UserTaskListsApiGetUserTaskList
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'name' | 'owner' | 'workspace'>}
    * @memberof UserTaskListsApiGetUserTaskList
    */
    readonly optFields?: Array<'name' | 'owner' | 'workspace'>
    
}

/**
 * UserTaskListsApiGenerated - object-oriented interface
 * @export
 * @class UserTaskListsApiGenerated
 * @extends {BaseAPI}
 */
export class UserTaskListsApiGenerated extends BaseAPI {
    /**
     * Returns the full record for a user task list.
     * @summary Get a user task list
     * @param {UserTaskListsApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskListsApiGenerated
     */
    public getRecord(requestParameters: UserTaskListsApiGetRecordRequest, options?: AxiosRequestConfig) {
        return UserTaskListsApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the full record for a user\'s task list.
     * @summary Get a user\'s task list
     * @param {UserTaskListsApiGetUserTaskListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTaskListsApiGenerated
     */
    public getUserTaskList(requestParameters: UserTaskListsApiGetUserTaskListRequest, options?: AxiosRequestConfig) {
        return UserTaskListsApiFp(this.configuration).getUserTaskList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
