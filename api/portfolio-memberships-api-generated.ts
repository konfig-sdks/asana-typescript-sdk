/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PortfolioMembershipsGetCompactResponse } from '../models';
// @ts-ignore
import { PortfolioMembershipsGetCompleteRecordResponse } from '../models';
// @ts-ignore
import { PortfolioMembershipsListMultipleMembershipsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PortfolioMembershipsApi - axios parameter creator
 * @export
 */
export const PortfolioMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the compact portfolio membership records for the portfolio.
         * @summary Get memberships from a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {string} [user] A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompact: async (portfolioGid: string, user?: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('getCompact', 'portfolioGid', portfolioGid)
            const localVarPath = `/portfolios/{portfolio_gid}/portfolio_memberships`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/portfolio_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete portfolio record for a single portfolio membership.
         * @summary Get a portfolio membership
         * @param {string} portfolioMembershipGid 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'portfolio' | 'portfolio.name' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompleteRecord: async (portfolioMembershipGid: string, optPretty?: boolean, optFields?: Array<'portfolio' | 'portfolio.name' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioMembershipGid' is not null or undefined
            assertParamExists('getCompleteRecord', 'portfolioMembershipGid', portfolioMembershipGid)
            const localVarPath = `/portfolio_memberships/{portfolio_membership_gid}`
                .replace(`{${"portfolio_membership_gid"}}`, encodeURIComponent(String(portfolioMembershipGid !== undefined ? portfolioMembershipGid : `-portfolio_membership_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolio_memberships/{portfolio_membership_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
         * @summary Get multiple portfolio memberships
         * @param {string} [portfolio] The portfolio to filter results on.
         * @param {string} [workspace] The workspace to filter results on.
         * @param {string} [user] A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleMemberships: async (portfolio?: string, workspace?: string, user?: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/portfolio_memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (portfolio !== undefined) {
                localVarQueryParameter['portfolio'] = portfolio;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolio_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioMembershipsApi - functional programming interface
 * @export
 */
export const PortfolioMembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfolioMembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the compact portfolio membership records for the portfolio.
         * @summary Get memberships from a portfolio
         * @param {PortfolioMembershipsApiGetCompactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompact(requestParameters: PortfolioMembershipsApiGetCompactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioMembershipsGetCompactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompact(requestParameters.portfolioGid, requestParameters.user, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete portfolio record for a single portfolio membership.
         * @summary Get a portfolio membership
         * @param {PortfolioMembershipsApiGetCompleteRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompleteRecord(requestParameters: PortfolioMembershipsApiGetCompleteRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioMembershipsGetCompleteRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompleteRecord(requestParameters.portfolioMembershipGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
         * @summary Get multiple portfolio memberships
         * @param {PortfolioMembershipsApiListMultipleMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultipleMemberships(requestParameters: PortfolioMembershipsApiListMultipleMembershipsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfolioMembershipsListMultipleMembershipsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultipleMemberships(requestParameters.portfolio, requestParameters.workspace, requestParameters.user, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfolioMembershipsApi - factory interface
 * @export
 */
export const PortfolioMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfolioMembershipsApiFp(configuration)
    return {
        /**
         * Returns the compact portfolio membership records for the portfolio.
         * @summary Get memberships from a portfolio
         * @param {PortfolioMembershipsApiGetCompactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompact(requestParameters: PortfolioMembershipsApiGetCompactRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioMembershipsGetCompactResponse> {
            return localVarFp.getCompact(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete portfolio record for a single portfolio membership.
         * @summary Get a portfolio membership
         * @param {PortfolioMembershipsApiGetCompleteRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompleteRecord(requestParameters: PortfolioMembershipsApiGetCompleteRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PortfolioMembershipsGetCompleteRecordResponse> {
            return localVarFp.getCompleteRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
         * @summary Get multiple portfolio memberships
         * @param {PortfolioMembershipsApiListMultipleMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleMemberships(requestParameters: PortfolioMembershipsApiListMultipleMembershipsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PortfolioMembershipsListMultipleMembershipsResponse> {
            return localVarFp.listMultipleMemberships(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompact operation in PortfolioMembershipsApi.
 * @export
 * @interface PortfolioMembershipsApiGetCompactRequest
 */
export type PortfolioMembershipsApiGetCompactRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfolioMembershipsApiGetCompact
    */
    readonly portfolioGid: string
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof PortfolioMembershipsApiGetCompact
    */
    readonly user?: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfolioMembershipsApiGetCompact
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof PortfolioMembershipsApiGetCompact
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof PortfolioMembershipsApiGetCompact
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>}
    * @memberof PortfolioMembershipsApiGetCompact
    */
    readonly optFields?: Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>
    
}

/**
 * Request parameters for getCompleteRecord operation in PortfolioMembershipsApi.
 * @export
 * @interface PortfolioMembershipsApiGetCompleteRecordRequest
 */
export type PortfolioMembershipsApiGetCompleteRecordRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PortfolioMembershipsApiGetCompleteRecord
    */
    readonly portfolioMembershipGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfolioMembershipsApiGetCompleteRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'portfolio' | 'portfolio.name' | 'user' | 'user.name'>}
    * @memberof PortfolioMembershipsApiGetCompleteRecord
    */
    readonly optFields?: Array<'portfolio' | 'portfolio.name' | 'user' | 'user.name'>
    
}

/**
 * Request parameters for listMultipleMemberships operation in PortfolioMembershipsApi.
 * @export
 * @interface PortfolioMembershipsApiListMultipleMembershipsRequest
 */
export type PortfolioMembershipsApiListMultipleMembershipsRequest = {
    
    /**
    * The portfolio to filter results on.
    * @type {string}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly portfolio?: string
    
    /**
    * The workspace to filter results on.
    * @type {string}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly workspace?: string
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly user?: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>}
    * @memberof PortfolioMembershipsApiListMultipleMemberships
    */
    readonly optFields?: Array<'offset' | 'path' | 'portfolio' | 'portfolio.name' | 'uri' | 'user' | 'user.name'>
    
}

/**
 * PortfolioMembershipsApiGenerated - object-oriented interface
 * @export
 * @class PortfolioMembershipsApiGenerated
 * @extends {BaseAPI}
 */
export class PortfolioMembershipsApiGenerated extends BaseAPI {
    /**
     * Returns the compact portfolio membership records for the portfolio.
     * @summary Get memberships from a portfolio
     * @param {PortfolioMembershipsApiGetCompactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMembershipsApiGenerated
     */
    public getCompact(requestParameters: PortfolioMembershipsApiGetCompactRequest, options?: AxiosRequestConfig) {
        return PortfolioMembershipsApiFp(this.configuration).getCompact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete portfolio record for a single portfolio membership.
     * @summary Get a portfolio membership
     * @param {PortfolioMembershipsApiGetCompleteRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMembershipsApiGenerated
     */
    public getCompleteRecord(requestParameters: PortfolioMembershipsApiGetCompleteRecordRequest, options?: AxiosRequestConfig) {
        return PortfolioMembershipsApiFp(this.configuration).getCompleteRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of portfolio memberships in compact representation. You must specify `portfolio`, `portfolio` and `user`, or `workspace` and `user`.
     * @summary Get multiple portfolio memberships
     * @param {PortfolioMembershipsApiListMultipleMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMembershipsApiGenerated
     */
    public listMultipleMemberships(requestParameters: PortfolioMembershipsApiListMultipleMembershipsRequest = {}, options?: AxiosRequestConfig) {
        return PortfolioMembershipsApiFp(this.configuration).listMultipleMemberships(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
