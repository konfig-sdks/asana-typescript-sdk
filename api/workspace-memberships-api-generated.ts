/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { WorkspaceMembershipsGetRecordByIdResponse } from '../models';
// @ts-ignore
import { WorkspaceMembershipsGetUserMembershipsResponse } from '../models';
// @ts-ignore
import { WorkspaceMembershipsListForWorkspaceResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkspaceMembershipsApi - axios parameter creator
 * @export
 */
export const WorkspaceMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the complete workspace record for a single workspace membership.
         * @summary Get a workspace membership
         * @param {string} workspaceMembershipGid 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById: async (workspaceMembershipGid: string, optPretty?: boolean, optFields?: Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceMembershipGid' is not null or undefined
            assertParamExists('getRecordById', 'workspaceMembershipGid', workspaceMembershipGid)
            const localVarPath = `/workspace_memberships/{workspace_membership_gid}`
                .replace(`{${"workspace_membership_gid"}}`, encodeURIComponent(String(workspaceMembershipGid !== undefined ? workspaceMembershipGid : `-workspace_membership_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspace_memberships/{workspace_membership_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact workspace membership records for the user.
         * @summary Get workspace memberships for a user
         * @param {string} userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMemberships: async (userGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userGid' is not null or undefined
            assertParamExists('getUserMemberships', 'userGid', userGid)
            const localVarPath = `/users/{user_gid}/workspace_memberships`
                .replace(`{${"user_gid"}}`, encodeURIComponent(String(userGid !== undefined ? userGid : `-user_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_gid}/workspace_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact workspace membership records for the workspace.
         * @summary Get the workspace memberships for a workspace
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {string} [user] A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForWorkspace: async (workspaceGid: string, user?: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('listForWorkspace', 'workspaceGid', workspaceGid)
            const localVarPath = `/workspaces/{workspace_gid}/workspace_memberships`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/workspace_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceMembershipsApi - functional programming interface
 * @export
 */
export const WorkspaceMembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceMembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the complete workspace record for a single workspace membership.
         * @summary Get a workspace membership
         * @param {WorkspaceMembershipsApiGetRecordByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordById(requestParameters: WorkspaceMembershipsApiGetRecordByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMembershipsGetRecordByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordById(requestParameters.workspaceMembershipGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact workspace membership records for the user.
         * @summary Get workspace memberships for a user
         * @param {WorkspaceMembershipsApiGetUserMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserMemberships(requestParameters: WorkspaceMembershipsApiGetUserMembershipsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMembershipsGetUserMembershipsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserMemberships(requestParameters.userGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact workspace membership records for the workspace.
         * @summary Get the workspace memberships for a workspace
         * @param {WorkspaceMembershipsApiListForWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listForWorkspace(requestParameters: WorkspaceMembershipsApiListForWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMembershipsListForWorkspaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listForWorkspace(requestParameters.workspaceGid, requestParameters.user, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkspaceMembershipsApi - factory interface
 * @export
 */
export const WorkspaceMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceMembershipsApiFp(configuration)
    return {
        /**
         * Returns the complete workspace record for a single workspace membership.
         * @summary Get a workspace membership
         * @param {WorkspaceMembershipsApiGetRecordByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById(requestParameters: WorkspaceMembershipsApiGetRecordByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMembershipsGetRecordByIdResponse> {
            return localVarFp.getRecordById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact workspace membership records for the user.
         * @summary Get workspace memberships for a user
         * @param {WorkspaceMembershipsApiGetUserMembershipsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserMemberships(requestParameters: WorkspaceMembershipsApiGetUserMembershipsRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMembershipsGetUserMembershipsResponse> {
            return localVarFp.getUserMemberships(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact workspace membership records for the workspace.
         * @summary Get the workspace memberships for a workspace
         * @param {WorkspaceMembershipsApiListForWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listForWorkspace(requestParameters: WorkspaceMembershipsApiListForWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMembershipsListForWorkspaceResponse> {
            return localVarFp.listForWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getRecordById operation in WorkspaceMembershipsApi.
 * @export
 * @interface WorkspaceMembershipsApiGetRecordByIdRequest
 */
export type WorkspaceMembershipsApiGetRecordByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WorkspaceMembershipsApiGetRecordById
    */
    readonly workspaceMembershipGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspaceMembershipsApiGetRecordById
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof WorkspaceMembershipsApiGetRecordById
    */
    readonly optFields?: Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getUserMemberships operation in WorkspaceMembershipsApi.
 * @export
 * @interface WorkspaceMembershipsApiGetUserMembershipsRequest
 */
export type WorkspaceMembershipsApiGetUserMembershipsRequest = {
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof WorkspaceMembershipsApiGetUserMemberships
    */
    readonly userGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspaceMembershipsApiGetUserMemberships
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof WorkspaceMembershipsApiGetUserMemberships
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof WorkspaceMembershipsApiGetUserMemberships
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof WorkspaceMembershipsApiGetUserMemberships
    */
    readonly optFields?: Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for listForWorkspace operation in WorkspaceMembershipsApi.
 * @export
 * @interface WorkspaceMembershipsApiListForWorkspaceRequest
 */
export type WorkspaceMembershipsApiListForWorkspaceRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof WorkspaceMembershipsApiListForWorkspace
    */
    readonly workspaceGid: string
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof WorkspaceMembershipsApiListForWorkspace
    */
    readonly user?: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspaceMembershipsApiListForWorkspace
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof WorkspaceMembershipsApiListForWorkspace
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof WorkspaceMembershipsApiListForWorkspace
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof WorkspaceMembershipsApiListForWorkspace
    */
    readonly optFields?: Array<'created_at' | 'is_active' | 'is_admin' | 'is_guest' | 'offset' | 'path' | 'uri' | 'user' | 'user.name' | 'user_task_list' | 'user_task_list.name' | 'user_task_list.owner' | 'user_task_list.workspace' | 'vacation_dates' | 'vacation_dates.end_on' | 'vacation_dates.start_on' | 'workspace' | 'workspace.name'>
    
}

/**
 * WorkspaceMembershipsApiGenerated - object-oriented interface
 * @export
 * @class WorkspaceMembershipsApiGenerated
 * @extends {BaseAPI}
 */
export class WorkspaceMembershipsApiGenerated extends BaseAPI {
    /**
     * Returns the complete workspace record for a single workspace membership.
     * @summary Get a workspace membership
     * @param {WorkspaceMembershipsApiGetRecordByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceMembershipsApiGenerated
     */
    public getRecordById(requestParameters: WorkspaceMembershipsApiGetRecordByIdRequest, options?: AxiosRequestConfig) {
        return WorkspaceMembershipsApiFp(this.configuration).getRecordById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact workspace membership records for the user.
     * @summary Get workspace memberships for a user
     * @param {WorkspaceMembershipsApiGetUserMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceMembershipsApiGenerated
     */
    public getUserMemberships(requestParameters: WorkspaceMembershipsApiGetUserMembershipsRequest, options?: AxiosRequestConfig) {
        return WorkspaceMembershipsApiFp(this.configuration).getUserMemberships(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact workspace membership records for the workspace.
     * @summary Get the workspace memberships for a workspace
     * @param {WorkspaceMembershipsApiListForWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceMembershipsApiGenerated
     */
    public listForWorkspace(requestParameters: WorkspaceMembershipsApiListForWorkspaceRequest, options?: AxiosRequestConfig) {
        return WorkspaceMembershipsApiFp(this.configuration).listForWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
