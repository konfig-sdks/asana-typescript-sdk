/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldRequest } from '../models';
// @ts-ignore
import { CustomFieldsAddEnumOptionRequest } from '../models';
// @ts-ignore
import { CustomFieldsAddEnumOptionResponse } from '../models';
// @ts-ignore
import { CustomFieldsCreateNewFieldRecordRequest } from '../models';
// @ts-ignore
import { CustomFieldsCreateNewFieldRecordResponse } from '../models';
// @ts-ignore
import { CustomFieldsDeleteFieldRecordResponse } from '../models';
// @ts-ignore
import { CustomFieldsGetMetadataResponse } from '../models';
// @ts-ignore
import { CustomFieldsListWorkspaceCustomFieldsResponse } from '../models';
// @ts-ignore
import { CustomFieldsReorderEnumOptionRequest } from '../models';
// @ts-ignore
import { CustomFieldsReorderEnumOptionResponse } from '../models';
// @ts-ignore
import { CustomFieldsUpdateEnumOptionRequest } from '../models';
// @ts-ignore
import { CustomFieldsUpdateEnumOptionResponse } from '../models';
// @ts-ignore
import { CustomFieldsUpdateFieldRecordRequest } from '../models';
// @ts-ignore
import { CustomFieldsUpdateFieldRecordResponse } from '../models';
// @ts-ignore
import { EnumOption } from '../models';
// @ts-ignore
import { EnumOptionInsertRequest } from '../models';
// @ts-ignore
import { EnumOptionRequest } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldsApi - axios parameter creator
 * @export
 */
export const CustomFieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
         * @summary Create an enum option
         * @param {string} customFieldGid Globally unique identifier for the custom field.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'enabled' | 'name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {CustomFieldsAddEnumOptionRequest} [customFieldsAddEnumOptionRequest] The enum option object to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEnumOption: async (customFieldGid: string, optPretty?: boolean, optFields?: Array<'color' | 'enabled' | 'name'>, customFieldsAddEnumOptionRequest?: CustomFieldsAddEnumOptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldGid' is not null or undefined
            assertParamExists('addEnumOption', 'customFieldGid', customFieldGid)
            const localVarPath = `/custom_fields/{custom_field_gid}/enum_options`
                .replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(customFieldGid !== undefined ? customFieldGid : `-custom_field_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsAddEnumOptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields/{custom_field_gid}/enum_options',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsAddEnumOptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
         * @summary Create a custom field
         * @param {CustomFieldsCreateNewFieldRecordRequest} customFieldsCreateNewFieldRecordRequest The custom field object to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFieldRecord: async (customFieldsCreateNewFieldRecordRequest: CustomFieldsCreateNewFieldRecordRequest, optPretty?: boolean, optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldsCreateNewFieldRecordRequest' is not null or undefined
            assertParamExists('createNewFieldRecord', 'customFieldsCreateNewFieldRecordRequest', customFieldsCreateNewFieldRecordRequest)
            const localVarPath = `/custom_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsCreateNewFieldRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsCreateNewFieldRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
         * @summary Delete a custom field
         * @param {string} customFieldGid Globally unique identifier for the custom field.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFieldRecord: async (customFieldGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldGid' is not null or undefined
            assertParamExists('deleteFieldRecord', 'customFieldGid', customFieldGid)
            const localVarPath = `/custom_fields/{custom_field_gid}`
                .replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(customFieldGid !== undefined ? customFieldGid : `-custom_field_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields/{custom_field_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
         * @summary Get a custom field
         * @param {string} customFieldGid Globally unique identifier for the custom field.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (customFieldGid: string, optPretty?: boolean, optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldGid' is not null or undefined
            assertParamExists('getMetadata', 'customFieldGid', customFieldGid)
            const localVarPath = `/custom_fields/{custom_field_gid}`
                .replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(customFieldGid !== undefined ? customFieldGid : `-custom_field_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields/{custom_field_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the compact representation of all of the custom fields in a workspace.
         * @summary Get a workspace\'s custom fields
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'offset' | 'path' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaceCustomFields: async (workspaceGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'offset' | 'path' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('listWorkspaceCustomFields', 'workspaceGid', workspaceGid)
            const localVarPath = `/workspaces/{workspace_gid}/custom_fields`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/custom_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
         * @summary Reorder a custom field\'s enum
         * @param {string} customFieldGid Globally unique identifier for the custom field.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'enabled' | 'name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {CustomFieldsReorderEnumOptionRequest} [customFieldsReorderEnumOptionRequest] The enum option object to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderEnumOption: async (customFieldGid: string, optPretty?: boolean, optFields?: Array<'color' | 'enabled' | 'name'>, customFieldsReorderEnumOptionRequest?: CustomFieldsReorderEnumOptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldGid' is not null or undefined
            assertParamExists('reorderEnumOption', 'customFieldGid', customFieldGid)
            const localVarPath = `/custom_fields/{custom_field_gid}/enum_options/insert`
                .replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(customFieldGid !== undefined ? customFieldGid : `-custom_field_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsReorderEnumOptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields/{custom_field_gid}/enum_options/insert',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsReorderEnumOptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
         * @summary Update an enum option
         * @param {string} enumOptionGid Globally unique identifier for the enum option.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'enabled' | 'name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {CustomFieldsUpdateEnumOptionRequest} [customFieldsUpdateEnumOptionRequest] The enum option object to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumOption: async (enumOptionGid: string, optPretty?: boolean, optFields?: Array<'color' | 'enabled' | 'name'>, customFieldsUpdateEnumOptionRequest?: CustomFieldsUpdateEnumOptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enumOptionGid' is not null or undefined
            assertParamExists('updateEnumOption', 'enumOptionGid', enumOptionGid)
            const localVarPath = `/enum_options/{enum_option_gid}`
                .replace(`{${"enum_option_gid"}}`, encodeURIComponent(String(enumOptionGid !== undefined ? enumOptionGid : `-enum_option_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsUpdateEnumOptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/enum_options/{enum_option_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsUpdateEnumOptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
         * @summary Update a custom field
         * @param {string} customFieldGid Globally unique identifier for the custom field.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {CustomFieldsUpdateFieldRecordRequest} [customFieldsUpdateFieldRecordRequest] The custom field object with all updated properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFieldRecord: async (customFieldGid: string, optPretty?: boolean, optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>, customFieldsUpdateFieldRecordRequest?: CustomFieldsUpdateFieldRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customFieldGid' is not null or undefined
            assertParamExists('updateFieldRecord', 'customFieldGid', customFieldGid)
            const localVarPath = `/custom_fields/{custom_field_gid}`
                .replace(`{${"custom_field_gid"}}`, encodeURIComponent(String(customFieldGid !== undefined ? customFieldGid : `-custom_field_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldsUpdateFieldRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/custom_fields/{custom_field_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldsUpdateFieldRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldsApi - functional programming interface
 * @export
 */
export const CustomFieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
         * @summary Create an enum option
         * @param {CustomFieldsApiAddEnumOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEnumOption(requestParameters: CustomFieldsApiAddEnumOptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsAddEnumOptionResponse>> {
            const customFieldsAddEnumOptionRequest: CustomFieldsAddEnumOptionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEnumOption(requestParameters.customFieldGid, requestParameters.optPretty, requestParameters.optFields, customFieldsAddEnumOptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
         * @summary Create a custom field
         * @param {CustomFieldsApiCreateNewFieldRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewFieldRecord(requestParameters: CustomFieldsApiCreateNewFieldRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsCreateNewFieldRecordResponse>> {
            const customFieldsCreateNewFieldRecordRequest: CustomFieldsCreateNewFieldRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewFieldRecord(customFieldsCreateNewFieldRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
         * @summary Delete a custom field
         * @param {CustomFieldsApiDeleteFieldRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFieldRecord(requestParameters: CustomFieldsApiDeleteFieldRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsDeleteFieldRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFieldRecord(requestParameters.customFieldGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
         * @summary Get a custom field
         * @param {CustomFieldsApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(requestParameters: CustomFieldsApiGetMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsGetMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadata(requestParameters.customFieldGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the compact representation of all of the custom fields in a workspace.
         * @summary Get a workspace\'s custom fields
         * @param {CustomFieldsApiListWorkspaceCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkspaceCustomFields(requestParameters: CustomFieldsApiListWorkspaceCustomFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsListWorkspaceCustomFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceCustomFields(requestParameters.workspaceGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
         * @summary Reorder a custom field\'s enum
         * @param {CustomFieldsApiReorderEnumOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderEnumOption(requestParameters: CustomFieldsApiReorderEnumOptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsReorderEnumOptionResponse>> {
            const customFieldsReorderEnumOptionRequest: CustomFieldsReorderEnumOptionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderEnumOption(requestParameters.customFieldGid, requestParameters.optPretty, requestParameters.optFields, customFieldsReorderEnumOptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
         * @summary Update an enum option
         * @param {CustomFieldsApiUpdateEnumOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnumOption(requestParameters: CustomFieldsApiUpdateEnumOptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsUpdateEnumOptionResponse>> {
            const customFieldsUpdateEnumOptionRequest: CustomFieldsUpdateEnumOptionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnumOption(requestParameters.enumOptionGid, requestParameters.optPretty, requestParameters.optFields, customFieldsUpdateEnumOptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
         * @summary Update a custom field
         * @param {CustomFieldsApiUpdateFieldRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFieldRecord(requestParameters: CustomFieldsApiUpdateFieldRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomFieldsUpdateFieldRecordResponse>> {
            const customFieldsUpdateFieldRecordRequest: CustomFieldsUpdateFieldRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFieldRecord(requestParameters.customFieldGid, requestParameters.optPretty, requestParameters.optFields, customFieldsUpdateFieldRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldsApi - factory interface
 * @export
 */
export const CustomFieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldsApiFp(configuration)
    return {
        /**
         * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
         * @summary Create an enum option
         * @param {CustomFieldsApiAddEnumOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEnumOption(requestParameters: CustomFieldsApiAddEnumOptionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsAddEnumOptionResponse> {
            return localVarFp.addEnumOption(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
         * @summary Create a custom field
         * @param {CustomFieldsApiCreateNewFieldRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewFieldRecord(requestParameters: CustomFieldsApiCreateNewFieldRecordRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsCreateNewFieldRecordResponse> {
            return localVarFp.createNewFieldRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
         * @summary Delete a custom field
         * @param {CustomFieldsApiDeleteFieldRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFieldRecord(requestParameters: CustomFieldsApiDeleteFieldRecordRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsDeleteFieldRecordResponse> {
            return localVarFp.deleteFieldRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
         * @summary Get a custom field
         * @param {CustomFieldsApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(requestParameters: CustomFieldsApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsGetMetadataResponse> {
            return localVarFp.getMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the compact representation of all of the custom fields in a workspace.
         * @summary Get a workspace\'s custom fields
         * @param {CustomFieldsApiListWorkspaceCustomFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaceCustomFields(requestParameters: CustomFieldsApiListWorkspaceCustomFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsListWorkspaceCustomFieldsResponse> {
            return localVarFp.listWorkspaceCustomFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
         * @summary Reorder a custom field\'s enum
         * @param {CustomFieldsApiReorderEnumOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderEnumOption(requestParameters: CustomFieldsApiReorderEnumOptionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsReorderEnumOptionResponse> {
            return localVarFp.reorderEnumOption(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
         * @summary Update an enum option
         * @param {CustomFieldsApiUpdateEnumOptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnumOption(requestParameters: CustomFieldsApiUpdateEnumOptionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsUpdateEnumOptionResponse> {
            return localVarFp.updateEnumOption(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
         * @summary Update a custom field
         * @param {CustomFieldsApiUpdateFieldRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFieldRecord(requestParameters: CustomFieldsApiUpdateFieldRecordRequest, options?: AxiosRequestConfig): AxiosPromise<CustomFieldsUpdateFieldRecordResponse> {
            return localVarFp.updateFieldRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEnumOption operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiAddEnumOptionRequest
 */
export type CustomFieldsApiAddEnumOptionRequest = {
    
    /**
    * Globally unique identifier for the custom field.
    * @type {string}
    * @memberof CustomFieldsApiAddEnumOption
    */
    readonly customFieldGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiAddEnumOption
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'enabled' | 'name'>}
    * @memberof CustomFieldsApiAddEnumOption
    */
    readonly optFields?: Array<'color' | 'enabled' | 'name'>
    
} & CustomFieldsAddEnumOptionRequest

/**
 * Request parameters for createNewFieldRecord operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiCreateNewFieldRecordRequest
 */
export type CustomFieldsApiCreateNewFieldRecordRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiCreateNewFieldRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>}
    * @memberof CustomFieldsApiCreateNewFieldRecord
    */
    readonly optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>
    
} & CustomFieldsCreateNewFieldRecordRequest

/**
 * Request parameters for deleteFieldRecord operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiDeleteFieldRecordRequest
 */
export type CustomFieldsApiDeleteFieldRecordRequest = {
    
    /**
    * Globally unique identifier for the custom field.
    * @type {string}
    * @memberof CustomFieldsApiDeleteFieldRecord
    */
    readonly customFieldGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiDeleteFieldRecord
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getMetadata operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiGetMetadataRequest
 */
export type CustomFieldsApiGetMetadataRequest = {
    
    /**
    * Globally unique identifier for the custom field.
    * @type {string}
    * @memberof CustomFieldsApiGetMetadata
    */
    readonly customFieldGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiGetMetadata
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>}
    * @memberof CustomFieldsApiGetMetadata
    */
    readonly optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>
    
}

/**
 * Request parameters for listWorkspaceCustomFields operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiListWorkspaceCustomFieldsRequest
 */
export type CustomFieldsApiListWorkspaceCustomFieldsRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof CustomFieldsApiListWorkspaceCustomFields
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiListWorkspaceCustomFields
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof CustomFieldsApiListWorkspaceCustomFields
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof CustomFieldsApiListWorkspaceCustomFields
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'offset' | 'path' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type' | 'uri'>}
    * @memberof CustomFieldsApiListWorkspaceCustomFields
    */
    readonly optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'offset' | 'path' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type' | 'uri'>
    
}

/**
 * Request parameters for reorderEnumOption operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiReorderEnumOptionRequest
 */
export type CustomFieldsApiReorderEnumOptionRequest = {
    
    /**
    * Globally unique identifier for the custom field.
    * @type {string}
    * @memberof CustomFieldsApiReorderEnumOption
    */
    readonly customFieldGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiReorderEnumOption
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'enabled' | 'name'>}
    * @memberof CustomFieldsApiReorderEnumOption
    */
    readonly optFields?: Array<'color' | 'enabled' | 'name'>
    
} & CustomFieldsReorderEnumOptionRequest

/**
 * Request parameters for updateEnumOption operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiUpdateEnumOptionRequest
 */
export type CustomFieldsApiUpdateEnumOptionRequest = {
    
    /**
    * Globally unique identifier for the enum option.
    * @type {string}
    * @memberof CustomFieldsApiUpdateEnumOption
    */
    readonly enumOptionGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiUpdateEnumOption
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'enabled' | 'name'>}
    * @memberof CustomFieldsApiUpdateEnumOption
    */
    readonly optFields?: Array<'color' | 'enabled' | 'name'>
    
} & CustomFieldsUpdateEnumOptionRequest

/**
 * Request parameters for updateFieldRecord operation in CustomFieldsApi.
 * @export
 * @interface CustomFieldsApiUpdateFieldRecordRequest
 */
export type CustomFieldsApiUpdateFieldRecordRequest = {
    
    /**
    * Globally unique identifier for the custom field.
    * @type {string}
    * @memberof CustomFieldsApiUpdateFieldRecord
    */
    readonly customFieldGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof CustomFieldsApiUpdateFieldRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>}
    * @memberof CustomFieldsApiUpdateFieldRecord
    */
    readonly optFields?: Array<'asana_created_field' | 'created_by' | 'created_by.name' | 'currency_code' | 'custom_label' | 'custom_label_position' | 'date_value' | 'date_value.date' | 'date_value.date_time' | 'description' | 'display_value' | 'enabled' | 'enum_options' | 'enum_options.color' | 'enum_options.enabled' | 'enum_options.name' | 'enum_value' | 'enum_value.color' | 'enum_value.enabled' | 'enum_value.name' | 'format' | 'has_notifications_enabled' | 'id_prefix' | 'is_formula_field' | 'is_global_to_workspace' | 'is_value_read_only' | 'multi_enum_values' | 'multi_enum_values.color' | 'multi_enum_values.enabled' | 'multi_enum_values.name' | 'name' | 'number_value' | 'people_value' | 'people_value.name' | 'precision' | 'representation_type' | 'resource_subtype' | 'text_value' | 'type'>
    
} & CustomFieldsUpdateFieldRecordRequest

/**
 * CustomFieldsApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldsApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldsApiGenerated extends BaseAPI {
    /**
     * Creates an enum option and adds it to this custom field’s list of enum options. A custom field can have at most 500 enum options (including disabled options). By default new enum options are inserted at the end of a custom field’s list. Locked custom fields can only have enum options added by the user who locked the field. Returns the full record of the newly created enum option.
     * @summary Create an enum option
     * @param {CustomFieldsApiAddEnumOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public addEnumOption(requestParameters: CustomFieldsApiAddEnumOptionRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).addEnumOption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new custom field in a workspace. Every custom field is required to be created in a specific workspace, and this workspace cannot be changed once set.  A custom field’s name must be unique within a workspace and not conflict with names of existing task properties such as `Due Date` or `Assignee`. A custom field’s type must be one of `text`, `enum`, `multi_enum`, `number`, `date`, or `people`.  Returns the full record of the newly created custom field.
     * @summary Create a custom field
     * @param {CustomFieldsApiCreateNewFieldRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public createNewFieldRecord(requestParameters: CustomFieldsApiCreateNewFieldRecordRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).createNewFieldRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing custom field can be deleted by making a DELETE request on the URL for that custom field. Locked custom fields can only be deleted by the user who locked the field. Returns an empty data record.
     * @summary Delete a custom field
     * @param {CustomFieldsApiDeleteFieldRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public deleteFieldRecord(requestParameters: CustomFieldsApiDeleteFieldRecordRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).deleteFieldRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the complete definition of a custom field’s metadata.  Since custom fields can be defined for one of a number of types, and these types have different data and behaviors, there are fields that are relevant to a particular type. For instance, as noted above, enum_options is only relevant for the enum type and defines the set of choices that the enum could represent. The examples below show some of these type-specific custom field definitions.
     * @summary Get a custom field
     * @param {CustomFieldsApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public getMetadata(requestParameters: CustomFieldsApiGetMetadataRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).getMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the compact representation of all of the custom fields in a workspace.
     * @summary Get a workspace\'s custom fields
     * @param {CustomFieldsApiListWorkspaceCustomFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public listWorkspaceCustomFields(requestParameters: CustomFieldsApiListWorkspaceCustomFieldsRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).listWorkspaceCustomFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Moves a particular enum option to be either before or after another specified enum option in the custom field. Locked custom fields can only be reordered by the user who locked the field.
     * @summary Reorder a custom field\'s enum
     * @param {CustomFieldsApiReorderEnumOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public reorderEnumOption(requestParameters: CustomFieldsApiReorderEnumOptionRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).reorderEnumOption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing enum option. Enum custom fields require at least one enabled enum option. Locked custom fields can only be updated by the user who locked the field. Returns the full record of the updated enum option.
     * @summary Update an enum option
     * @param {CustomFieldsApiUpdateEnumOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public updateEnumOption(requestParameters: CustomFieldsApiUpdateEnumOptionRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).updateEnumOption(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing custom field can be updated by making a PUT request on the URL for that custom field. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the custom field. A custom field’s `type` cannot be updated. An enum custom field’s `enum_options` cannot be updated with this endpoint. Instead see “Work With Enum Options” for information on how to update `enum_options`. Locked custom fields can only be updated by the user who locked the field. Returns the complete updated custom field record.
     * @summary Update a custom field
     * @param {CustomFieldsApiUpdateFieldRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldsApiGenerated
     */
    public updateFieldRecord(requestParameters: CustomFieldsApiUpdateFieldRecordRequest, options?: AxiosRequestConfig) {
        return CustomFieldsApiFp(this.configuration).updateFieldRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
