/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { GoalAddSupportingRelationshipRequest } from '../models';
// @ts-ignore
import { GoalRelationshipRequest } from '../models';
// @ts-ignore
import { GoalRelationshipsCreateSupportingRelationshipRequest } from '../models';
// @ts-ignore
import { GoalRelationshipsCreateSupportingRelationshipResponse } from '../models';
// @ts-ignore
import { GoalRelationshipsGetCompactRecordsResponse } from '../models';
// @ts-ignore
import { GoalRelationshipsGetRecordByIdResponse } from '../models';
// @ts-ignore
import { GoalRelationshipsRemoveSupportingRelationshipRequest } from '../models';
// @ts-ignore
import { GoalRelationshipsRemoveSupportingRelationshipResponse } from '../models';
// @ts-ignore
import { GoalRelationshipsUpdateGoalRelationshipRecordRequest } from '../models';
// @ts-ignore
import { GoalRelationshipsUpdateGoalRelationshipRecordResponse } from '../models';
// @ts-ignore
import { GoalRemoveSupportingRelationshipRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GoalRelationshipsApi - axios parameter creator
 * @export
 */
export const GoalRelationshipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
         * @summary Add a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalRelationshipsCreateSupportingRelationshipRequest} goalRelationshipsCreateSupportingRelationshipRequest The supporting resource to be added to the goal
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupportingRelationship: async (goalGid: string, goalRelationshipsCreateSupportingRelationshipRequest: GoalRelationshipsCreateSupportingRelationshipRequest, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('createSupportingRelationship', 'goalGid', goalGid)
            // verify required parameter 'goalRelationshipsCreateSupportingRelationshipRequest' is not null or undefined
            assertParamExists('createSupportingRelationship', 'goalRelationshipsCreateSupportingRelationshipRequest', goalRelationshipsCreateSupportingRelationshipRequest)
            const localVarPath = `/goals/{goal_gid}/addSupportingRelationship`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalRelationshipsCreateSupportingRelationshipRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/addSupportingRelationship',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalRelationshipsCreateSupportingRelationshipRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns compact goal relationship records.
         * @summary Get goal relationships
         * @param {string} supportedGoal Globally unique identifier for the supported goal in the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [resourceSubtype] If provided, filter to goal relationships with a given resource_subtype.
         * @param {Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords: async (supportedGoal: string, optPretty?: boolean, limit?: number, offset?: string, resourceSubtype?: string, optFields?: Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supportedGoal' is not null or undefined
            assertParamExists('getCompactRecords', 'supportedGoal', supportedGoal)
            const localVarPath = `/goal_relationships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (supportedGoal !== undefined) {
                localVarQueryParameter['supported_goal'] = supportedGoal;
            }

            if (resourceSubtype !== undefined) {
                localVarQueryParameter['resource_subtype'] = resourceSubtype;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goal_relationships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @summary Get a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById: async (goalRelationshipGid: string, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalRelationshipGid' is not null or undefined
            assertParamExists('getRecordById', 'goalRelationshipGid', goalRelationshipGid)
            const localVarPath = `/goal_relationships/{goal_relationship_gid}`
                .replace(`{${"goal_relationship_gid"}}`, encodeURIComponent(String(goalRelationshipGid !== undefined ? goalRelationshipGid : `-goal_relationship_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goal_relationships/{goal_relationship_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a goal relationship for a given parent goal.
         * @summary Removes a supporting goal relationship
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalRelationshipsRemoveSupportingRelationshipRequest} goalRelationshipsRemoveSupportingRelationshipRequest The supporting resource to be removed from the goal
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSupportingRelationship: async (goalGid: string, goalRelationshipsRemoveSupportingRelationshipRequest: GoalRelationshipsRemoveSupportingRelationshipRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('removeSupportingRelationship', 'goalGid', goalGid)
            // verify required parameter 'goalRelationshipsRemoveSupportingRelationshipRequest' is not null or undefined
            assertParamExists('removeSupportingRelationship', 'goalRelationshipsRemoveSupportingRelationshipRequest', goalRelationshipsRemoveSupportingRelationshipRequest)
            const localVarPath = `/goals/{goal_gid}/removeSupportingRelationship`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalRelationshipsRemoveSupportingRelationshipRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/removeSupportingRelationship',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalRelationshipsRemoveSupportingRelationshipRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @summary Update a goal relationship
         * @param {string} goalRelationshipGid Globally unique identifier for the goal relationship.
         * @param {GoalRelationshipsUpdateGoalRelationshipRecordRequest} goalRelationshipsUpdateGoalRelationshipRecordRequest The updated fields for the goal relationship.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalRelationshipRecord: async (goalRelationshipGid: string, goalRelationshipsUpdateGoalRelationshipRecordRequest: GoalRelationshipsUpdateGoalRelationshipRecordRequest, optPretty?: boolean, optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalRelationshipGid' is not null or undefined
            assertParamExists('updateGoalRelationshipRecord', 'goalRelationshipGid', goalRelationshipGid)
            // verify required parameter 'goalRelationshipsUpdateGoalRelationshipRecordRequest' is not null or undefined
            assertParamExists('updateGoalRelationshipRecord', 'goalRelationshipsUpdateGoalRelationshipRecordRequest', goalRelationshipsUpdateGoalRelationshipRecordRequest)
            const localVarPath = `/goal_relationships/{goal_relationship_gid}`
                .replace(`{${"goal_relationship_gid"}}`, encodeURIComponent(String(goalRelationshipGid !== undefined ? goalRelationshipGid : `-goal_relationship_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalRelationshipsUpdateGoalRelationshipRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goal_relationships/{goal_relationship_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalRelationshipsUpdateGoalRelationshipRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalRelationshipsApi - functional programming interface
 * @export
 */
export const GoalRelationshipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalRelationshipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
         * @summary Add a supporting goal relationship
         * @param {GoalRelationshipsApiCreateSupportingRelationshipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSupportingRelationship(requestParameters: GoalRelationshipsApiCreateSupportingRelationshipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalRelationshipsCreateSupportingRelationshipResponse>> {
            const goalRelationshipsCreateSupportingRelationshipRequest: GoalRelationshipsCreateSupportingRelationshipRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSupportingRelationship(requestParameters.goalGid, goalRelationshipsCreateSupportingRelationshipRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns compact goal relationship records.
         * @summary Get goal relationships
         * @param {GoalRelationshipsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompactRecords(requestParameters: GoalRelationshipsApiGetCompactRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalRelationshipsGetCompactRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompactRecords(requestParameters.supportedGoal, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.resourceSubtype, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @summary Get a goal relationship
         * @param {GoalRelationshipsApiGetRecordByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordById(requestParameters: GoalRelationshipsApiGetRecordByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalRelationshipsGetRecordByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordById(requestParameters.goalRelationshipGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a goal relationship for a given parent goal.
         * @summary Removes a supporting goal relationship
         * @param {GoalRelationshipsApiRemoveSupportingRelationshipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSupportingRelationship(requestParameters: GoalRelationshipsApiRemoveSupportingRelationshipRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalRelationshipsRemoveSupportingRelationshipResponse>> {
            const goalRelationshipsRemoveSupportingRelationshipRequest: GoalRelationshipsRemoveSupportingRelationshipRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSupportingRelationship(requestParameters.goalGid, goalRelationshipsRemoveSupportingRelationshipRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @summary Update a goal relationship
         * @param {GoalRelationshipsApiUpdateGoalRelationshipRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoalRelationshipRecord(requestParameters: GoalRelationshipsApiUpdateGoalRelationshipRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalRelationshipsUpdateGoalRelationshipRecordResponse>> {
            const goalRelationshipsUpdateGoalRelationshipRecordRequest: GoalRelationshipsUpdateGoalRelationshipRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoalRelationshipRecord(requestParameters.goalRelationshipGid, goalRelationshipsUpdateGoalRelationshipRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalRelationshipsApi - factory interface
 * @export
 */
export const GoalRelationshipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalRelationshipsApiFp(configuration)
    return {
        /**
         * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
         * @summary Add a supporting goal relationship
         * @param {GoalRelationshipsApiCreateSupportingRelationshipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSupportingRelationship(requestParameters: GoalRelationshipsApiCreateSupportingRelationshipRequest, options?: AxiosRequestConfig): AxiosPromise<GoalRelationshipsCreateSupportingRelationshipResponse> {
            return localVarFp.createSupportingRelationship(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns compact goal relationship records.
         * @summary Get goal relationships
         * @param {GoalRelationshipsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords(requestParameters: GoalRelationshipsApiGetCompactRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<GoalRelationshipsGetCompactRecordsResponse> {
            return localVarFp.getCompactRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete updated goal relationship record for a single goal relationship.
         * @summary Get a goal relationship
         * @param {GoalRelationshipsApiGetRecordByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById(requestParameters: GoalRelationshipsApiGetRecordByIdRequest, options?: AxiosRequestConfig): AxiosPromise<GoalRelationshipsGetRecordByIdResponse> {
            return localVarFp.getRecordById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a goal relationship for a given parent goal.
         * @summary Removes a supporting goal relationship
         * @param {GoalRelationshipsApiRemoveSupportingRelationshipRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSupportingRelationship(requestParameters: GoalRelationshipsApiRemoveSupportingRelationshipRequest, options?: AxiosRequestConfig): AxiosPromise<GoalRelationshipsRemoveSupportingRelationshipResponse> {
            return localVarFp.removeSupportingRelationship(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
         * @summary Update a goal relationship
         * @param {GoalRelationshipsApiUpdateGoalRelationshipRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalRelationshipRecord(requestParameters: GoalRelationshipsApiUpdateGoalRelationshipRecordRequest, options?: AxiosRequestConfig): AxiosPromise<GoalRelationshipsUpdateGoalRelationshipRecordResponse> {
            return localVarFp.updateGoalRelationshipRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSupportingRelationship operation in GoalRelationshipsApi.
 * @export
 * @interface GoalRelationshipsApiCreateSupportingRelationshipRequest
 */
export type GoalRelationshipsApiCreateSupportingRelationshipRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalRelationshipsApiCreateSupportingRelationship
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalRelationshipsApiCreateSupportingRelationship
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>}
    * @memberof GoalRelationshipsApiCreateSupportingRelationship
    */
    readonly optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>
    
} & GoalRelationshipsCreateSupportingRelationshipRequest

/**
 * Request parameters for getCompactRecords operation in GoalRelationshipsApi.
 * @export
 * @interface GoalRelationshipsApiGetCompactRecordsRequest
 */
export type GoalRelationshipsApiGetCompactRecordsRequest = {
    
    /**
    * Globally unique identifier for the supported goal in the goal relationship.
    * @type {string}
    * @memberof GoalRelationshipsApiGetCompactRecords
    */
    readonly supportedGoal: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalRelationshipsApiGetCompactRecords
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof GoalRelationshipsApiGetCompactRecords
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof GoalRelationshipsApiGetCompactRecords
    */
    readonly offset?: string
    
    /**
    * If provided, filter to goal relationships with a given resource_subtype.
    * @type {string}
    * @memberof GoalRelationshipsApiGetCompactRecords
    */
    readonly resourceSubtype?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>}
    * @memberof GoalRelationshipsApiGetCompactRecords
    */
    readonly optFields?: Array<'contribution_weight' | 'offset' | 'path' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name' | 'uri'>
    
}

/**
 * Request parameters for getRecordById operation in GoalRelationshipsApi.
 * @export
 * @interface GoalRelationshipsApiGetRecordByIdRequest
 */
export type GoalRelationshipsApiGetRecordByIdRequest = {
    
    /**
    * Globally unique identifier for the goal relationship.
    * @type {string}
    * @memberof GoalRelationshipsApiGetRecordById
    */
    readonly goalRelationshipGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalRelationshipsApiGetRecordById
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>}
    * @memberof GoalRelationshipsApiGetRecordById
    */
    readonly optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>
    
}

/**
 * Request parameters for removeSupportingRelationship operation in GoalRelationshipsApi.
 * @export
 * @interface GoalRelationshipsApiRemoveSupportingRelationshipRequest
 */
export type GoalRelationshipsApiRemoveSupportingRelationshipRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalRelationshipsApiRemoveSupportingRelationship
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalRelationshipsApiRemoveSupportingRelationship
    */
    readonly optPretty?: boolean
    
} & GoalRelationshipsRemoveSupportingRelationshipRequest

/**
 * Request parameters for updateGoalRelationshipRecord operation in GoalRelationshipsApi.
 * @export
 * @interface GoalRelationshipsApiUpdateGoalRelationshipRecordRequest
 */
export type GoalRelationshipsApiUpdateGoalRelationshipRecordRequest = {
    
    /**
    * Globally unique identifier for the goal relationship.
    * @type {string}
    * @memberof GoalRelationshipsApiUpdateGoalRelationshipRecord
    */
    readonly goalRelationshipGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalRelationshipsApiUpdateGoalRelationshipRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>}
    * @memberof GoalRelationshipsApiUpdateGoalRelationshipRecord
    */
    readonly optFields?: Array<'contribution_weight' | 'resource_subtype' | 'supported_goal' | 'supported_goal.name' | 'supported_goal.owner' | 'supported_goal.owner.name' | 'supporting_resource' | 'supporting_resource.name'>
    
} & GoalRelationshipsUpdateGoalRelationshipRecordRequest

/**
 * GoalRelationshipsApiGenerated - object-oriented interface
 * @export
 * @class GoalRelationshipsApiGenerated
 * @extends {BaseAPI}
 */
export class GoalRelationshipsApiGenerated extends BaseAPI {
    /**
     * Creates a goal relationship by adding a supporting resource to a given goal.  Returns the newly created goal relationship record.
     * @summary Add a supporting goal relationship
     * @param {GoalRelationshipsApiCreateSupportingRelationshipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApiGenerated
     */
    public createSupportingRelationship(requestParameters: GoalRelationshipsApiCreateSupportingRelationshipRequest, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).createSupportingRelationship(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns compact goal relationship records.
     * @summary Get goal relationships
     * @param {GoalRelationshipsApiGetCompactRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApiGenerated
     */
    public getCompactRecords(requestParameters: GoalRelationshipsApiGetCompactRecordsRequest, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).getCompactRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete updated goal relationship record for a single goal relationship.
     * @summary Get a goal relationship
     * @param {GoalRelationshipsApiGetRecordByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApiGenerated
     */
    public getRecordById(requestParameters: GoalRelationshipsApiGetRecordByIdRequest, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).getRecordById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a goal relationship for a given parent goal.
     * @summary Removes a supporting goal relationship
     * @param {GoalRelationshipsApiRemoveSupportingRelationshipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApiGenerated
     */
    public removeSupportingRelationship(requestParameters: GoalRelationshipsApiRemoveSupportingRelationshipRequest, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).removeSupportingRelationship(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing goal relationship can be updated by making a PUT request on the URL for that goal relationship. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal relationship record.
     * @summary Update a goal relationship
     * @param {GoalRelationshipsApiUpdateGoalRelationshipRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalRelationshipsApiGenerated
     */
    public updateGoalRelationshipRecord(requestParameters: GoalRelationshipsApiUpdateGoalRelationshipRecordRequest, options?: AxiosRequestConfig) {
        return GoalRelationshipsApiFp(this.configuration).updateGoalRelationshipRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
