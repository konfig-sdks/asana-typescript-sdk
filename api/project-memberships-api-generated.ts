/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ProjectMembershipsGetCompactRecordsResponse } from '../models';
// @ts-ignore
import { ProjectMembershipsGetRecordResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProjectMembershipsApi - axios parameter creator
 * @export
 */
export const ProjectMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the compact project membership records for the project.
         * @summary Get memberships from a project
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {string} [user] A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'access_level' | 'member' | 'member.name' | 'offset' | 'parent' | 'parent.name' | 'path' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords: async (projectGid: string, user?: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'access_level' | 'member' | 'member.name' | 'offset' | 'parent' | 'parent.name' | 'path' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGid' is not null or undefined
            assertParamExists('getCompactRecords', 'projectGid', projectGid)
            const localVarPath = `/projects/{project_gid}/project_memberships`
                .replace(`{${"project_gid"}}`, encodeURIComponent(String(projectGid !== undefined ? projectGid : `-project_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_gid}/project_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete project record for a single project membership.
         * @summary Get a project membership
         * @param {string} projectMembershipGid 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'access_level' | 'member' | 'member.name' | 'parent' | 'parent.name' | 'project' | 'project.name' | 'user' | 'user.name' | 'write_access'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (projectMembershipGid: string, optPretty?: boolean, optFields?: Array<'access_level' | 'member' | 'member.name' | 'parent' | 'parent.name' | 'project' | 'project.name' | 'user' | 'user.name' | 'write_access'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectMembershipGid' is not null or undefined
            assertParamExists('getRecord', 'projectMembershipGid', projectMembershipGid)
            const localVarPath = `/project_memberships/{project_membership_gid}`
                .replace(`{${"project_membership_gid"}}`, encodeURIComponent(String(projectMembershipGid !== undefined ? projectMembershipGid : `-project_membership_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/project_memberships/{project_membership_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectMembershipsApi - functional programming interface
 * @export
 */
export const ProjectMembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectMembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the compact project membership records for the project.
         * @summary Get memberships from a project
         * @param {ProjectMembershipsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompactRecords(requestParameters: ProjectMembershipsApiGetCompactRecordsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectMembershipsGetCompactRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompactRecords(requestParameters.projectGid, requestParameters.user, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete project record for a single project membership.
         * @summary Get a project membership
         * @param {ProjectMembershipsApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: ProjectMembershipsApiGetRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectMembershipsGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.projectMembershipGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectMembershipsApi - factory interface
 * @export
 */
export const ProjectMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectMembershipsApiFp(configuration)
    return {
        /**
         * Returns the compact project membership records for the project.
         * @summary Get memberships from a project
         * @param {ProjectMembershipsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords(requestParameters: ProjectMembershipsApiGetCompactRecordsRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectMembershipsGetCompactRecordsResponse> {
            return localVarFp.getCompactRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete project record for a single project membership.
         * @summary Get a project membership
         * @param {ProjectMembershipsApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: ProjectMembershipsApiGetRecordRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectMembershipsGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompactRecords operation in ProjectMembershipsApi.
 * @export
 * @interface ProjectMembershipsApiGetCompactRecordsRequest
 */
export type ProjectMembershipsApiGetCompactRecordsRequest = {
    
    /**
    * Globally unique identifier for the project.
    * @type {string}
    * @memberof ProjectMembershipsApiGetCompactRecords
    */
    readonly projectGid: string
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof ProjectMembershipsApiGetCompactRecords
    */
    readonly user?: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectMembershipsApiGetCompactRecords
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof ProjectMembershipsApiGetCompactRecords
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof ProjectMembershipsApiGetCompactRecords
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'access_level' | 'member' | 'member.name' | 'offset' | 'parent' | 'parent.name' | 'path' | 'uri'>}
    * @memberof ProjectMembershipsApiGetCompactRecords
    */
    readonly optFields?: Array<'access_level' | 'member' | 'member.name' | 'offset' | 'parent' | 'parent.name' | 'path' | 'uri'>
    
}

/**
 * Request parameters for getRecord operation in ProjectMembershipsApi.
 * @export
 * @interface ProjectMembershipsApiGetRecordRequest
 */
export type ProjectMembershipsApiGetRecordRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ProjectMembershipsApiGetRecord
    */
    readonly projectMembershipGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof ProjectMembershipsApiGetRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'access_level' | 'member' | 'member.name' | 'parent' | 'parent.name' | 'project' | 'project.name' | 'user' | 'user.name' | 'write_access'>}
    * @memberof ProjectMembershipsApiGetRecord
    */
    readonly optFields?: Array<'access_level' | 'member' | 'member.name' | 'parent' | 'parent.name' | 'project' | 'project.name' | 'user' | 'user.name' | 'write_access'>
    
}

/**
 * ProjectMembershipsApiGenerated - object-oriented interface
 * @export
 * @class ProjectMembershipsApiGenerated
 * @extends {BaseAPI}
 */
export class ProjectMembershipsApiGenerated extends BaseAPI {
    /**
     * Returns the compact project membership records for the project.
     * @summary Get memberships from a project
     * @param {ProjectMembershipsApiGetCompactRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMembershipsApiGenerated
     */
    public getCompactRecords(requestParameters: ProjectMembershipsApiGetCompactRecordsRequest, options?: AxiosRequestConfig) {
        return ProjectMembershipsApiFp(this.configuration).getCompactRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete project record for a single project membership.
     * @summary Get a project membership
     * @param {ProjectMembershipsApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectMembershipsApiGenerated
     */
    public getRecord(requestParameters: ProjectMembershipsApiGetRecordRequest, options?: AxiosRequestConfig) {
        return ProjectMembershipsApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
