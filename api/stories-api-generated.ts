/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { StoriesCreateCommentRequest } from '../models';
// @ts-ignore
import { StoriesCreateCommentResponse } from '../models';
// @ts-ignore
import { StoriesDeleteStoryRecordResponse } from '../models';
// @ts-ignore
import { StoriesGetFullRecordResponse } from '../models';
// @ts-ignore
import { StoriesGetTaskStoriesResponse } from '../models';
// @ts-ignore
import { StoriesUpdateFullRecordRequest } from '../models';
// @ts-ignore
import { StoriesUpdateFullRecordResponse } from '../models';
// @ts-ignore
import { StoryBase } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StoriesApi - axios parameter creator
 * @export
 */
export const StoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
         * @summary Create a story on a task
         * @param {string} taskGid The task to operate on.
         * @param {StoriesCreateCommentRequest} storiesCreateCommentRequest The story to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (taskGid: string, storiesCreateCommentRequest: StoriesCreateCommentRequest, optPretty?: boolean, optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('createComment', 'taskGid', taskGid)
            // verify required parameter 'storiesCreateCommentRequest' is not null or undefined
            assertParamExists('createComment', 'storiesCreateCommentRequest', storiesCreateCommentRequest)
            const localVarPath = `/tasks/{task_gid}/stories`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: storiesCreateCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/stories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(storiesCreateCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
         * @summary Delete a story
         * @param {string} storyGid Globally unique identifier for the story.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoryRecord: async (storyGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyGid' is not null or undefined
            assertParamExists('deleteStoryRecord', 'storyGid', storyGid)
            const localVarPath = `/stories/{story_gid}`
                .replace(`{${"story_gid"}}`, encodeURIComponent(String(storyGid !== undefined ? storyGid : `-story_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stories/{story_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the full record for a single story.
         * @summary Get a story
         * @param {string} storyGid Globally unique identifier for the story.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullRecord: async (storyGid: string, optPretty?: boolean, optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyGid' is not null or undefined
            assertParamExists('getFullRecord', 'storyGid', storyGid)
            const localVarPath = `/stories/{story_gid}`
                .replace(`{${"story_gid"}}`, encodeURIComponent(String(storyGid !== undefined ? storyGid : `-story_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stories/{story_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact records for all stories on the task.
         * @summary Get stories from a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'offset' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'path' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStories: async (taskGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'offset' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'path' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('getTaskStories', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}/stories`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/stories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
         * @summary Update a story
         * @param {string} storyGid Globally unique identifier for the story.
         * @param {StoriesUpdateFullRecordRequest} storiesUpdateFullRecordRequest The comment story to update.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullRecord: async (storyGid: string, storiesUpdateFullRecordRequest: StoriesUpdateFullRecordRequest, optPretty?: boolean, optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyGid' is not null or undefined
            assertParamExists('updateFullRecord', 'storyGid', storyGid)
            // verify required parameter 'storiesUpdateFullRecordRequest' is not null or undefined
            assertParamExists('updateFullRecord', 'storiesUpdateFullRecordRequest', storiesUpdateFullRecordRequest)
            const localVarPath = `/stories/{story_gid}`
                .replace(`{${"story_gid"}}`, encodeURIComponent(String(storyGid !== undefined ? storyGid : `-story_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: storiesUpdateFullRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/stories/{story_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(storiesUpdateFullRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoriesApi - functional programming interface
 * @export
 */
export const StoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
         * @summary Create a story on a task
         * @param {StoriesApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(requestParameters: StoriesApiCreateCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoriesCreateCommentResponse>> {
            const storiesCreateCommentRequest: StoriesCreateCommentRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(requestParameters.taskGid, storiesCreateCommentRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
         * @summary Delete a story
         * @param {StoriesApiDeleteStoryRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStoryRecord(requestParameters: StoriesApiDeleteStoryRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoriesDeleteStoryRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStoryRecord(requestParameters.storyGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the full record for a single story.
         * @summary Get a story
         * @param {StoriesApiGetFullRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullRecord(requestParameters: StoriesApiGetFullRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoriesGetFullRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullRecord(requestParameters.storyGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact records for all stories on the task.
         * @summary Get stories from a task
         * @param {StoriesApiGetTaskStoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskStories(requestParameters: StoriesApiGetTaskStoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoriesGetTaskStoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskStories(requestParameters.taskGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
         * @summary Update a story
         * @param {StoriesApiUpdateFullRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFullRecord(requestParameters: StoriesApiUpdateFullRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoriesUpdateFullRecordResponse>> {
            const storiesUpdateFullRecordRequest: StoriesUpdateFullRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFullRecord(requestParameters.storyGid, storiesUpdateFullRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StoriesApi - factory interface
 * @export
 */
export const StoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoriesApiFp(configuration)
    return {
        /**
         * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
         * @summary Create a story on a task
         * @param {StoriesApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(requestParameters: StoriesApiCreateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<StoriesCreateCommentResponse> {
            return localVarFp.createComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
         * @summary Delete a story
         * @param {StoriesApiDeleteStoryRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStoryRecord(requestParameters: StoriesApiDeleteStoryRecordRequest, options?: AxiosRequestConfig): AxiosPromise<StoriesDeleteStoryRecordResponse> {
            return localVarFp.deleteStoryRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the full record for a single story.
         * @summary Get a story
         * @param {StoriesApiGetFullRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullRecord(requestParameters: StoriesApiGetFullRecordRequest, options?: AxiosRequestConfig): AxiosPromise<StoriesGetFullRecordResponse> {
            return localVarFp.getFullRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact records for all stories on the task.
         * @summary Get stories from a task
         * @param {StoriesApiGetTaskStoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStories(requestParameters: StoriesApiGetTaskStoriesRequest, options?: AxiosRequestConfig): AxiosPromise<StoriesGetTaskStoriesResponse> {
            return localVarFp.getTaskStories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
         * @summary Update a story
         * @param {StoriesApiUpdateFullRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFullRecord(requestParameters: StoriesApiUpdateFullRecordRequest, options?: AxiosRequestConfig): AxiosPromise<StoriesUpdateFullRecordResponse> {
            return localVarFp.updateFullRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createComment operation in StoriesApi.
 * @export
 * @interface StoriesApiCreateCommentRequest
 */
export type StoriesApiCreateCommentRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof StoriesApiCreateComment
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof StoriesApiCreateComment
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>}
    * @memberof StoriesApiCreateComment
    */
    readonly optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>
    
} & StoriesCreateCommentRequest

/**
 * Request parameters for deleteStoryRecord operation in StoriesApi.
 * @export
 * @interface StoriesApiDeleteStoryRecordRequest
 */
export type StoriesApiDeleteStoryRecordRequest = {
    
    /**
    * Globally unique identifier for the story.
    * @type {string}
    * @memberof StoriesApiDeleteStoryRecord
    */
    readonly storyGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof StoriesApiDeleteStoryRecord
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getFullRecord operation in StoriesApi.
 * @export
 * @interface StoriesApiGetFullRecordRequest
 */
export type StoriesApiGetFullRecordRequest = {
    
    /**
    * Globally unique identifier for the story.
    * @type {string}
    * @memberof StoriesApiGetFullRecord
    */
    readonly storyGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof StoriesApiGetFullRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>}
    * @memberof StoriesApiGetFullRecord
    */
    readonly optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>
    
}

/**
 * Request parameters for getTaskStories operation in StoriesApi.
 * @export
 * @interface StoriesApiGetTaskStoriesRequest
 */
export type StoriesApiGetTaskStoriesRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof StoriesApiGetTaskStories
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof StoriesApiGetTaskStories
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof StoriesApiGetTaskStories
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof StoriesApiGetTaskStories
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'offset' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'path' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type' | 'uri'>}
    * @memberof StoriesApiGetTaskStories
    */
    readonly optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'offset' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'path' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type' | 'uri'>
    
}

/**
 * Request parameters for updateFullRecord operation in StoriesApi.
 * @export
 * @interface StoriesApiUpdateFullRecordRequest
 */
export type StoriesApiUpdateFullRecordRequest = {
    
    /**
    * Globally unique identifier for the story.
    * @type {string}
    * @memberof StoriesApiUpdateFullRecord
    */
    readonly storyGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof StoriesApiUpdateFullRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>}
    * @memberof StoriesApiUpdateFullRecord
    */
    readonly optFields?: Array<'assignee' | 'assignee.name' | 'created_at' | 'created_by' | 'created_by.name' | 'custom_field' | 'custom_field.date_value' | 'custom_field.date_value.date' | 'custom_field.date_value.date_time' | 'custom_field.display_value' | 'custom_field.enabled' | 'custom_field.enum_options' | 'custom_field.enum_options.color' | 'custom_field.enum_options.enabled' | 'custom_field.enum_options.name' | 'custom_field.enum_value' | 'custom_field.enum_value.color' | 'custom_field.enum_value.enabled' | 'custom_field.enum_value.name' | 'custom_field.id_prefix' | 'custom_field.is_formula_field' | 'custom_field.multi_enum_values' | 'custom_field.multi_enum_values.color' | 'custom_field.multi_enum_values.enabled' | 'custom_field.multi_enum_values.name' | 'custom_field.name' | 'custom_field.number_value' | 'custom_field.representation_type' | 'custom_field.resource_subtype' | 'custom_field.text_value' | 'custom_field.type' | 'dependency' | 'dependency.created_by' | 'dependency.name' | 'dependency.resource_subtype' | 'duplicate_of' | 'duplicate_of.created_by' | 'duplicate_of.name' | 'duplicate_of.resource_subtype' | 'duplicated_from' | 'duplicated_from.created_by' | 'duplicated_from.name' | 'duplicated_from.resource_subtype' | 'follower' | 'follower.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_text' | 'is_editable' | 'is_edited' | 'is_pinned' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'new_approval_status' | 'new_date_value' | 'new_dates' | 'new_dates.due_at' | 'new_dates.due_on' | 'new_dates.start_on' | 'new_enum_value' | 'new_enum_value.color' | 'new_enum_value.enabled' | 'new_enum_value.name' | 'new_multi_enum_values' | 'new_multi_enum_values.color' | 'new_multi_enum_values.enabled' | 'new_multi_enum_values.name' | 'new_name' | 'new_number_value' | 'new_people_value' | 'new_people_value.name' | 'new_resource_subtype' | 'new_section' | 'new_section.name' | 'new_text_value' | 'num_hearts' | 'num_likes' | 'old_approval_status' | 'old_date_value' | 'old_dates' | 'old_dates.due_at' | 'old_dates.due_on' | 'old_dates.start_on' | 'old_enum_value' | 'old_enum_value.color' | 'old_enum_value.enabled' | 'old_enum_value.name' | 'old_multi_enum_values' | 'old_multi_enum_values.color' | 'old_multi_enum_values.enabled' | 'old_multi_enum_values.name' | 'old_name' | 'old_number_value' | 'old_people_value' | 'old_people_value.name' | 'old_resource_subtype' | 'old_section' | 'old_section.name' | 'old_text_value' | 'previews' | 'previews.fallback' | 'previews.footer' | 'previews.header' | 'previews.header_link' | 'previews.html_text' | 'previews.text' | 'previews.title' | 'previews.title_link' | 'project' | 'project.name' | 'resource_subtype' | 'source' | 'sticker_name' | 'story' | 'story.created_at' | 'story.created_by' | 'story.created_by.name' | 'story.resource_subtype' | 'story.text' | 'tag' | 'tag.name' | 'target' | 'target.created_by' | 'target.name' | 'target.resource_subtype' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype' | 'text' | 'type'>
    
} & StoriesUpdateFullRecordRequest

/**
 * StoriesApiGenerated - object-oriented interface
 * @export
 * @class StoriesApiGenerated
 * @extends {BaseAPI}
 */
export class StoriesApiGenerated extends BaseAPI {
    /**
     * Adds a story to a task. This endpoint currently only allows for comment stories to be created. The comment will be authored by the currently authenticated user, and timestamped when the server receives the request.  Returns the full record for the new story added to the task.
     * @summary Create a story on a task
     * @param {StoriesApiCreateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoriesApiGenerated
     */
    public createComment(requestParameters: StoriesApiCreateCommentRequest, options?: AxiosRequestConfig) {
        return StoriesApiFp(this.configuration).createComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a story. A user can only delete stories they have created.  Returns an empty data record.
     * @summary Delete a story
     * @param {StoriesApiDeleteStoryRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoriesApiGenerated
     */
    public deleteStoryRecord(requestParameters: StoriesApiDeleteStoryRecordRequest, options?: AxiosRequestConfig) {
        return StoriesApiFp(this.configuration).deleteStoryRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the full record for a single story.
     * @summary Get a story
     * @param {StoriesApiGetFullRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoriesApiGenerated
     */
    public getFullRecord(requestParameters: StoriesApiGetFullRecordRequest, options?: AxiosRequestConfig) {
        return StoriesApiFp(this.configuration).getFullRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact records for all stories on the task.
     * @summary Get stories from a task
     * @param {StoriesApiGetTaskStoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoriesApiGenerated
     */
    public getTaskStories(requestParameters: StoriesApiGetTaskStoriesRequest, options?: AxiosRequestConfig) {
        return StoriesApiFp(this.configuration).getTaskStories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the story and returns the full record for the updated story. Only comment stories can have their text updated, and only comment stories and attachment stories can be pinned. Only one of `text` and `html_text` can be specified.
     * @summary Update a story
     * @param {StoriesApiUpdateFullRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoriesApiGenerated
     */
    public updateFullRecord(requestParameters: StoriesApiUpdateFullRecordRequest, options?: AxiosRequestConfig) {
        return StoriesApiFp(this.configuration).updateFullRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
