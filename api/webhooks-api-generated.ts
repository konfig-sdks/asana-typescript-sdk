/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { WebhookRequest } from '../models';
// @ts-ignore
import { WebhookUpdateRequest } from '../models';
// @ts-ignore
import { WebhooksEstablishWebhookRequest } from '../models';
// @ts-ignore
import { WebhooksEstablishWebhookResponse } from '../models';
// @ts-ignore
import { WebhooksGetWebhookRecordResponse } from '../models';
// @ts-ignore
import { WebhooksListMultipleWebhooksResponse } from '../models';
// @ts-ignore
import { WebhooksRemoveWebhookResponse } from '../models';
// @ts-ignore
import { WebhooksUpdateWebhookFiltersRequest } from '../models';
// @ts-ignore
import { WebhooksUpdateWebhookFiltersResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
         * @summary Establish a webhook
         * @param {WebhooksEstablishWebhookRequest} webhooksEstablishWebhookRequest The webhook workspace and target.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishWebhook: async (webhooksEstablishWebhookRequest: WebhooksEstablishWebhookRequest, optPretty?: boolean, optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhooksEstablishWebhookRequest' is not null or undefined
            assertParamExists('establishWebhook', 'webhooksEstablishWebhookRequest', webhooksEstablishWebhookRequest)
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksEstablishWebhookRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksEstablishWebhookRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the full record for the given webhook.
         * @summary Get a webhook
         * @param {string} webhookGid Globally unique identifier for the webhook.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookRecord: async (webhookGid: string, optPretty?: boolean, optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookGid' is not null or undefined
            assertParamExists('getWebhookRecord', 'webhookGid', webhookGid)
            const localVarPath = `/webhooks/{webhook_gid}`
                .replace(`{${"webhook_gid"}}`, encodeURIComponent(String(webhookGid !== undefined ? webhookGid : `-webhook_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{webhook_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
         * @summary Get multiple webhooks
         * @param {string} workspace The workspace to query for webhooks in.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [resource] Only return webhooks for the given resource.
         * @param {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'offset' | 'path' | 'resource' | 'resource.name' | 'target' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleWebhooks: async (workspace: string, optPretty?: boolean, limit?: number, offset?: string, resource?: string, optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'offset' | 'path' | 'resource' | 'resource.name' | 'target' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            assertParamExists('listMultipleWebhooks', 'workspace', workspace)
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
         * @summary Delete a webhook
         * @param {string} webhookGid Globally unique identifier for the webhook.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebhook: async (webhookGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookGid' is not null or undefined
            assertParamExists('removeWebhook', 'webhookGid', webhookGid)
            const localVarPath = `/webhooks/{webhook_gid}`
                .replace(`{${"webhook_gid"}}`, encodeURIComponent(String(webhookGid !== undefined ? webhookGid : `-webhook_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{webhook_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing webhook\'s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook\'s previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
         * @summary Update a webhook
         * @param {string} webhookGid Globally unique identifier for the webhook.
         * @param {WebhooksUpdateWebhookFiltersRequest} webhooksUpdateWebhookFiltersRequest The updated filters for the webhook.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookFilters: async (webhookGid: string, webhooksUpdateWebhookFiltersRequest: WebhooksUpdateWebhookFiltersRequest, optPretty?: boolean, optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookGid' is not null or undefined
            assertParamExists('updateWebhookFilters', 'webhookGid', webhookGid)
            // verify required parameter 'webhooksUpdateWebhookFiltersRequest' is not null or undefined
            assertParamExists('updateWebhookFilters', 'webhooksUpdateWebhookFiltersRequest', webhooksUpdateWebhookFiltersRequest)
            const localVarPath = `/webhooks/{webhook_gid}`
                .replace(`{${"webhook_gid"}}`, encodeURIComponent(String(webhookGid !== undefined ? webhookGid : `-webhook_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webhooksUpdateWebhookFiltersRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webhooks/{webhook_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webhooksUpdateWebhookFiltersRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
         * @summary Establish a webhook
         * @param {WebhooksApiEstablishWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async establishWebhook(requestParameters: WebhooksApiEstablishWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksEstablishWebhookResponse>> {
            const webhooksEstablishWebhookRequest: WebhooksEstablishWebhookRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.establishWebhook(webhooksEstablishWebhookRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the full record for the given webhook.
         * @summary Get a webhook
         * @param {WebhooksApiGetWebhookRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookRecord(requestParameters: WebhooksApiGetWebhookRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksGetWebhookRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookRecord(requestParameters.webhookGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
         * @summary Get multiple webhooks
         * @param {WebhooksApiListMultipleWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultipleWebhooks(requestParameters: WebhooksApiListMultipleWebhooksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksListMultipleWebhooksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultipleWebhooks(requestParameters.workspace, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.resource, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
         * @summary Delete a webhook
         * @param {WebhooksApiRemoveWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeWebhook(requestParameters: WebhooksApiRemoveWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksRemoveWebhookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeWebhook(requestParameters.webhookGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing webhook\'s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook\'s previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
         * @summary Update a webhook
         * @param {WebhooksApiUpdateWebhookFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhookFilters(requestParameters: WebhooksApiUpdateWebhookFiltersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksUpdateWebhookFiltersResponse>> {
            const webhooksUpdateWebhookFiltersRequest: WebhooksUpdateWebhookFiltersRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhookFilters(requestParameters.webhookGid, webhooksUpdateWebhookFiltersRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
         * @summary Establish a webhook
         * @param {WebhooksApiEstablishWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        establishWebhook(requestParameters: WebhooksApiEstablishWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksEstablishWebhookResponse> {
            return localVarFp.establishWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the full record for the given webhook.
         * @summary Get a webhook
         * @param {WebhooksApiGetWebhookRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookRecord(requestParameters: WebhooksApiGetWebhookRecordRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksGetWebhookRecordResponse> {
            return localVarFp.getWebhookRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
         * @summary Get multiple webhooks
         * @param {WebhooksApiListMultipleWebhooksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultipleWebhooks(requestParameters: WebhooksApiListMultipleWebhooksRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksListMultipleWebhooksResponse> {
            return localVarFp.listMultipleWebhooks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
         * @summary Delete a webhook
         * @param {WebhooksApiRemoveWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebhook(requestParameters: WebhooksApiRemoveWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksRemoveWebhookResponse> {
            return localVarFp.removeWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing webhook\'s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook\'s previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
         * @summary Update a webhook
         * @param {WebhooksApiUpdateWebhookFiltersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookFilters(requestParameters: WebhooksApiUpdateWebhookFiltersRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksUpdateWebhookFiltersResponse> {
            return localVarFp.updateWebhookFilters(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for establishWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiEstablishWebhookRequest
 */
export type WebhooksApiEstablishWebhookRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WebhooksApiEstablishWebhook
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>}
    * @memberof WebhooksApiEstablishWebhook
    */
    readonly optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>
    
} & WebhooksEstablishWebhookRequest

/**
 * Request parameters for getWebhookRecord operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetWebhookRecordRequest
 */
export type WebhooksApiGetWebhookRecordRequest = {
    
    /**
    * Globally unique identifier for the webhook.
    * @type {string}
    * @memberof WebhooksApiGetWebhookRecord
    */
    readonly webhookGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WebhooksApiGetWebhookRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>}
    * @memberof WebhooksApiGetWebhookRecord
    */
    readonly optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>
    
}

/**
 * Request parameters for listMultipleWebhooks operation in WebhooksApi.
 * @export
 * @interface WebhooksApiListMultipleWebhooksRequest
 */
export type WebhooksApiListMultipleWebhooksRequest = {
    
    /**
    * The workspace to query for webhooks in.
    * @type {string}
    * @memberof WebhooksApiListMultipleWebhooks
    */
    readonly workspace: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WebhooksApiListMultipleWebhooks
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof WebhooksApiListMultipleWebhooks
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof WebhooksApiListMultipleWebhooks
    */
    readonly offset?: string
    
    /**
    * Only return webhooks for the given resource.
    * @type {string}
    * @memberof WebhooksApiListMultipleWebhooks
    */
    readonly resource?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'offset' | 'path' | 'resource' | 'resource.name' | 'target' | 'uri'>}
    * @memberof WebhooksApiListMultipleWebhooks
    */
    readonly optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'offset' | 'path' | 'resource' | 'resource.name' | 'target' | 'uri'>
    
}

/**
 * Request parameters for removeWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiRemoveWebhookRequest
 */
export type WebhooksApiRemoveWebhookRequest = {
    
    /**
    * Globally unique identifier for the webhook.
    * @type {string}
    * @memberof WebhooksApiRemoveWebhook
    */
    readonly webhookGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WebhooksApiRemoveWebhook
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for updateWebhookFilters operation in WebhooksApi.
 * @export
 * @interface WebhooksApiUpdateWebhookFiltersRequest
 */
export type WebhooksApiUpdateWebhookFiltersRequest = {
    
    /**
    * Globally unique identifier for the webhook.
    * @type {string}
    * @memberof WebhooksApiUpdateWebhookFilters
    */
    readonly webhookGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WebhooksApiUpdateWebhookFilters
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>}
    * @memberof WebhooksApiUpdateWebhookFilters
    */
    readonly optFields?: Array<'active' | 'created_at' | 'filters' | 'filters.action' | 'filters.fields' | 'filters.resource_subtype' | 'last_failure_at' | 'last_failure_content' | 'last_success_at' | 'resource' | 'resource.name' | 'target'>
    
} & WebhooksUpdateWebhookFiltersRequest

/**
 * WebhooksApiGenerated - object-oriented interface
 * @export
 * @class WebhooksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhooksApiGenerated extends BaseAPI {
    /**
     * Establishing a webhook is a two-part process. First, a simple HTTP POST request initiates the creation similar to creating any other resource.  Next, in the middle of this request comes the confirmation handshake. When a webhook is created, we will send a test POST to the target with an `X-Hook-Secret` header. The target must respond with a `200 OK` or `204 No Content` and a matching `X-Hook-Secret` header to confirm that this webhook subscription is indeed expected. We strongly recommend storing this secret to be used to verify future webhook event signatures.  The POST request to create the webhook will then return with the status of the request. If you do not acknowledge the webhook’s confirmation handshake it will fail to setup, and you will receive an error in response to your attempt to create it. This means you need to be able to receive and complete the webhook *while* the POST request is in-flight (in other words, have a server that can handle requests asynchronously).  Invalid hostnames like localhost will recieve a 403 Forbidden status code.  ``` # Request curl -H \"Authorization: Bearer <personal_access_token>\" \\ -X POST https://app.asana.com/api/1.0/webhooks \\ -d \"resource=8675309\" \\ -d \"target=https://example.com/receive-webhook/7654\" ```  ``` # Handshake sent to https://example.com/ POST /receive-webhook/7654 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Handshake response sent by example.com HTTP/1.1 200 X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81 ```  ``` # Response HTTP/1.1 201 {   \"data\": {     \"gid\": \"43214\",     \"resource\": {       \"gid\": \"8675309\",       \"name\": \"Bugs\"     },     \"target\": \"https://example.com/receive-webhook/7654\",     \"active\": false,     \"last_success_at\": null,     \"last_failure_at\": null,     \"last_failure_content\": null   } } ```
     * @summary Establish a webhook
     * @param {WebhooksApiEstablishWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public establishWebhook(requestParameters: WebhooksApiEstablishWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).establishWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the full record for the given webhook.
     * @summary Get a webhook
     * @param {WebhooksApiGetWebhookRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getWebhookRecord(requestParameters: WebhooksApiGetWebhookRecordRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhookRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the compact representation of all webhooks your app has registered for the authenticated user in the given workspace.
     * @summary Get multiple webhooks
     * @param {WebhooksApiListMultipleWebhooksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public listMultipleWebhooks(requestParameters: WebhooksApiListMultipleWebhooksRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listMultipleWebhooks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method *permanently* removes a webhook. Note that it may be possible to receive a request that was already in flight after deleting the webhook, but no further requests will be issued.
     * @summary Delete a webhook
     * @param {WebhooksApiRemoveWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public removeWebhook(requestParameters: WebhooksApiRemoveWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).removeWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing webhook\'s filters can be updated by making a PUT request on the URL for that webhook. Note that the webhook\'s previous `filters` array will be completely overwritten by the `filters` sent in the PUT request.
     * @summary Update a webhook
     * @param {WebhooksApiUpdateWebhookFiltersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public updateWebhookFilters(requestParameters: WebhooksApiUpdateWebhookFiltersRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).updateWebhookFilters(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
