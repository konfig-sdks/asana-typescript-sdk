/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ModifyDependenciesRequest } from '../models';
// @ts-ignore
import { ModifyDependentsRequest } from '../models';
// @ts-ignore
import { TaskAddFollowersRequest } from '../models';
// @ts-ignore
import { TaskAddProjectRequest } from '../models';
// @ts-ignore
import { TaskAddTagRequest } from '../models';
// @ts-ignore
import { TaskDuplicateRequest } from '../models';
// @ts-ignore
import { TaskRemoveFollowersRequest } from '../models';
// @ts-ignore
import { TaskRemoveProjectRequest } from '../models';
// @ts-ignore
import { TaskRemoveTagRequest } from '../models';
// @ts-ignore
import { TaskRequest } from '../models';
// @ts-ignore
import { TaskSetParentRequest } from '../models';
// @ts-ignore
import { TasksAddFollowersToTaskRequest } from '../models';
// @ts-ignore
import { TasksAddFollowersToTaskResponse } from '../models';
// @ts-ignore
import { TasksAddProjectToTaskRequest } from '../models';
// @ts-ignore
import { TasksAddProjectToTaskResponse } from '../models';
// @ts-ignore
import { TasksAddTagToTaskRequest } from '../models';
// @ts-ignore
import { TasksAddTagToTaskResponse } from '../models';
// @ts-ignore
import { TasksCreateNewTaskRequest } from '../models';
// @ts-ignore
import { TasksCreateNewTaskResponse } from '../models';
// @ts-ignore
import { TasksCreateSubtaskRecordRequest } from '../models';
// @ts-ignore
import { TasksCreateSubtaskRecordResponse } from '../models';
// @ts-ignore
import { TasksDeleteTaskResponse } from '../models';
// @ts-ignore
import { TasksDuplicateTaskJobRequest } from '../models';
// @ts-ignore
import { TasksDuplicateTaskJobResponse } from '../models';
// @ts-ignore
import { TasksGetAllDependenciesResponse } from '../models';
// @ts-ignore
import { TasksGetByCustomIdResponse } from '../models';
// @ts-ignore
import { TasksGetDependentsResponse } from '../models';
// @ts-ignore
import { TasksGetMultipleResponse } from '../models';
// @ts-ignore
import { TasksGetMultipleWithTagResponse } from '../models';
// @ts-ignore
import { TasksGetSectionTasksResponse } from '../models';
// @ts-ignore
import { TasksGetSubtaskListResponse } from '../models';
// @ts-ignore
import { TasksGetTaskRecordResponse } from '../models';
// @ts-ignore
import { TasksGetTasksByProjectResponse } from '../models';
// @ts-ignore
import { TasksGetUserTaskListTasksResponse } from '../models';
// @ts-ignore
import { TasksRemoveFollowersFromTaskRequest } from '../models';
// @ts-ignore
import { TasksRemoveFollowersFromTaskResponse } from '../models';
// @ts-ignore
import { TasksRemoveProjectFromTaskRequest } from '../models';
// @ts-ignore
import { TasksRemoveProjectFromTaskResponse } from '../models';
// @ts-ignore
import { TasksRemoveTagFromTaskRequest } from '../models';
// @ts-ignore
import { TasksRemoveTagFromTaskResponse } from '../models';
// @ts-ignore
import { TasksSearchInWorkspaceResponse } from '../models';
// @ts-ignore
import { TasksSetDependenciesForTaskRequest } from '../models';
// @ts-ignore
import { TasksSetDependenciesForTaskResponse } from '../models';
// @ts-ignore
import { TasksSetParentTaskRequest } from '../models';
// @ts-ignore
import { TasksSetParentTaskResponse } from '../models';
// @ts-ignore
import { TasksSetTaskDependentsRequest } from '../models';
// @ts-ignore
import { TasksSetTaskDependentsResponse } from '../models';
// @ts-ignore
import { TasksUnlinkDependenciesFromTaskRequest } from '../models';
// @ts-ignore
import { TasksUnlinkDependenciesFromTaskResponse } from '../models';
// @ts-ignore
import { TasksUnlinkDependentsRequest } from '../models';
// @ts-ignore
import { TasksUnlinkDependentsResponse } from '../models';
// @ts-ignore
import { TasksUpdateTaskRecordRequest } from '../models';
// @ts-ignore
import { TasksUpdateTaskRecordResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
         * @summary Add followers to a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksAddFollowersToTaskRequest} tasksAddFollowersToTaskRequest The followers to add to the task.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFollowersToTask: async (taskGid: string, tasksAddFollowersToTaskRequest: TasksAddFollowersToTaskRequest, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('addFollowersToTask', 'taskGid', taskGid)
            // verify required parameter 'tasksAddFollowersToTaskRequest' is not null or undefined
            assertParamExists('addFollowersToTask', 'tasksAddFollowersToTaskRequest', tasksAddFollowersToTaskRequest)
            const localVarPath = `/tasks/{task_gid}/addFollowers`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksAddFollowersToTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/addFollowers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksAddFollowersToTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  Returns an empty data block.
         * @summary Add a project to a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksAddProjectToTaskRequest} tasksAddProjectToTaskRequest The project to add the task to.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectToTask: async (taskGid: string, tasksAddProjectToTaskRequest: TasksAddProjectToTaskRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('addProjectToTask', 'taskGid', taskGid)
            // verify required parameter 'tasksAddProjectToTaskRequest' is not null or undefined
            assertParamExists('addProjectToTask', 'tasksAddProjectToTaskRequest', tasksAddProjectToTaskRequest)
            const localVarPath = `/tasks/{task_gid}/addProject`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksAddProjectToTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/addProject',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksAddProjectToTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a tag to a task. Returns an empty data block.
         * @summary Add a tag to a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksAddTagToTaskRequest} tasksAddTagToTaskRequest The tag to add to the task.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTagToTask: async (taskGid: string, tasksAddTagToTaskRequest: TasksAddTagToTaskRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('addTagToTask', 'taskGid', taskGid)
            // verify required parameter 'tasksAddTagToTaskRequest' is not null or undefined
            assertParamExists('addTagToTask', 'tasksAddTagToTaskRequest', tasksAddTagToTaskRequest)
            const localVarPath = `/tasks/{task_gid}/addTag`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksAddTagToTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/addTag',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksAddTagToTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
         * @summary Create a task
         * @param {TasksCreateNewTaskRequest} tasksCreateNewTaskRequest The task to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTask: async (tasksCreateNewTaskRequest: TasksCreateNewTaskRequest, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tasksCreateNewTaskRequest' is not null or undefined
            assertParamExists('createNewTask', 'tasksCreateNewTaskRequest', tasksCreateNewTaskRequest)
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksCreateNewTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksCreateNewTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
         * @summary Create a subtask
         * @param {string} taskGid The task to operate on.
         * @param {TasksCreateSubtaskRecordRequest} tasksCreateSubtaskRecordRequest The new subtask to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubtaskRecord: async (taskGid: string, tasksCreateSubtaskRecordRequest: TasksCreateSubtaskRecordRequest, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('createSubtaskRecord', 'taskGid', taskGid)
            // verify required parameter 'tasksCreateSubtaskRecordRequest' is not null or undefined
            assertParamExists('createSubtaskRecord', 'tasksCreateSubtaskRecordRequest', tasksCreateSubtaskRecordRequest)
            const localVarPath = `/tasks/{task_gid}/subtasks`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksCreateSubtaskRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/subtasks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksCreateSubtaskRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
         * @summary Delete a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (taskGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('deleteTask', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates and returns a job that will asynchronously handle the duplication.
         * @summary Duplicate a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksDuplicateTaskJobRequest} tasksDuplicateTaskJobRequest Describes the duplicate\&#39;s name and the fields that will be duplicated.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateTaskJob: async (taskGid: string, tasksDuplicateTaskJobRequest: TasksDuplicateTaskJobRequest, optPretty?: boolean, optFields?: Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('duplicateTaskJob', 'taskGid', taskGid)
            // verify required parameter 'tasksDuplicateTaskJobRequest' is not null or undefined
            assertParamExists('duplicateTaskJob', 'tasksDuplicateTaskJobRequest', tasksDuplicateTaskJobRequest)
            const localVarPath = `/tasks/{task_gid}/duplicate`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksDuplicateTaskJobRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/duplicate',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksDuplicateTaskJobRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact representations of all of the dependencies of a task.
         * @summary Get dependencies from a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDependencies: async (taskGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('getAllDependencies', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}/dependencies`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/dependencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a task given a custom ID shortcode.
         * @summary Get a task for a given custom ID
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {string} customId Generated custom ID for a task.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCustomId: async (workspaceGid: string, customId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('getByCustomId', 'workspaceGid', workspaceGid)
            // verify required parameter 'customId' is not null or undefined
            assertParamExists('getByCustomId', 'customId', customId)
            const localVarPath = `/workspaces/{workspace_gid}/tasks/custom_id/{custom_id}`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)))
                .replace(`{${"custom_id"}}`, encodeURIComponent(String(customId !== undefined ? customId : `-custom_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/tasks/custom_id/{custom_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact representations of all of the dependents of a task.
         * @summary Get dependents from a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependents: async (taskGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('getDependents', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}/dependents`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/dependents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](https://raw.githubusercontent.com).
         * @summary Get multiple tasks
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [assignee] The assignee to filter tasks on. If searching for unassigned tasks, assignee.any &#x3D; null can be specified. *Note: If you specify &#x60;assignee&#x60;, you must also specify the &#x60;workspace&#x60; to filter on.*
         * @param {string} [project] The project to filter tasks on.
         * @param {string} [section] The section to filter tasks on.
         * @param {string} [workspace] The workspace to filter tasks on. *Note: If you specify &#x60;workspace&#x60;, you must also specify the &#x60;assignee&#x60; to filter on.*
         * @param {string} [completedSince] Only return tasks that are either incomplete or that have been completed since this time.
         * @param {string} [modifiedSince] Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultiple: async (optPretty?: boolean, limit?: number, offset?: string, assignee?: string, project?: string, section?: string, workspace?: string, completedSince?: string, modifiedSince?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (assignee !== undefined) {
                localVarQueryParameter['assignee'] = assignee;
            }

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (section !== undefined) {
                localVarQueryParameter['section'] = section;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (completedSince !== undefined) {
                localVarQueryParameter['completed_since'] = (completedSince as any instanceof Date) ?
                    (completedSince as any).toISOString() :
                    completedSince;
            }

            if (modifiedSince !== undefined) {
                localVarQueryParameter['modified_since'] = (modifiedSince as any instanceof Date) ?
                    (modifiedSince as any).toISOString() :
                    modifiedSince;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
         * @summary Get tasks from a tag
         * @param {string} tagGid Globally unique identifier for the tag.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleWithTag: async (tagGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagGid' is not null or undefined
            assertParamExists('getMultipleWithTag', 'tagGid', tagGid)
            const localVarPath = `/tags/{tag_gid}/tasks`
                .replace(`{${"tag_gid"}}`, encodeURIComponent(String(tagGid !== undefined ? tagGid : `-tag_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags/{tag_gid}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * *Board view only*: Returns the compact section records for all tasks within the given section.
         * @summary Get tasks from a section
         * @param {string} sectionGid The globally unique identifier for the section.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [completedSince] Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionTasks: async (sectionGid: string, optPretty?: boolean, limit?: number, offset?: string, completedSince?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionGid' is not null or undefined
            assertParamExists('getSectionTasks', 'sectionGid', sectionGid)
            const localVarPath = `/sections/{section_gid}/tasks`
                .replace(`{${"section_gid"}}`, encodeURIComponent(String(sectionGid !== undefined ? sectionGid : `-section_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (completedSince !== undefined) {
                localVarQueryParameter['completed_since'] = completedSince;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sections/{section_gid}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a compact representation of all of the subtasks of a task.
         * @summary Get subtasks from a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtaskList: async (taskGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('getSubtaskList', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}/subtasks`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/subtasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete task record for a single task.
         * @summary Get a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskRecord: async (taskGid: string, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('getTaskRecord', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
         * @summary Get tasks from a project
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {string} [completedSince] Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksByProject: async (projectGid: string, completedSince?: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGid' is not null or undefined
            assertParamExists('getTasksByProject', 'projectGid', projectGid)
            const localVarPath = `/projects/{project_gid}/tasks`
                .replace(`{${"project_gid"}}`, encodeURIComponent(String(projectGid !== undefined ? projectGid : `-project_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (completedSince !== undefined) {
                localVarQueryParameter['completed_since'] = completedSince;
            }

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_gid}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
         * @summary Get tasks from a user task list
         * @param {string} userTaskListGid Globally unique identifier for the user task list.
         * @param {string} [completedSince] Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTaskListTasks: async (userTaskListGid: string, completedSince?: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userTaskListGid' is not null or undefined
            assertParamExists('getUserTaskListTasks', 'userTaskListGid', userTaskListGid)
            const localVarPath = `/user_task_lists/{user_task_list_gid}/tasks`
                .replace(`{${"user_task_list_gid"}}`, encodeURIComponent(String(userTaskListGid !== undefined ? userTaskListGid : `-user_task_list_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (completedSince !== undefined) {
                localVarQueryParameter['completed_since'] = completedSince;
            }

            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/user_task_lists/{user_task_list_gid}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
         * @summary Remove followers from a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksRemoveFollowersFromTaskRequest} tasksRemoveFollowersFromTaskRequest The followers to remove from the task.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFollowersFromTask: async (taskGid: string, tasksRemoveFollowersFromTaskRequest: TasksRemoveFollowersFromTaskRequest, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('removeFollowersFromTask', 'taskGid', taskGid)
            // verify required parameter 'tasksRemoveFollowersFromTaskRequest' is not null or undefined
            assertParamExists('removeFollowersFromTask', 'tasksRemoveFollowersFromTaskRequest', tasksRemoveFollowersFromTaskRequest)
            const localVarPath = `/tasks/{task_gid}/removeFollowers`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksRemoveFollowersFromTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/removeFollowers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksRemoveFollowersFromTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
         * @summary Remove a project from a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksRemoveProjectFromTaskRequest} tasksRemoveProjectFromTaskRequest The project to remove the task from.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectFromTask: async (taskGid: string, tasksRemoveProjectFromTaskRequest: TasksRemoveProjectFromTaskRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('removeProjectFromTask', 'taskGid', taskGid)
            // verify required parameter 'tasksRemoveProjectFromTaskRequest' is not null or undefined
            assertParamExists('removeProjectFromTask', 'tasksRemoveProjectFromTaskRequest', tasksRemoveProjectFromTaskRequest)
            const localVarPath = `/tasks/{task_gid}/removeProject`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksRemoveProjectFromTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/removeProject',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksRemoveProjectFromTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a tag from a task. Returns an empty data block.
         * @summary Remove a tag from a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksRemoveTagFromTaskRequest} tasksRemoveTagFromTaskRequest The tag to remove from the task.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTagFromTask: async (taskGid: string, tasksRemoveTagFromTaskRequest: TasksRemoveTagFromTaskRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('removeTagFromTask', 'taskGid', taskGid)
            // verify required parameter 'tasksRemoveTagFromTaskRequest' is not null or undefined
            assertParamExists('removeTagFromTask', 'tasksRemoveTagFromTaskRequest', tasksRemoveTagFromTaskRequest)
            const localVarPath = `/tasks/{task_gid}/removeTag`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksRemoveTagFromTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/removeTag',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksRemoveTagFromTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To mirror the functionality of the Asana web app\'s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product\'s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you\'re looking for only tasks in a section, omit the `projects.any` from the request.*
         * @summary Search tasks in a workspace
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {string} [text] Performs full-text search on both task name and description
         * @param {'default_task' | 'milestone'} [resourceSubtype] Filters results by the task\&#39;s resource_subtype
         * @param {string} [assigneeAny] Comma-separated list of user identifiers
         * @param {string} [assigneeNot] Comma-separated list of user identifiers
         * @param {string} [portfoliosAny] Comma-separated list of portfolio IDs
         * @param {string} [projectsAny] Comma-separated list of project IDs
         * @param {string} [projectsNot] Comma-separated list of project IDs
         * @param {string} [projectsAll] Comma-separated list of project IDs
         * @param {string} [sectionsAny] Comma-separated list of section or column IDs
         * @param {string} [sectionsNot] Comma-separated list of section or column IDs
         * @param {string} [sectionsAll] Comma-separated list of section or column IDs
         * @param {string} [tagsAny] Comma-separated list of tag IDs
         * @param {string} [tagsNot] Comma-separated list of tag IDs
         * @param {string} [tagsAll] Comma-separated list of tag IDs
         * @param {string} [teamsAny] Comma-separated list of team IDs
         * @param {string} [followersNot] Comma-separated list of user identifiers
         * @param {string} [createdByAny] Comma-separated list of user identifiers
         * @param {string} [createdByNot] Comma-separated list of user identifiers
         * @param {string} [assignedByAny] Comma-separated list of user identifiers
         * @param {string} [assignedByNot] Comma-separated list of user identifiers
         * @param {string} [likedByNot] Comma-separated list of user identifiers
         * @param {string} [commentedOnByNot] Comma-separated list of user identifiers
         * @param {string | Date} [dueOnBefore] ISO 8601 date string
         * @param {string | Date} [dueOnAfter] ISO 8601 date string
         * @param {string | Date} [dueOn] ISO 8601 date string or &#x60;null&#x60;
         * @param {string} [dueAtBefore] ISO 8601 datetime string
         * @param {string} [dueAtAfter] ISO 8601 datetime string
         * @param {string | Date} [startOnBefore] ISO 8601 date string
         * @param {string | Date} [startOnAfter] ISO 8601 date string
         * @param {string | Date} [startOn] ISO 8601 date string or &#x60;null&#x60;
         * @param {string | Date} [createdOnBefore] ISO 8601 date string
         * @param {string | Date} [createdOnAfter] ISO 8601 date string
         * @param {string | Date} [createdOn] ISO 8601 date string or &#x60;null&#x60;
         * @param {string} [createdAtBefore] ISO 8601 datetime string
         * @param {string} [createdAtAfter] ISO 8601 datetime string
         * @param {string | Date} [completedOnBefore] ISO 8601 date string
         * @param {string | Date} [completedOnAfter] ISO 8601 date string
         * @param {string | Date} [completedOn] ISO 8601 date string or &#x60;null&#x60;
         * @param {string} [completedAtBefore] ISO 8601 datetime string
         * @param {string} [completedAtAfter] ISO 8601 datetime string
         * @param {string | Date} [modifiedOnBefore] ISO 8601 date string
         * @param {string | Date} [modifiedOnAfter] ISO 8601 date string
         * @param {string | Date} [modifiedOn] ISO 8601 date string or &#x60;null&#x60;
         * @param {string} [modifiedAtBefore] ISO 8601 datetime string
         * @param {string} [modifiedAtAfter] ISO 8601 datetime string
         * @param {boolean} [isBlocking] Filter to incomplete tasks with dependents
         * @param {boolean} [isBlocked] Filter to tasks with incomplete dependencies
         * @param {boolean} [hasAttachment] Filter to tasks with attachments
         * @param {boolean} [completed] Filter to completed tasks
         * @param {boolean} [isSubtask] Filter to subtasks
         * @param {'due_date' | 'created_at' | 'completed_at' | 'likes' | 'modified_at'} [sortBy] One of &#x60;due_date&#x60;, &#x60;created_at&#x60;, &#x60;completed_at&#x60;, &#x60;likes&#x60;, or &#x60;modified_at&#x60;, defaults to &#x60;modified_at&#x60;
         * @param {boolean} [sortAscending] Default &#x60;false&#x60;
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWorkspace: async (workspaceGid: string, optPretty?: boolean, text?: string, resourceSubtype?: 'default_task' | 'milestone', assigneeAny?: string, assigneeNot?: string, portfoliosAny?: string, projectsAny?: string, projectsNot?: string, projectsAll?: string, sectionsAny?: string, sectionsNot?: string, sectionsAll?: string, tagsAny?: string, tagsNot?: string, tagsAll?: string, teamsAny?: string, followersNot?: string, createdByAny?: string, createdByNot?: string, assignedByAny?: string, assignedByNot?: string, likedByNot?: string, commentedOnByNot?: string, dueOnBefore?: string | Date, dueOnAfter?: string | Date, dueOn?: string | Date, dueAtBefore?: string, dueAtAfter?: string, startOnBefore?: string | Date, startOnAfter?: string | Date, startOn?: string | Date, createdOnBefore?: string | Date, createdOnAfter?: string | Date, createdOn?: string | Date, createdAtBefore?: string, createdAtAfter?: string, completedOnBefore?: string | Date, completedOnAfter?: string | Date, completedOn?: string | Date, completedAtBefore?: string, completedAtAfter?: string, modifiedOnBefore?: string | Date, modifiedOnAfter?: string | Date, modifiedOn?: string | Date, modifiedAtBefore?: string, modifiedAtAfter?: string, isBlocking?: boolean, isBlocked?: boolean, hasAttachment?: boolean, completed?: boolean, isSubtask?: boolean, sortBy?: 'due_date' | 'created_at' | 'completed_at' | 'likes' | 'modified_at', sortAscending?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('searchInWorkspace', 'workspaceGid', workspaceGid)
            const localVarPath = `/workspaces/{workspace_gid}/tasks/search`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (resourceSubtype !== undefined) {
                localVarQueryParameter['resource_subtype'] = resourceSubtype;
            }

            if (assigneeAny !== undefined) {
                localVarQueryParameter['assignee.any'] = assigneeAny;
            }

            if (assigneeNot !== undefined) {
                localVarQueryParameter['assignee.not'] = assigneeNot;
            }

            if (portfoliosAny !== undefined) {
                localVarQueryParameter['portfolios.any'] = portfoliosAny;
            }

            if (projectsAny !== undefined) {
                localVarQueryParameter['projects.any'] = projectsAny;
            }

            if (projectsNot !== undefined) {
                localVarQueryParameter['projects.not'] = projectsNot;
            }

            if (projectsAll !== undefined) {
                localVarQueryParameter['projects.all'] = projectsAll;
            }

            if (sectionsAny !== undefined) {
                localVarQueryParameter['sections.any'] = sectionsAny;
            }

            if (sectionsNot !== undefined) {
                localVarQueryParameter['sections.not'] = sectionsNot;
            }

            if (sectionsAll !== undefined) {
                localVarQueryParameter['sections.all'] = sectionsAll;
            }

            if (tagsAny !== undefined) {
                localVarQueryParameter['tags.any'] = tagsAny;
            }

            if (tagsNot !== undefined) {
                localVarQueryParameter['tags.not'] = tagsNot;
            }

            if (tagsAll !== undefined) {
                localVarQueryParameter['tags.all'] = tagsAll;
            }

            if (teamsAny !== undefined) {
                localVarQueryParameter['teams.any'] = teamsAny;
            }

            if (followersNot !== undefined) {
                localVarQueryParameter['followers.not'] = followersNot;
            }

            if (createdByAny !== undefined) {
                localVarQueryParameter['created_by.any'] = createdByAny;
            }

            if (createdByNot !== undefined) {
                localVarQueryParameter['created_by.not'] = createdByNot;
            }

            if (assignedByAny !== undefined) {
                localVarQueryParameter['assigned_by.any'] = assignedByAny;
            }

            if (assignedByNot !== undefined) {
                localVarQueryParameter['assigned_by.not'] = assignedByNot;
            }

            if (likedByNot !== undefined) {
                localVarQueryParameter['liked_by.not'] = likedByNot;
            }

            if (commentedOnByNot !== undefined) {
                localVarQueryParameter['commented_on_by.not'] = commentedOnByNot;
            }

            if (dueOnBefore !== undefined) {
                localVarQueryParameter['due_on.before'] = (dueOnBefore as any instanceof Date) ?
                    (dueOnBefore as any).toISOString().substr(0,10) :
                    dueOnBefore;
            }

            if (dueOnAfter !== undefined) {
                localVarQueryParameter['due_on.after'] = (dueOnAfter as any instanceof Date) ?
                    (dueOnAfter as any).toISOString().substr(0,10) :
                    dueOnAfter;
            }

            if (dueOn !== undefined) {
                localVarQueryParameter['due_on'] = (dueOn as any instanceof Date) ?
                    (dueOn as any).toISOString().substr(0,10) :
                    dueOn;
            }

            if (dueAtBefore !== undefined) {
                localVarQueryParameter['due_at.before'] = (dueAtBefore as any instanceof Date) ?
                    (dueAtBefore as any).toISOString() :
                    dueAtBefore;
            }

            if (dueAtAfter !== undefined) {
                localVarQueryParameter['due_at.after'] = (dueAtAfter as any instanceof Date) ?
                    (dueAtAfter as any).toISOString() :
                    dueAtAfter;
            }

            if (startOnBefore !== undefined) {
                localVarQueryParameter['start_on.before'] = (startOnBefore as any instanceof Date) ?
                    (startOnBefore as any).toISOString().substr(0,10) :
                    startOnBefore;
            }

            if (startOnAfter !== undefined) {
                localVarQueryParameter['start_on.after'] = (startOnAfter as any instanceof Date) ?
                    (startOnAfter as any).toISOString().substr(0,10) :
                    startOnAfter;
            }

            if (startOn !== undefined) {
                localVarQueryParameter['start_on'] = (startOn as any instanceof Date) ?
                    (startOn as any).toISOString().substr(0,10) :
                    startOn;
            }

            if (createdOnBefore !== undefined) {
                localVarQueryParameter['created_on.before'] = (createdOnBefore as any instanceof Date) ?
                    (createdOnBefore as any).toISOString().substr(0,10) :
                    createdOnBefore;
            }

            if (createdOnAfter !== undefined) {
                localVarQueryParameter['created_on.after'] = (createdOnAfter as any instanceof Date) ?
                    (createdOnAfter as any).toISOString().substr(0,10) :
                    createdOnAfter;
            }

            if (createdOn !== undefined) {
                localVarQueryParameter['created_on'] = (createdOn as any instanceof Date) ?
                    (createdOn as any).toISOString().substr(0,10) :
                    createdOn;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at.before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at.after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (completedOnBefore !== undefined) {
                localVarQueryParameter['completed_on.before'] = (completedOnBefore as any instanceof Date) ?
                    (completedOnBefore as any).toISOString().substr(0,10) :
                    completedOnBefore;
            }

            if (completedOnAfter !== undefined) {
                localVarQueryParameter['completed_on.after'] = (completedOnAfter as any instanceof Date) ?
                    (completedOnAfter as any).toISOString().substr(0,10) :
                    completedOnAfter;
            }

            if (completedOn !== undefined) {
                localVarQueryParameter['completed_on'] = (completedOn as any instanceof Date) ?
                    (completedOn as any).toISOString().substr(0,10) :
                    completedOn;
            }

            if (completedAtBefore !== undefined) {
                localVarQueryParameter['completed_at.before'] = (completedAtBefore as any instanceof Date) ?
                    (completedAtBefore as any).toISOString() :
                    completedAtBefore;
            }

            if (completedAtAfter !== undefined) {
                localVarQueryParameter['completed_at.after'] = (completedAtAfter as any instanceof Date) ?
                    (completedAtAfter as any).toISOString() :
                    completedAtAfter;
            }

            if (modifiedOnBefore !== undefined) {
                localVarQueryParameter['modified_on.before'] = (modifiedOnBefore as any instanceof Date) ?
                    (modifiedOnBefore as any).toISOString().substr(0,10) :
                    modifiedOnBefore;
            }

            if (modifiedOnAfter !== undefined) {
                localVarQueryParameter['modified_on.after'] = (modifiedOnAfter as any instanceof Date) ?
                    (modifiedOnAfter as any).toISOString().substr(0,10) :
                    modifiedOnAfter;
            }

            if (modifiedOn !== undefined) {
                localVarQueryParameter['modified_on'] = (modifiedOn as any instanceof Date) ?
                    (modifiedOn as any).toISOString().substr(0,10) :
                    modifiedOn;
            }

            if (modifiedAtBefore !== undefined) {
                localVarQueryParameter['modified_at.before'] = (modifiedAtBefore as any instanceof Date) ?
                    (modifiedAtBefore as any).toISOString() :
                    modifiedAtBefore;
            }

            if (modifiedAtAfter !== undefined) {
                localVarQueryParameter['modified_at.after'] = (modifiedAtAfter as any instanceof Date) ?
                    (modifiedAtAfter as any).toISOString() :
                    modifiedAtAfter;
            }

            if (isBlocking !== undefined) {
                localVarQueryParameter['is_blocking'] = isBlocking;
            }

            if (isBlocked !== undefined) {
                localVarQueryParameter['is_blocked'] = isBlocked;
            }

            if (hasAttachment !== undefined) {
                localVarQueryParameter['has_attachment'] = hasAttachment;
            }

            if (completed !== undefined) {
                localVarQueryParameter['completed'] = completed;
            }

            if (isSubtask !== undefined) {
                localVarQueryParameter['is_subtask'] = isSubtask;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortAscending !== undefined) {
                localVarQueryParameter['sort_ascending'] = sortAscending;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/tasks/search',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
         * @summary Set dependencies for a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksSetDependenciesForTaskRequest} tasksSetDependenciesForTaskRequest The list of tasks to set as dependencies.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDependenciesForTask: async (taskGid: string, tasksSetDependenciesForTaskRequest: TasksSetDependenciesForTaskRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('setDependenciesForTask', 'taskGid', taskGid)
            // verify required parameter 'tasksSetDependenciesForTaskRequest' is not null or undefined
            assertParamExists('setDependenciesForTask', 'tasksSetDependenciesForTaskRequest', tasksSetDependenciesForTaskRequest)
            const localVarPath = `/tasks/{task_gid}/addDependencies`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksSetDependenciesForTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/addDependencies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSetDependenciesForTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
         * @summary Set the parent of a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksSetParentTaskRequest} tasksSetParentTaskRequest The new parent of the subtask.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setParentTask: async (taskGid: string, tasksSetParentTaskRequest: TasksSetParentTaskRequest, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('setParentTask', 'taskGid', taskGid)
            // verify required parameter 'tasksSetParentTaskRequest' is not null or undefined
            assertParamExists('setParentTask', 'tasksSetParentTaskRequest', tasksSetParentTaskRequest)
            const localVarPath = `/tasks/{task_gid}/setParent`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksSetParentTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/setParent',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSetParentTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
         * @summary Set dependents for a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksSetTaskDependentsRequest} tasksSetTaskDependentsRequest The list of tasks to add as dependents.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTaskDependents: async (taskGid: string, tasksSetTaskDependentsRequest: TasksSetTaskDependentsRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('setTaskDependents', 'taskGid', taskGid)
            // verify required parameter 'tasksSetTaskDependentsRequest' is not null or undefined
            assertParamExists('setTaskDependents', 'tasksSetTaskDependentsRequest', tasksSetTaskDependentsRequest)
            const localVarPath = `/tasks/{task_gid}/addDependents`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksSetTaskDependentsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/addDependents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksSetTaskDependentsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlinks a set of dependencies from this task.
         * @summary Unlink dependencies from a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksUnlinkDependenciesFromTaskRequest} tasksUnlinkDependenciesFromTaskRequest The list of tasks to unlink as dependencies.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkDependenciesFromTask: async (taskGid: string, tasksUnlinkDependenciesFromTaskRequest: TasksUnlinkDependenciesFromTaskRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('unlinkDependenciesFromTask', 'taskGid', taskGid)
            // verify required parameter 'tasksUnlinkDependenciesFromTaskRequest' is not null or undefined
            assertParamExists('unlinkDependenciesFromTask', 'tasksUnlinkDependenciesFromTaskRequest', tasksUnlinkDependenciesFromTaskRequest)
            const localVarPath = `/tasks/{task_gid}/removeDependencies`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksUnlinkDependenciesFromTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/removeDependencies',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksUnlinkDependenciesFromTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unlinks a set of dependents from this task.
         * @summary Unlink dependents from a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksUnlinkDependentsRequest} tasksUnlinkDependentsRequest The list of tasks to remove as dependents.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkDependents: async (taskGid: string, tasksUnlinkDependentsRequest: TasksUnlinkDependentsRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('unlinkDependents', 'taskGid', taskGid)
            // verify required parameter 'tasksUnlinkDependentsRequest' is not null or undefined
            assertParamExists('unlinkDependents', 'tasksUnlinkDependentsRequest', tasksUnlinkDependentsRequest)
            const localVarPath = `/tasks/{task_gid}/removeDependents`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksUnlinkDependentsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/removeDependents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksUnlinkDependentsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
         * @summary Update a task
         * @param {string} taskGid The task to operate on.
         * @param {TasksUpdateTaskRecordRequest} tasksUpdateTaskRecordRequest The task to update.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskRecord: async (taskGid: string, tasksUpdateTaskRecordRequest: TasksUpdateTaskRecordRequest, optPretty?: boolean, optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('updateTaskRecord', 'taskGid', taskGid)
            // verify required parameter 'tasksUpdateTaskRecordRequest' is not null or undefined
            assertParamExists('updateTaskRecord', 'tasksUpdateTaskRecordRequest', tasksUpdateTaskRecordRequest)
            const localVarPath = `/tasks/{task_gid}`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tasksUpdateTaskRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tasksUpdateTaskRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
         * @summary Add followers to a task
         * @param {TasksApiAddFollowersToTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFollowersToTask(requestParameters: TasksApiAddFollowersToTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksAddFollowersToTaskResponse>> {
            const tasksAddFollowersToTaskRequest: TasksAddFollowersToTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFollowersToTask(requestParameters.taskGid, tasksAddFollowersToTaskRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  Returns an empty data block.
         * @summary Add a project to a task
         * @param {TasksApiAddProjectToTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProjectToTask(requestParameters: TasksApiAddProjectToTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksAddProjectToTaskResponse>> {
            const tasksAddProjectToTaskRequest: TasksAddProjectToTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProjectToTask(requestParameters.taskGid, tasksAddProjectToTaskRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a tag to a task. Returns an empty data block.
         * @summary Add a tag to a task
         * @param {TasksApiAddTagToTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTagToTask(requestParameters: TasksApiAddTagToTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksAddTagToTaskResponse>> {
            const tasksAddTagToTaskRequest: TasksAddTagToTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTagToTask(requestParameters.taskGid, tasksAddTagToTaskRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
         * @summary Create a task
         * @param {TasksApiCreateNewTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTask(requestParameters: TasksApiCreateNewTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksCreateNewTaskResponse>> {
            const tasksCreateNewTaskRequest: TasksCreateNewTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTask(tasksCreateNewTaskRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
         * @summary Create a subtask
         * @param {TasksApiCreateSubtaskRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubtaskRecord(requestParameters: TasksApiCreateSubtaskRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksCreateSubtaskRecordResponse>> {
            const tasksCreateSubtaskRecordRequest: TasksCreateSubtaskRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubtaskRecord(requestParameters.taskGid, tasksCreateSubtaskRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
         * @summary Delete a task
         * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(requestParameters: TasksApiDeleteTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksDeleteTaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(requestParameters.taskGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates and returns a job that will asynchronously handle the duplication.
         * @summary Duplicate a task
         * @param {TasksApiDuplicateTaskJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async duplicateTaskJob(requestParameters: TasksApiDuplicateTaskJobRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksDuplicateTaskJobResponse>> {
            const tasksDuplicateTaskJobRequest: TasksDuplicateTaskJobRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.duplicateTaskJob(requestParameters.taskGid, tasksDuplicateTaskJobRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact representations of all of the dependencies of a task.
         * @summary Get dependencies from a task
         * @param {TasksApiGetAllDependenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDependencies(requestParameters: TasksApiGetAllDependenciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetAllDependenciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDependencies(requestParameters.taskGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a task given a custom ID shortcode.
         * @summary Get a task for a given custom ID
         * @param {TasksApiGetByCustomIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCustomId(requestParameters: TasksApiGetByCustomIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetByCustomIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCustomId(requestParameters.workspaceGid, requestParameters.customId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact representations of all of the dependents of a task.
         * @summary Get dependents from a task
         * @param {TasksApiGetDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDependents(requestParameters: TasksApiGetDependentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetDependentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDependents(requestParameters.taskGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](https://raw.githubusercontent.com).
         * @summary Get multiple tasks
         * @param {TasksApiGetMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultiple(requestParameters: TasksApiGetMultipleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetMultipleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultiple(requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.assignee, requestParameters.project, requestParameters.section, requestParameters.workspace, requestParameters.completedSince, requestParameters.modifiedSince, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
         * @summary Get tasks from a tag
         * @param {TasksApiGetMultipleWithTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleWithTag(requestParameters: TasksApiGetMultipleWithTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetMultipleWithTagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleWithTag(requestParameters.tagGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * *Board view only*: Returns the compact section records for all tasks within the given section.
         * @summary Get tasks from a section
         * @param {TasksApiGetSectionTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSectionTasks(requestParameters: TasksApiGetSectionTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetSectionTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSectionTasks(requestParameters.sectionGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.completedSince, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a compact representation of all of the subtasks of a task.
         * @summary Get subtasks from a task
         * @param {TasksApiGetSubtaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubtaskList(requestParameters: TasksApiGetSubtaskListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetSubtaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubtaskList(requestParameters.taskGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete task record for a single task.
         * @summary Get a task
         * @param {TasksApiGetTaskRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskRecord(requestParameters: TasksApiGetTaskRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetTaskRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskRecord(requestParameters.taskGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
         * @summary Get tasks from a project
         * @param {TasksApiGetTasksByProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasksByProject(requestParameters: TasksApiGetTasksByProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetTasksByProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasksByProject(requestParameters.projectGid, requestParameters.completedSince, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
         * @summary Get tasks from a user task list
         * @param {TasksApiGetUserTaskListTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTaskListTasks(requestParameters: TasksApiGetUserTaskListTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksGetUserTaskListTasksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTaskListTasks(requestParameters.userTaskListGid, requestParameters.completedSince, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
         * @summary Remove followers from a task
         * @param {TasksApiRemoveFollowersFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFollowersFromTask(requestParameters: TasksApiRemoveFollowersFromTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksRemoveFollowersFromTaskResponse>> {
            const tasksRemoveFollowersFromTaskRequest: TasksRemoveFollowersFromTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFollowersFromTask(requestParameters.taskGid, tasksRemoveFollowersFromTaskRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
         * @summary Remove a project from a task
         * @param {TasksApiRemoveProjectFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProjectFromTask(requestParameters: TasksApiRemoveProjectFromTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksRemoveProjectFromTaskResponse>> {
            const tasksRemoveProjectFromTaskRequest: TasksRemoveProjectFromTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProjectFromTask(requestParameters.taskGid, tasksRemoveProjectFromTaskRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a tag from a task. Returns an empty data block.
         * @summary Remove a tag from a task
         * @param {TasksApiRemoveTagFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTagFromTask(requestParameters: TasksApiRemoveTagFromTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksRemoveTagFromTaskResponse>> {
            const tasksRemoveTagFromTaskRequest: TasksRemoveTagFromTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTagFromTask(requestParameters.taskGid, tasksRemoveTagFromTaskRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To mirror the functionality of the Asana web app\'s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product\'s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you\'re looking for only tasks in a section, omit the `projects.any` from the request.*
         * @summary Search tasks in a workspace
         * @param {TasksApiSearchInWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchInWorkspace(requestParameters: TasksApiSearchInWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksSearchInWorkspaceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchInWorkspace(requestParameters.workspaceGid, requestParameters.optPretty, requestParameters.text, requestParameters.resourceSubtype, requestParameters.assigneeAny, requestParameters.assigneeNot, requestParameters.portfoliosAny, requestParameters.projectsAny, requestParameters.projectsNot, requestParameters.projectsAll, requestParameters.sectionsAny, requestParameters.sectionsNot, requestParameters.sectionsAll, requestParameters.tagsAny, requestParameters.tagsNot, requestParameters.tagsAll, requestParameters.teamsAny, requestParameters.followersNot, requestParameters.createdByAny, requestParameters.createdByNot, requestParameters.assignedByAny, requestParameters.assignedByNot, requestParameters.likedByNot, requestParameters.commentedOnByNot, requestParameters.dueOnBefore, requestParameters.dueOnAfter, requestParameters.dueOn, requestParameters.dueAtBefore, requestParameters.dueAtAfter, requestParameters.startOnBefore, requestParameters.startOnAfter, requestParameters.startOn, requestParameters.createdOnBefore, requestParameters.createdOnAfter, requestParameters.createdOn, requestParameters.createdAtBefore, requestParameters.createdAtAfter, requestParameters.completedOnBefore, requestParameters.completedOnAfter, requestParameters.completedOn, requestParameters.completedAtBefore, requestParameters.completedAtAfter, requestParameters.modifiedOnBefore, requestParameters.modifiedOnAfter, requestParameters.modifiedOn, requestParameters.modifiedAtBefore, requestParameters.modifiedAtAfter, requestParameters.isBlocking, requestParameters.isBlocked, requestParameters.hasAttachment, requestParameters.completed, requestParameters.isSubtask, requestParameters.sortBy, requestParameters.sortAscending, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
         * @summary Set dependencies for a task
         * @param {TasksApiSetDependenciesForTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDependenciesForTask(requestParameters: TasksApiSetDependenciesForTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksSetDependenciesForTaskResponse>> {
            const tasksSetDependenciesForTaskRequest: TasksSetDependenciesForTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDependenciesForTask(requestParameters.taskGid, tasksSetDependenciesForTaskRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
         * @summary Set the parent of a task
         * @param {TasksApiSetParentTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setParentTask(requestParameters: TasksApiSetParentTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksSetParentTaskResponse>> {
            const tasksSetParentTaskRequest: TasksSetParentTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setParentTask(requestParameters.taskGid, tasksSetParentTaskRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
         * @summary Set dependents for a task
         * @param {TasksApiSetTaskDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setTaskDependents(requestParameters: TasksApiSetTaskDependentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksSetTaskDependentsResponse>> {
            const tasksSetTaskDependentsRequest: TasksSetTaskDependentsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setTaskDependents(requestParameters.taskGid, tasksSetTaskDependentsRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unlinks a set of dependencies from this task.
         * @summary Unlink dependencies from a task
         * @param {TasksApiUnlinkDependenciesFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkDependenciesFromTask(requestParameters: TasksApiUnlinkDependenciesFromTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksUnlinkDependenciesFromTaskResponse>> {
            const tasksUnlinkDependenciesFromTaskRequest: TasksUnlinkDependenciesFromTaskRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkDependenciesFromTask(requestParameters.taskGid, tasksUnlinkDependenciesFromTaskRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unlinks a set of dependents from this task.
         * @summary Unlink dependents from a task
         * @param {TasksApiUnlinkDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unlinkDependents(requestParameters: TasksApiUnlinkDependentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksUnlinkDependentsResponse>> {
            const tasksUnlinkDependentsRequest: TasksUnlinkDependentsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkDependents(requestParameters.taskGid, tasksUnlinkDependentsRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
         * @summary Update a task
         * @param {TasksApiUpdateTaskRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTaskRecord(requestParameters: TasksApiUpdateTaskRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksUpdateTaskRecordResponse>> {
            const tasksUpdateTaskRecordRequest: TasksUpdateTaskRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTaskRecord(requestParameters.taskGid, tasksUpdateTaskRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
         * @summary Add followers to a task
         * @param {TasksApiAddFollowersToTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFollowersToTask(requestParameters: TasksApiAddFollowersToTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksAddFollowersToTaskResponse> {
            return localVarFp.addFollowersToTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  Returns an empty data block.
         * @summary Add a project to a task
         * @param {TasksApiAddProjectToTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProjectToTask(requestParameters: TasksApiAddProjectToTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksAddProjectToTaskResponse> {
            return localVarFp.addProjectToTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a tag to a task. Returns an empty data block.
         * @summary Add a tag to a task
         * @param {TasksApiAddTagToTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTagToTask(requestParameters: TasksApiAddTagToTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksAddTagToTaskResponse> {
            return localVarFp.addTagToTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
         * @summary Create a task
         * @param {TasksApiCreateNewTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTask(requestParameters: TasksApiCreateNewTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksCreateNewTaskResponse> {
            return localVarFp.createNewTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
         * @summary Create a subtask
         * @param {TasksApiCreateSubtaskRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubtaskRecord(requestParameters: TasksApiCreateSubtaskRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TasksCreateSubtaskRecordResponse> {
            return localVarFp.createSubtaskRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
         * @summary Delete a task
         * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(requestParameters: TasksApiDeleteTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksDeleteTaskResponse> {
            return localVarFp.deleteTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates and returns a job that will asynchronously handle the duplication.
         * @summary Duplicate a task
         * @param {TasksApiDuplicateTaskJobRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        duplicateTaskJob(requestParameters: TasksApiDuplicateTaskJobRequest, options?: AxiosRequestConfig): AxiosPromise<TasksDuplicateTaskJobResponse> {
            return localVarFp.duplicateTaskJob(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact representations of all of the dependencies of a task.
         * @summary Get dependencies from a task
         * @param {TasksApiGetAllDependenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDependencies(requestParameters: TasksApiGetAllDependenciesRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetAllDependenciesResponse> {
            return localVarFp.getAllDependencies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a task given a custom ID shortcode.
         * @summary Get a task for a given custom ID
         * @param {TasksApiGetByCustomIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCustomId(requestParameters: TasksApiGetByCustomIdRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetByCustomIdResponse> {
            return localVarFp.getByCustomId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact representations of all of the dependents of a task.
         * @summary Get dependents from a task
         * @param {TasksApiGetDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDependents(requestParameters: TasksApiGetDependentsRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetDependentsResponse> {
            return localVarFp.getDependents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](https://raw.githubusercontent.com).
         * @summary Get multiple tasks
         * @param {TasksApiGetMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultiple(requestParameters: TasksApiGetMultipleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TasksGetMultipleResponse> {
            return localVarFp.getMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
         * @summary Get tasks from a tag
         * @param {TasksApiGetMultipleWithTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleWithTag(requestParameters: TasksApiGetMultipleWithTagRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetMultipleWithTagResponse> {
            return localVarFp.getMultipleWithTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * *Board view only*: Returns the compact section records for all tasks within the given section.
         * @summary Get tasks from a section
         * @param {TasksApiGetSectionTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSectionTasks(requestParameters: TasksApiGetSectionTasksRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetSectionTasksResponse> {
            return localVarFp.getSectionTasks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a compact representation of all of the subtasks of a task.
         * @summary Get subtasks from a task
         * @param {TasksApiGetSubtaskListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubtaskList(requestParameters: TasksApiGetSubtaskListRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetSubtaskListResponse> {
            return localVarFp.getSubtaskList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete task record for a single task.
         * @summary Get a task
         * @param {TasksApiGetTaskRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskRecord(requestParameters: TasksApiGetTaskRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetTaskRecordResponse> {
            return localVarFp.getTaskRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
         * @summary Get tasks from a project
         * @param {TasksApiGetTasksByProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksByProject(requestParameters: TasksApiGetTasksByProjectRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetTasksByProjectResponse> {
            return localVarFp.getTasksByProject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
         * @summary Get tasks from a user task list
         * @param {TasksApiGetUserTaskListTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTaskListTasks(requestParameters: TasksApiGetUserTaskListTasksRequest, options?: AxiosRequestConfig): AxiosPromise<TasksGetUserTaskListTasksResponse> {
            return localVarFp.getUserTaskListTasks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
         * @summary Remove followers from a task
         * @param {TasksApiRemoveFollowersFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFollowersFromTask(requestParameters: TasksApiRemoveFollowersFromTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksRemoveFollowersFromTaskResponse> {
            return localVarFp.removeFollowersFromTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
         * @summary Remove a project from a task
         * @param {TasksApiRemoveProjectFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectFromTask(requestParameters: TasksApiRemoveProjectFromTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksRemoveProjectFromTaskResponse> {
            return localVarFp.removeProjectFromTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a tag from a task. Returns an empty data block.
         * @summary Remove a tag from a task
         * @param {TasksApiRemoveTagFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTagFromTask(requestParameters: TasksApiRemoveTagFromTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksRemoveTagFromTaskResponse> {
            return localVarFp.removeTagFromTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * To mirror the functionality of the Asana web app\'s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product\'s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you\'re looking for only tasks in a section, omit the `projects.any` from the request.*
         * @summary Search tasks in a workspace
         * @param {TasksApiSearchInWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWorkspace(requestParameters: TasksApiSearchInWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<TasksSearchInWorkspaceResponse> {
            return localVarFp.searchInWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
         * @summary Set dependencies for a task
         * @param {TasksApiSetDependenciesForTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDependenciesForTask(requestParameters: TasksApiSetDependenciesForTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksSetDependenciesForTaskResponse> {
            return localVarFp.setDependenciesForTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
         * @summary Set the parent of a task
         * @param {TasksApiSetParentTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setParentTask(requestParameters: TasksApiSetParentTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksSetParentTaskResponse> {
            return localVarFp.setParentTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
         * @summary Set dependents for a task
         * @param {TasksApiSetTaskDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setTaskDependents(requestParameters: TasksApiSetTaskDependentsRequest, options?: AxiosRequestConfig): AxiosPromise<TasksSetTaskDependentsResponse> {
            return localVarFp.setTaskDependents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlinks a set of dependencies from this task.
         * @summary Unlink dependencies from a task
         * @param {TasksApiUnlinkDependenciesFromTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkDependenciesFromTask(requestParameters: TasksApiUnlinkDependenciesFromTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TasksUnlinkDependenciesFromTaskResponse> {
            return localVarFp.unlinkDependenciesFromTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Unlinks a set of dependents from this task.
         * @summary Unlink dependents from a task
         * @param {TasksApiUnlinkDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unlinkDependents(requestParameters: TasksApiUnlinkDependentsRequest, options?: AxiosRequestConfig): AxiosPromise<TasksUnlinkDependentsResponse> {
            return localVarFp.unlinkDependents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
         * @summary Update a task
         * @param {TasksApiUpdateTaskRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTaskRecord(requestParameters: TasksApiUpdateTaskRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TasksUpdateTaskRecordResponse> {
            return localVarFp.updateTaskRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFollowersToTask operation in TasksApi.
 * @export
 * @interface TasksApiAddFollowersToTaskRequest
 */
export type TasksApiAddFollowersToTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiAddFollowersToTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiAddFollowersToTask
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiAddFollowersToTask
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
} & TasksAddFollowersToTaskRequest

/**
 * Request parameters for addProjectToTask operation in TasksApi.
 * @export
 * @interface TasksApiAddProjectToTaskRequest
 */
export type TasksApiAddProjectToTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiAddProjectToTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiAddProjectToTask
    */
    readonly optPretty?: boolean
    
} & TasksAddProjectToTaskRequest

/**
 * Request parameters for addTagToTask operation in TasksApi.
 * @export
 * @interface TasksApiAddTagToTaskRequest
 */
export type TasksApiAddTagToTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiAddTagToTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiAddTagToTask
    */
    readonly optPretty?: boolean
    
} & TasksAddTagToTaskRequest

/**
 * Request parameters for createNewTask operation in TasksApi.
 * @export
 * @interface TasksApiCreateNewTaskRequest
 */
export type TasksApiCreateNewTaskRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiCreateNewTask
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiCreateNewTask
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
} & TasksCreateNewTaskRequest

/**
 * Request parameters for createSubtaskRecord operation in TasksApi.
 * @export
 * @interface TasksApiCreateSubtaskRecordRequest
 */
export type TasksApiCreateSubtaskRecordRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiCreateSubtaskRecord
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiCreateSubtaskRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiCreateSubtaskRecord
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
} & TasksCreateSubtaskRecordRequest

/**
 * Request parameters for deleteTask operation in TasksApi.
 * @export
 * @interface TasksApiDeleteTaskRequest
 */
export type TasksApiDeleteTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiDeleteTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiDeleteTask
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for duplicateTaskJob operation in TasksApi.
 * @export
 * @interface TasksApiDuplicateTaskJobRequest
 */
export type TasksApiDuplicateTaskJobRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiDuplicateTaskJob
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiDuplicateTaskJob
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>}
    * @memberof TasksApiDuplicateTaskJob
    */
    readonly optFields?: Array<'new_project' | 'new_project.name' | 'new_project_template' | 'new_project_template.name' | 'new_task' | 'new_task.created_by' | 'new_task.name' | 'new_task.resource_subtype' | 'new_task_template' | 'new_task_template.name' | 'resource_subtype' | 'status'>
    
} & TasksDuplicateTaskJobRequest

/**
 * Request parameters for getAllDependencies operation in TasksApi.
 * @export
 * @interface TasksApiGetAllDependenciesRequest
 */
export type TasksApiGetAllDependenciesRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiGetAllDependencies
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetAllDependencies
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetAllDependencies
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetAllDependencies
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetAllDependencies
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getByCustomId operation in TasksApi.
 * @export
 * @interface TasksApiGetByCustomIdRequest
 */
export type TasksApiGetByCustomIdRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof TasksApiGetByCustomId
    */
    readonly workspaceGid: string
    
    /**
    * Generated custom ID for a task.
    * @type {string}
    * @memberof TasksApiGetByCustomId
    */
    readonly customId: string
    
}

/**
 * Request parameters for getDependents operation in TasksApi.
 * @export
 * @interface TasksApiGetDependentsRequest
 */
export type TasksApiGetDependentsRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiGetDependents
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetDependents
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetDependents
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetDependents
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetDependents
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getMultiple operation in TasksApi.
 * @export
 * @interface TasksApiGetMultipleRequest
 */
export type TasksApiGetMultipleRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetMultiple
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetMultiple
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly offset?: string
    
    /**
    * The assignee to filter tasks on. If searching for unassigned tasks, assignee.any = null can be specified. *Note: If you specify `assignee`, you must also specify the `workspace` to filter on.*
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly assignee?: string
    
    /**
    * The project to filter tasks on.
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly project?: string
    
    /**
    * The section to filter tasks on.
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly section?: string
    
    /**
    * The workspace to filter tasks on. *Note: If you specify `workspace`, you must also specify the `assignee` to filter on.*
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly workspace?: string
    
    /**
    * Only return tasks that are either incomplete or that have been completed since this time.
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly completedSince?: string
    
    /**
    * Only return tasks that have been modified since the given time.  *Note: A task is considered “modified” if any of its properties change, or associations between it and other objects are modified (e.g.  a task being added to a project). A task is not considered modified just because another object it is associated with (e.g. a subtask) is modified. Actions that count as modifying the task include assigning, renaming, completing, and adding stories.*
    * @type {string}
    * @memberof TasksApiGetMultiple
    */
    readonly modifiedSince?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetMultiple
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getMultipleWithTag operation in TasksApi.
 * @export
 * @interface TasksApiGetMultipleWithTagRequest
 */
export type TasksApiGetMultipleWithTagRequest = {
    
    /**
    * Globally unique identifier for the tag.
    * @type {string}
    * @memberof TasksApiGetMultipleWithTag
    */
    readonly tagGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetMultipleWithTag
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetMultipleWithTag
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetMultipleWithTag
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetMultipleWithTag
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getSectionTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetSectionTasksRequest
 */
export type TasksApiGetSectionTasksRequest = {
    
    /**
    * The globally unique identifier for the section.
    * @type {string}
    * @memberof TasksApiGetSectionTasks
    */
    readonly sectionGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetSectionTasks
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetSectionTasks
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetSectionTasks
    */
    readonly offset?: string
    
    /**
    * Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
    * @type {string}
    * @memberof TasksApiGetSectionTasks
    */
    readonly completedSince?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetSectionTasks
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getSubtaskList operation in TasksApi.
 * @export
 * @interface TasksApiGetSubtaskListRequest
 */
export type TasksApiGetSubtaskListRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiGetSubtaskList
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetSubtaskList
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetSubtaskList
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetSubtaskList
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetSubtaskList
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getTaskRecord operation in TasksApi.
 * @export
 * @interface TasksApiGetTaskRecordRequest
 */
export type TasksApiGetTaskRecordRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiGetTaskRecord
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetTaskRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetTaskRecord
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getTasksByProject operation in TasksApi.
 * @export
 * @interface TasksApiGetTasksByProjectRequest
 */
export type TasksApiGetTasksByProjectRequest = {
    
    /**
    * Globally unique identifier for the project.
    * @type {string}
    * @memberof TasksApiGetTasksByProject
    */
    readonly projectGid: string
    
    /**
    * Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
    * @type {string}
    * @memberof TasksApiGetTasksByProject
    */
    readonly completedSince?: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetTasksByProject
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetTasksByProject
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetTasksByProject
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetTasksByProject
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getUserTaskListTasks operation in TasksApi.
 * @export
 * @interface TasksApiGetUserTaskListTasksRequest
 */
export type TasksApiGetUserTaskListTasksRequest = {
    
    /**
    * Globally unique identifier for the user task list.
    * @type {string}
    * @memberof TasksApiGetUserTaskListTasks
    */
    readonly userTaskListGid: string
    
    /**
    * Only return tasks that are either incomplete or that have been completed since this time. Accepts a date-time string or the keyword *now*. 
    * @type {string}
    * @memberof TasksApiGetUserTaskListTasks
    */
    readonly completedSince?: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiGetUserTaskListTasks
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TasksApiGetUserTaskListTasks
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TasksApiGetUserTaskListTasks
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiGetUserTaskListTasks
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for removeFollowersFromTask operation in TasksApi.
 * @export
 * @interface TasksApiRemoveFollowersFromTaskRequest
 */
export type TasksApiRemoveFollowersFromTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiRemoveFollowersFromTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiRemoveFollowersFromTask
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiRemoveFollowersFromTask
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
} & TasksRemoveFollowersFromTaskRequest

/**
 * Request parameters for removeProjectFromTask operation in TasksApi.
 * @export
 * @interface TasksApiRemoveProjectFromTaskRequest
 */
export type TasksApiRemoveProjectFromTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiRemoveProjectFromTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiRemoveProjectFromTask
    */
    readonly optPretty?: boolean
    
} & TasksRemoveProjectFromTaskRequest

/**
 * Request parameters for removeTagFromTask operation in TasksApi.
 * @export
 * @interface TasksApiRemoveTagFromTaskRequest
 */
export type TasksApiRemoveTagFromTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiRemoveTagFromTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiRemoveTagFromTask
    */
    readonly optPretty?: boolean
    
} & TasksRemoveTagFromTaskRequest

/**
 * Request parameters for searchInWorkspace operation in TasksApi.
 * @export
 * @interface TasksApiSearchInWorkspaceRequest
 */
export type TasksApiSearchInWorkspaceRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly optPretty?: boolean
    
    /**
    * Performs full-text search on both task name and description
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly text?: string
    
    /**
    * Filters results by the task\'s resource_subtype
    * @type {'default_task' | 'milestone'}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly resourceSubtype?: 'default_task' | 'milestone'
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly assigneeAny?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly assigneeNot?: string
    
    /**
    * Comma-separated list of portfolio IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly portfoliosAny?: string
    
    /**
    * Comma-separated list of project IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly projectsAny?: string
    
    /**
    * Comma-separated list of project IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly projectsNot?: string
    
    /**
    * Comma-separated list of project IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly projectsAll?: string
    
    /**
    * Comma-separated list of section or column IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly sectionsAny?: string
    
    /**
    * Comma-separated list of section or column IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly sectionsNot?: string
    
    /**
    * Comma-separated list of section or column IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly sectionsAll?: string
    
    /**
    * Comma-separated list of tag IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly tagsAny?: string
    
    /**
    * Comma-separated list of tag IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly tagsNot?: string
    
    /**
    * Comma-separated list of tag IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly tagsAll?: string
    
    /**
    * Comma-separated list of team IDs
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly teamsAny?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly followersNot?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdByAny?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdByNot?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly assignedByAny?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly assignedByNot?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly likedByNot?: string
    
    /**
    * Comma-separated list of user identifiers
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly commentedOnByNot?: string
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly dueOnBefore?: string | Date
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly dueOnAfter?: string | Date
    
    /**
    * ISO 8601 date string or `null`
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly dueOn?: string | Date
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly dueAtBefore?: string
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly dueAtAfter?: string
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly startOnBefore?: string | Date
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly startOnAfter?: string | Date
    
    /**
    * ISO 8601 date string or `null`
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly startOn?: string | Date
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdOnBefore?: string | Date
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdOnAfter?: string | Date
    
    /**
    * ISO 8601 date string or `null`
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdOn?: string | Date
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdAtBefore?: string
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly createdAtAfter?: string
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly completedOnBefore?: string | Date
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly completedOnAfter?: string | Date
    
    /**
    * ISO 8601 date string or `null`
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly completedOn?: string | Date
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly completedAtBefore?: string
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly completedAtAfter?: string
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly modifiedOnBefore?: string | Date
    
    /**
    * ISO 8601 date string
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly modifiedOnAfter?: string | Date
    
    /**
    * ISO 8601 date string or `null`
    * @type {string | Date}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly modifiedOn?: string | Date
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly modifiedAtBefore?: string
    
    /**
    * ISO 8601 datetime string
    * @type {string}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly modifiedAtAfter?: string
    
    /**
    * Filter to incomplete tasks with dependents
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly isBlocking?: boolean
    
    /**
    * Filter to tasks with incomplete dependencies
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly isBlocked?: boolean
    
    /**
    * Filter to tasks with attachments
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly hasAttachment?: boolean
    
    /**
    * Filter to completed tasks
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly completed?: boolean
    
    /**
    * Filter to subtasks
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly isSubtask?: boolean
    
    /**
    * One of `due_date`, `created_at`, `completed_at`, `likes`, or `modified_at`, defaults to `modified_at`
    * @type {'due_date' | 'created_at' | 'completed_at' | 'likes' | 'modified_at'}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly sortBy?: 'due_date' | 'created_at' | 'completed_at' | 'likes' | 'modified_at'
    
    /**
    * Default `false`
    * @type {boolean}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly sortAscending?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiSearchInWorkspace
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for setDependenciesForTask operation in TasksApi.
 * @export
 * @interface TasksApiSetDependenciesForTaskRequest
 */
export type TasksApiSetDependenciesForTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiSetDependenciesForTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiSetDependenciesForTask
    */
    readonly optPretty?: boolean
    
} & TasksSetDependenciesForTaskRequest

/**
 * Request parameters for setParentTask operation in TasksApi.
 * @export
 * @interface TasksApiSetParentTaskRequest
 */
export type TasksApiSetParentTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiSetParentTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiSetParentTask
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiSetParentTask
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
} & TasksSetParentTaskRequest

/**
 * Request parameters for setTaskDependents operation in TasksApi.
 * @export
 * @interface TasksApiSetTaskDependentsRequest
 */
export type TasksApiSetTaskDependentsRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiSetTaskDependents
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiSetTaskDependents
    */
    readonly optPretty?: boolean
    
} & TasksSetTaskDependentsRequest

/**
 * Request parameters for unlinkDependenciesFromTask operation in TasksApi.
 * @export
 * @interface TasksApiUnlinkDependenciesFromTaskRequest
 */
export type TasksApiUnlinkDependenciesFromTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiUnlinkDependenciesFromTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiUnlinkDependenciesFromTask
    */
    readonly optPretty?: boolean
    
} & TasksUnlinkDependenciesFromTaskRequest

/**
 * Request parameters for unlinkDependents operation in TasksApi.
 * @export
 * @interface TasksApiUnlinkDependentsRequest
 */
export type TasksApiUnlinkDependentsRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiUnlinkDependents
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiUnlinkDependents
    */
    readonly optPretty?: boolean
    
} & TasksUnlinkDependentsRequest

/**
 * Request parameters for updateTaskRecord operation in TasksApi.
 * @export
 * @interface TasksApiUpdateTaskRecordRequest
 */
export type TasksApiUpdateTaskRecordRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TasksApiUpdateTaskRecord
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TasksApiUpdateTaskRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>}
    * @memberof TasksApiUpdateTaskRecord
    */
    readonly optFields?: Array<'actual_time_minutes' | 'approval_status' | 'assignee' | 'assignee.name' | 'assignee_section' | 'assignee_section.name' | 'assignee_status' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_by' | 'custom_fields' | 'custom_fields.asana_created_field' | 'custom_fields.created_by' | 'custom_fields.created_by.name' | 'custom_fields.currency_code' | 'custom_fields.custom_label' | 'custom_fields.custom_label_position' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.description' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.format' | 'custom_fields.has_notifications_enabled' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.is_global_to_workspace' | 'custom_fields.is_value_read_only' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.people_value' | 'custom_fields.people_value.name' | 'custom_fields.precision' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'dependencies' | 'dependents' | 'due_at' | 'due_on' | 'external' | 'external.data' | 'followers' | 'followers.name' | 'hearted' | 'hearts' | 'hearts.user' | 'hearts.user.name' | 'html_notes' | 'is_rendered_as_separator' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'memberships' | 'memberships.project' | 'memberships.project.name' | 'memberships.section' | 'memberships.section.name' | 'modified_at' | 'name' | 'notes' | 'num_hearts' | 'num_likes' | 'num_subtasks' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permalink_url' | 'projects' | 'projects.name' | 'resource_subtype' | 'start_at' | 'start_on' | 'tags' | 'tags.name' | 'workspace' | 'workspace.name'>
    
} & TasksUpdateTaskRecordRequest

/**
 * TasksApiGenerated - object-oriented interface
 * @export
 * @class TasksApiGenerated
 * @extends {BaseAPI}
 */
export class TasksApiGenerated extends BaseAPI {
    /**
     * Adds followers to a task. Returns an empty data block. Each task can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated task record, described above.
     * @summary Add followers to a task
     * @param {TasksApiAddFollowersToTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public addFollowersToTask(requestParameters: TasksApiAddFollowersToTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).addFollowersToTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds the task to the specified project, in the optional location specified. If no location arguments are given, the task will be added to the end of the project.  `addProject` can also be used to reorder a task within a project or section that already contains it.  At most one of `insert_before`, `insert_after`, or `section` should be specified. Inserting into a section in an non-order-dependent way can be done by specifying section, otherwise, to insert within a section in a particular place, specify `insert_before` or `insert_after` and a task within the section to anchor the position of this task.  Returns an empty data block.
     * @summary Add a project to a task
     * @param {TasksApiAddProjectToTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public addProjectToTask(requestParameters: TasksApiAddProjectToTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).addProjectToTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a tag to a task. Returns an empty data block.
     * @summary Add a tag to a task
     * @param {TasksApiAddTagToTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public addTagToTask(requestParameters: TasksApiAddTagToTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).addTagToTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creating a new task is as easy as POSTing to the `/tasks` endpoint with a data block containing the fields you’d like to set on the task. Any unspecified fields will take on default values.  Every task is required to be created in a specific workspace, and this workspace cannot be changed once set. The workspace need not be set explicitly if you specify `projects` or a `parent` task instead.
     * @summary Create a task
     * @param {TasksApiCreateNewTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public createNewTask(requestParameters: TasksApiCreateNewTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).createNewTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new subtask and adds it to the parent task. Returns the full record for the newly created subtask.
     * @summary Create a subtask
     * @param {TasksApiCreateSubtaskRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public createSubtaskRecord(requestParameters: TasksApiCreateSubtaskRecordRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).createSubtaskRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing task can be deleted by making a DELETE request on the URL for that task. Deleted tasks go into the “trash” of the user making the delete request. Tasks can be recovered from the trash within a period of 30 days; afterward they are completely removed from the system.  Returns an empty data record.
     * @summary Delete a task
     * @param {TasksApiDeleteTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public deleteTask(requestParameters: TasksApiDeleteTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).deleteTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates and returns a job that will asynchronously handle the duplication.
     * @summary Duplicate a task
     * @param {TasksApiDuplicateTaskJobRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public duplicateTaskJob(requestParameters: TasksApiDuplicateTaskJobRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).duplicateTaskJob(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact representations of all of the dependencies of a task.
     * @summary Get dependencies from a task
     * @param {TasksApiGetAllDependenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getAllDependencies(requestParameters: TasksApiGetAllDependenciesRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getAllDependencies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a task given a custom ID shortcode.
     * @summary Get a task for a given custom ID
     * @param {TasksApiGetByCustomIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getByCustomId(requestParameters: TasksApiGetByCustomIdRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getByCustomId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact representations of all of the dependents of a task.
     * @summary Get dependents from a task
     * @param {TasksApiGetDependentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getDependents(requestParameters: TasksApiGetDependentsRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getDependents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact task records for some filtered set of tasks. Use one or more of the parameters provided to filter the tasks returned. You must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.  For more complex task retrieval, use [workspaces/{workspace_gid}/tasks/search](https://raw.githubusercontent.com).
     * @summary Get multiple tasks
     * @param {TasksApiGetMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getMultiple(requestParameters: TasksApiGetMultipleRequest = {}, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact task records for all tasks with the given tag. Tasks can have more than one tag at a time.
     * @summary Get tasks from a tag
     * @param {TasksApiGetMultipleWithTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getMultipleWithTag(requestParameters: TasksApiGetMultipleWithTagRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getMultipleWithTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * *Board view only*: Returns the compact section records for all tasks within the given section.
     * @summary Get tasks from a section
     * @param {TasksApiGetSectionTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getSectionTasks(requestParameters: TasksApiGetSectionTasksRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getSectionTasks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a compact representation of all of the subtasks of a task.
     * @summary Get subtasks from a task
     * @param {TasksApiGetSubtaskListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getSubtaskList(requestParameters: TasksApiGetSubtaskListRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getSubtaskList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete task record for a single task.
     * @summary Get a task
     * @param {TasksApiGetTaskRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getTaskRecord(requestParameters: TasksApiGetTaskRecordRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getTaskRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact task records for all tasks within the given project, ordered by their priority within the project. Tasks can exist in more than one project at a time.
     * @summary Get tasks from a project
     * @param {TasksApiGetTasksByProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getTasksByProject(requestParameters: TasksApiGetTasksByProjectRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getTasksByProject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact list of tasks in a user’s My Tasks list. *Note: Access control is enforced for this endpoint as with all Asana API endpoints, meaning a user’s private tasks will be filtered out if the API-authenticated user does not have access to them.* *Note: Both complete and incomplete tasks are returned by default unless they are filtered out (for example, setting `completed_since=now` will return only incomplete tasks, which is the default view for “My Tasks” in Asana.)*
     * @summary Get tasks from a user task list
     * @param {TasksApiGetUserTaskListTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public getUserTaskListTasks(requestParameters: TasksApiGetUserTaskListTasksRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).getUserTaskListTasks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes each of the specified followers from the task if they are following. Returns the complete, updated record for the affected task.
     * @summary Remove followers from a task
     * @param {TasksApiRemoveFollowersFromTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public removeFollowersFromTask(requestParameters: TasksApiRemoveFollowersFromTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).removeFollowersFromTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the task from the specified project. The task will still exist in the system, but it will not be in the project anymore.  Returns an empty data block.
     * @summary Remove a project from a task
     * @param {TasksApiRemoveProjectFromTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public removeProjectFromTask(requestParameters: TasksApiRemoveProjectFromTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).removeProjectFromTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a tag from a task. Returns an empty data block.
     * @summary Remove a tag from a task
     * @param {TasksApiRemoveTagFromTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public removeTagFromTask(requestParameters: TasksApiRemoveTagFromTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).removeTagFromTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To mirror the functionality of the Asana web app\'s advanced search feature, the Asana API has a task search endpoint that allows you to build complex filters to find and retrieve the exact data you need. #### Premium access Like the Asana web product\'s advance search feature, this search endpoint will only be available to premium Asana users. A user is premium if any of the following is true:  - The workspace in which the search is being performed is a premium workspace - The user is a member of a premium team inside the workspace  Even if a user is only a member of a premium team inside a non-premium workspace, search will allow them to find data anywhere in the workspace, not just inside the premium team. Making a search request using credentials of a non-premium user will result in a `402 Payment Required` error. #### Pagination Search results are not stable; repeating the same query multiple times may return the data in a different order, even if the data do not change. Because of this, the traditional [pagination](https://developers.asana.com/docs/#pagination) available elsewhere in the Asana API is not available here. However, you can paginate manually by sorting the search results by their creation time and then modifying each subsequent query to exclude data you have already seen. Page sizes are limited to a maximum of 100 items, and can be specified by the `limit` query parameter. #### Eventual consistency Changes in Asana (regardless of whether they’re made though the web product or the API) are forwarded to our search infrastructure to be indexed. This process can take between 10 and 60 seconds to complete under normal operation, and longer during some production incidents. Making a change to a task that would alter its presence in a particular search query will not be reflected immediately. This is also true of the advanced search feature in the web product. #### Rate limits You may receive a `429 Too Many Requests` response if you hit any of our [rate limits](https://developers.asana.com/docs/#rate-limits). #### Custom field parameters | Parameter name | Custom field type | Accepted type | |---|---|---| | custom_fields.{gid}.is_set | All | Boolean | | custom_fields.{gid}.value | Text | String | | custom_fields.{gid}.value | Number | Number | | custom_fields.{gid}.value | Enum | Enum option ID | | custom_fields.{gid}.starts_with | Text only | String | | custom_fields.{gid}.ends_with | Text only | String | | custom_fields.{gid}.contains | Text only | String | | custom_fields.{gid}.less_than | Number only | Number | | custom_fields.{gid}.greater_than | Number only | Number |   For example, if the gid of the custom field is 12345, these query parameter to find tasks where it is set would be `custom_fields.12345.is_set=true`. To match an exact value for an enum custom field, use the gid of the desired enum option and not the name of the enum option: `custom_fields.12345.value=67890`.  **Not Supported**: searching for multiple exact matches of a custom field, searching for multi-enum custom field  *Note: If you specify `projects.any` and `sections.any`, you will receive tasks for the project **and** tasks for the section. If you\'re looking for only tasks in a section, omit the `projects.any` from the request.*
     * @summary Search tasks in a workspace
     * @param {TasksApiSearchInWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public searchInWorkspace(requestParameters: TasksApiSearchInWorkspaceRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).searchInWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a set of tasks as dependencies of this task, if they are not already dependencies. *A task can have at most 30 dependents and dependencies combined*.
     * @summary Set dependencies for a task
     * @param {TasksApiSetDependenciesForTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public setDependenciesForTask(requestParameters: TasksApiSetDependenciesForTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).setDependenciesForTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * parent, or no parent task at all. Returns an empty data block. When using `insert_before` and `insert_after`, at most one of those two options can be specified, and they must already be subtasks of the parent.
     * @summary Set the parent of a task
     * @param {TasksApiSetParentTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public setParentTask(requestParameters: TasksApiSetParentTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).setParentTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks a set of tasks as dependents of this task, if they are not already dependents. *A task can have at most 30 dependents and dependencies combined*.
     * @summary Set dependents for a task
     * @param {TasksApiSetTaskDependentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public setTaskDependents(requestParameters: TasksApiSetTaskDependentsRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).setTaskDependents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlinks a set of dependencies from this task.
     * @summary Unlink dependencies from a task
     * @param {TasksApiUnlinkDependenciesFromTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public unlinkDependenciesFromTask(requestParameters: TasksApiUnlinkDependenciesFromTaskRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).unlinkDependenciesFromTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unlinks a set of dependents from this task.
     * @summary Unlink dependents from a task
     * @param {TasksApiUnlinkDependentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public unlinkDependents(requestParameters: TasksApiUnlinkDependentsRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).unlinkDependents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing task can be updated by making a PUT request on the URL for that task. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated task record.
     * @summary Update a task
     * @param {TasksApiUpdateTaskRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApiGenerated
     */
    public updateTaskRecord(requestParameters: TasksApiUpdateTaskRecordRequest, options?: AxiosRequestConfig) {
        return TasksApiFp(this.configuration).updateTaskRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
