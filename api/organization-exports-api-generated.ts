/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { OrganizationExportRequest } from '../models';
// @ts-ignore
import { OrganizationExportsCreateExportRequestRequest } from '../models';
// @ts-ignore
import { OrganizationExportsCreateExportRequestResponse } from '../models';
// @ts-ignore
import { OrganizationExportsGetExportDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrganizationExportsApi - axios parameter creator
 * @export
 */
export const OrganizationExportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
         * @summary Create an organization export request
         * @param {OrganizationExportsCreateExportRequestRequest} organizationExportsCreateExportRequestRequest The organization to export.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExportRequest: async (organizationExportsCreateExportRequestRequest: OrganizationExportsCreateExportRequestRequest, optPretty?: boolean, optFields?: Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationExportsCreateExportRequestRequest' is not null or undefined
            assertParamExists('createExportRequest', 'organizationExportsCreateExportRequestRequest', organizationExportsCreateExportRequestRequest)
            const localVarPath = `/organization_exports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: organizationExportsCreateExportRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organization_exports',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(organizationExportsCreateExportRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details of a previously-requested Organization export.
         * @summary Get details on an org export request
         * @param {string} organizationExportGid Globally unique identifier for the organization export.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportDetails: async (organizationExportGid: string, optPretty?: boolean, optFields?: Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationExportGid' is not null or undefined
            assertParamExists('getExportDetails', 'organizationExportGid', organizationExportGid)
            const localVarPath = `/organization_exports/{organization_export_gid}`
                .replace(`{${"organization_export_gid"}}`, encodeURIComponent(String(organizationExportGid !== undefined ? organizationExportGid : `-organization_export_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/organization_exports/{organization_export_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationExportsApi - functional programming interface
 * @export
 */
export const OrganizationExportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationExportsApiAxiosParamCreator(configuration)
    return {
        /**
         * This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
         * @summary Create an organization export request
         * @param {OrganizationExportsApiCreateExportRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExportRequest(requestParameters: OrganizationExportsApiCreateExportRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationExportsCreateExportRequestResponse>> {
            const organizationExportsCreateExportRequestRequest: OrganizationExportsCreateExportRequestRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExportRequest(organizationExportsCreateExportRequestRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns details of a previously-requested Organization export.
         * @summary Get details on an org export request
         * @param {OrganizationExportsApiGetExportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExportDetails(requestParameters: OrganizationExportsApiGetExportDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationExportsGetExportDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExportDetails(requestParameters.organizationExportGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationExportsApi - factory interface
 * @export
 */
export const OrganizationExportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationExportsApiFp(configuration)
    return {
        /**
         * This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
         * @summary Create an organization export request
         * @param {OrganizationExportsApiCreateExportRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExportRequest(requestParameters: OrganizationExportsApiCreateExportRequestRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationExportsCreateExportRequestResponse> {
            return localVarFp.createExportRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of a previously-requested Organization export.
         * @summary Get details on an org export request
         * @param {OrganizationExportsApiGetExportDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExportDetails(requestParameters: OrganizationExportsApiGetExportDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<OrganizationExportsGetExportDetailsResponse> {
            return localVarFp.getExportDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createExportRequest operation in OrganizationExportsApi.
 * @export
 * @interface OrganizationExportsApiCreateExportRequestRequest
 */
export type OrganizationExportsApiCreateExportRequestRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof OrganizationExportsApiCreateExportRequest
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>}
    * @memberof OrganizationExportsApiCreateExportRequest
    */
    readonly optFields?: Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>
    
} & OrganizationExportsCreateExportRequestRequest

/**
 * Request parameters for getExportDetails operation in OrganizationExportsApi.
 * @export
 * @interface OrganizationExportsApiGetExportDetailsRequest
 */
export type OrganizationExportsApiGetExportDetailsRequest = {
    
    /**
    * Globally unique identifier for the organization export.
    * @type {string}
    * @memberof OrganizationExportsApiGetExportDetails
    */
    readonly organizationExportGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof OrganizationExportsApiGetExportDetails
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>}
    * @memberof OrganizationExportsApiGetExportDetails
    */
    readonly optFields?: Array<'created_at' | 'download_url' | 'organization' | 'organization.name' | 'state'>
    
}

/**
 * OrganizationExportsApiGenerated - object-oriented interface
 * @export
 * @class OrganizationExportsApiGenerated
 * @extends {BaseAPI}
 */
export class OrganizationExportsApiGenerated extends BaseAPI {
    /**
     * This method creates a request to export an Organization. Asana will complete the export at some point after you create the request.
     * @summary Create an organization export request
     * @param {OrganizationExportsApiCreateExportRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationExportsApiGenerated
     */
    public createExportRequest(requestParameters: OrganizationExportsApiCreateExportRequestRequest, options?: AxiosRequestConfig) {
        return OrganizationExportsApiFp(this.configuration).createExportRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns details of a previously-requested Organization export.
     * @summary Get details on an org export request
     * @param {OrganizationExportsApiGetExportDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationExportsApiGenerated
     */
    public getExportDetails(requestParameters: OrganizationExportsApiGetExportDetailsRequest, options?: AxiosRequestConfig) {
        return OrganizationExportsApiFp(this.configuration).getExportDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
