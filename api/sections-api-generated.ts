/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ProjectSectionInsertRequest } from '../models';
// @ts-ignore
import { SectionRequest } from '../models';
// @ts-ignore
import { SectionTaskInsertRequest } from '../models';
// @ts-ignore
import { SectionsAddTaskToSectionRequest } from '../models';
// @ts-ignore
import { SectionsAddTaskToSectionResponse } from '../models';
// @ts-ignore
import { SectionsCreateNewSectionRequest } from '../models';
// @ts-ignore
import { SectionsCreateNewSectionResponse } from '../models';
// @ts-ignore
import { SectionsDeleteSectionResponse } from '../models';
// @ts-ignore
import { SectionsGetRecordResponse } from '../models';
// @ts-ignore
import { SectionsListProjectSectionsResponse } from '../models';
// @ts-ignore
import { SectionsMoveOrInsertRequest } from '../models';
// @ts-ignore
import { SectionsMoveOrInsertResponse } from '../models';
// @ts-ignore
import { SectionsUpdateSectionRecordRequest } from '../models';
// @ts-ignore
import { SectionsUpdateSectionRecordResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SectionsApi - axios parameter creator
 * @export
 */
export const SectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
         * @summary Add task to section
         * @param {string} sectionGid The globally unique identifier for the section.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {SectionsAddTaskToSectionRequest} [sectionsAddTaskToSectionRequest] The task and optionally the insert location.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTaskToSection: async (sectionGid: string, optPretty?: boolean, sectionsAddTaskToSectionRequest?: SectionsAddTaskToSectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionGid' is not null or undefined
            assertParamExists('addTaskToSection', 'sectionGid', sectionGid)
            const localVarPath = `/sections/{section_gid}/addTask`
                .replace(`{${"section_gid"}}`, encodeURIComponent(String(sectionGid !== undefined ? sectionGid : `-section_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sectionsAddTaskToSectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sections/{section_gid}/addTask',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sectionsAddTaskToSectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new section in a project. Returns the full record of the newly created section.
         * @summary Create a section in a project
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {SectionsCreateNewSectionRequest} [sectionsCreateNewSectionRequest] The section to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSection: async (projectGid: string, optPretty?: boolean, optFields?: Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>, sectionsCreateNewSectionRequest?: SectionsCreateNewSectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGid' is not null or undefined
            assertParamExists('createNewSection', 'projectGid', projectGid)
            const localVarPath = `/projects/{project_gid}/sections`
                .replace(`{${"project_gid"}}`, encodeURIComponent(String(projectGid !== undefined ? projectGid : `-project_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sectionsCreateNewSectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_gid}/sections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sectionsCreateNewSectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
         * @summary Delete a section
         * @param {string} sectionGid The globally unique identifier for the section.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection: async (sectionGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionGid' is not null or undefined
            assertParamExists('deleteSection', 'sectionGid', sectionGid)
            const localVarPath = `/sections/{section_gid}`
                .replace(`{${"section_gid"}}`, encodeURIComponent(String(sectionGid !== undefined ? sectionGid : `-section_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sections/{section_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete record for a single section.
         * @summary Get a section
         * @param {string} sectionGid The globally unique identifier for the section.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (sectionGid: string, optPretty?: boolean, optFields?: Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionGid' is not null or undefined
            assertParamExists('getRecord', 'sectionGid', sectionGid)
            const localVarPath = `/sections/{section_gid}`
                .replace(`{${"section_gid"}}`, encodeURIComponent(String(sectionGid !== undefined ? sectionGid : `-section_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sections/{section_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact records for all sections in the specified project.
         * @summary Get sections in a project
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'created_at' | 'name' | 'offset' | 'path' | 'project' | 'project.name' | 'projects' | 'projects.name' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectSections: async (projectGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'created_at' | 'name' | 'offset' | 'path' | 'project' | 'project.name' | 'projects' | 'projects.name' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGid' is not null or undefined
            assertParamExists('listProjectSections', 'projectGid', projectGid)
            const localVarPath = `/projects/{project_gid}/sections`
                .replace(`{${"project_gid"}}`, encodeURIComponent(String(projectGid !== undefined ? projectGid : `-project_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_gid}/sections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move sections relative to each other. One of `before_section` or `after_section` is required.  Sections cannot be moved between projects.  Returns an empty data block.
         * @summary Move or Insert sections
         * @param {string} projectGid Globally unique identifier for the project.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {SectionsMoveOrInsertRequest} [sectionsMoveOrInsertRequest] The section\&#39;s move action.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveOrInsert: async (projectGid: string, optPretty?: boolean, sectionsMoveOrInsertRequest?: SectionsMoveOrInsertRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectGid' is not null or undefined
            assertParamExists('moveOrInsert', 'projectGid', projectGid)
            const localVarPath = `/projects/{project_gid}/sections/insert`
                .replace(`{${"project_gid"}}`, encodeURIComponent(String(projectGid !== undefined ? projectGid : `-project_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sectionsMoveOrInsertRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/projects/{project_gid}/sections/insert',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sectionsMoveOrInsertRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the `name` field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
         * @summary Update a section
         * @param {string} sectionGid The globally unique identifier for the section.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {SectionsUpdateSectionRecordRequest} [sectionsUpdateSectionRecordRequest] The section to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSectionRecord: async (sectionGid: string, optPretty?: boolean, optFields?: Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>, sectionsUpdateSectionRecordRequest?: SectionsUpdateSectionRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionGid' is not null or undefined
            assertParamExists('updateSectionRecord', 'sectionGid', sectionGid)
            const localVarPath = `/sections/{section_gid}`
                .replace(`{${"section_gid"}}`, encodeURIComponent(String(sectionGid !== undefined ? sectionGid : `-section_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: sectionsUpdateSectionRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sections/{section_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(sectionsUpdateSectionRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SectionsApi - functional programming interface
 * @export
 */
export const SectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
         * @summary Add task to section
         * @param {SectionsApiAddTaskToSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTaskToSection(requestParameters: SectionsApiAddTaskToSectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsAddTaskToSectionResponse>> {
            const sectionsAddTaskToSectionRequest: SectionsAddTaskToSectionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTaskToSection(requestParameters.sectionGid, requestParameters.optPretty, sectionsAddTaskToSectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new section in a project. Returns the full record of the newly created section.
         * @summary Create a section in a project
         * @param {SectionsApiCreateNewSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewSection(requestParameters: SectionsApiCreateNewSectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsCreateNewSectionResponse>> {
            const sectionsCreateNewSectionRequest: SectionsCreateNewSectionRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewSection(requestParameters.projectGid, requestParameters.optPretty, requestParameters.optFields, sectionsCreateNewSectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
         * @summary Delete a section
         * @param {SectionsApiDeleteSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSection(requestParameters: SectionsApiDeleteSectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsDeleteSectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSection(requestParameters.sectionGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete record for a single section.
         * @summary Get a section
         * @param {SectionsApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: SectionsApiGetRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.sectionGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact records for all sections in the specified project.
         * @summary Get sections in a project
         * @param {SectionsApiListProjectSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProjectSections(requestParameters: SectionsApiListProjectSectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsListProjectSectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectSections(requestParameters.projectGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Move sections relative to each other. One of `before_section` or `after_section` is required.  Sections cannot be moved between projects.  Returns an empty data block.
         * @summary Move or Insert sections
         * @param {SectionsApiMoveOrInsertRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveOrInsert(requestParameters: SectionsApiMoveOrInsertRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsMoveOrInsertResponse>> {
            const sectionsMoveOrInsertRequest: SectionsMoveOrInsertRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveOrInsert(requestParameters.projectGid, requestParameters.optPretty, sectionsMoveOrInsertRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the `name` field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
         * @summary Update a section
         * @param {SectionsApiUpdateSectionRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSectionRecord(requestParameters: SectionsApiUpdateSectionRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionsUpdateSectionRecordResponse>> {
            const sectionsUpdateSectionRecordRequest: SectionsUpdateSectionRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSectionRecord(requestParameters.sectionGid, requestParameters.optPretty, requestParameters.optFields, sectionsUpdateSectionRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SectionsApi - factory interface
 * @export
 */
export const SectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SectionsApiFp(configuration)
    return {
        /**
         * Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
         * @summary Add task to section
         * @param {SectionsApiAddTaskToSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTaskToSection(requestParameters: SectionsApiAddTaskToSectionRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsAddTaskToSectionResponse> {
            return localVarFp.addTaskToSection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new section in a project. Returns the full record of the newly created section.
         * @summary Create a section in a project
         * @param {SectionsApiCreateNewSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewSection(requestParameters: SectionsApiCreateNewSectionRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsCreateNewSectionResponse> {
            return localVarFp.createNewSection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
         * @summary Delete a section
         * @param {SectionsApiDeleteSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection(requestParameters: SectionsApiDeleteSectionRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsDeleteSectionResponse> {
            return localVarFp.deleteSection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete record for a single section.
         * @summary Get a section
         * @param {SectionsApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: SectionsApiGetRecordRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact records for all sections in the specified project.
         * @summary Get sections in a project
         * @param {SectionsApiListProjectSectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProjectSections(requestParameters: SectionsApiListProjectSectionsRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsListProjectSectionsResponse> {
            return localVarFp.listProjectSections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Move sections relative to each other. One of `before_section` or `after_section` is required.  Sections cannot be moved between projects.  Returns an empty data block.
         * @summary Move or Insert sections
         * @param {SectionsApiMoveOrInsertRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveOrInsert(requestParameters: SectionsApiMoveOrInsertRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsMoveOrInsertResponse> {
            return localVarFp.moveOrInsert(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the `name` field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
         * @summary Update a section
         * @param {SectionsApiUpdateSectionRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSectionRecord(requestParameters: SectionsApiUpdateSectionRecordRequest, options?: AxiosRequestConfig): AxiosPromise<SectionsUpdateSectionRecordResponse> {
            return localVarFp.updateSectionRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTaskToSection operation in SectionsApi.
 * @export
 * @interface SectionsApiAddTaskToSectionRequest
 */
export type SectionsApiAddTaskToSectionRequest = {
    
    /**
    * The globally unique identifier for the section.
    * @type {string}
    * @memberof SectionsApiAddTaskToSection
    */
    readonly sectionGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiAddTaskToSection
    */
    readonly optPretty?: boolean
    
} & SectionsAddTaskToSectionRequest

/**
 * Request parameters for createNewSection operation in SectionsApi.
 * @export
 * @interface SectionsApiCreateNewSectionRequest
 */
export type SectionsApiCreateNewSectionRequest = {
    
    /**
    * Globally unique identifier for the project.
    * @type {string}
    * @memberof SectionsApiCreateNewSection
    */
    readonly projectGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiCreateNewSection
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>}
    * @memberof SectionsApiCreateNewSection
    */
    readonly optFields?: Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>
    
} & SectionsCreateNewSectionRequest

/**
 * Request parameters for deleteSection operation in SectionsApi.
 * @export
 * @interface SectionsApiDeleteSectionRequest
 */
export type SectionsApiDeleteSectionRequest = {
    
    /**
    * The globally unique identifier for the section.
    * @type {string}
    * @memberof SectionsApiDeleteSection
    */
    readonly sectionGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiDeleteSection
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getRecord operation in SectionsApi.
 * @export
 * @interface SectionsApiGetRecordRequest
 */
export type SectionsApiGetRecordRequest = {
    
    /**
    * The globally unique identifier for the section.
    * @type {string}
    * @memberof SectionsApiGetRecord
    */
    readonly sectionGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiGetRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>}
    * @memberof SectionsApiGetRecord
    */
    readonly optFields?: Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>
    
}

/**
 * Request parameters for listProjectSections operation in SectionsApi.
 * @export
 * @interface SectionsApiListProjectSectionsRequest
 */
export type SectionsApiListProjectSectionsRequest = {
    
    /**
    * Globally unique identifier for the project.
    * @type {string}
    * @memberof SectionsApiListProjectSections
    */
    readonly projectGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiListProjectSections
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof SectionsApiListProjectSections
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof SectionsApiListProjectSections
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'name' | 'offset' | 'path' | 'project' | 'project.name' | 'projects' | 'projects.name' | 'uri'>}
    * @memberof SectionsApiListProjectSections
    */
    readonly optFields?: Array<'created_at' | 'name' | 'offset' | 'path' | 'project' | 'project.name' | 'projects' | 'projects.name' | 'uri'>
    
}

/**
 * Request parameters for moveOrInsert operation in SectionsApi.
 * @export
 * @interface SectionsApiMoveOrInsertRequest
 */
export type SectionsApiMoveOrInsertRequest = {
    
    /**
    * Globally unique identifier for the project.
    * @type {string}
    * @memberof SectionsApiMoveOrInsert
    */
    readonly projectGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiMoveOrInsert
    */
    readonly optPretty?: boolean
    
} & SectionsMoveOrInsertRequest

/**
 * Request parameters for updateSectionRecord operation in SectionsApi.
 * @export
 * @interface SectionsApiUpdateSectionRecordRequest
 */
export type SectionsApiUpdateSectionRecordRequest = {
    
    /**
    * The globally unique identifier for the section.
    * @type {string}
    * @memberof SectionsApiUpdateSectionRecord
    */
    readonly sectionGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof SectionsApiUpdateSectionRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>}
    * @memberof SectionsApiUpdateSectionRecord
    */
    readonly optFields?: Array<'created_at' | 'name' | 'project' | 'project.name' | 'projects' | 'projects.name'>
    
} & SectionsUpdateSectionRecordRequest

/**
 * SectionsApiGenerated - object-oriented interface
 * @export
 * @class SectionsApiGenerated
 * @extends {BaseAPI}
 */
export class SectionsApiGenerated extends BaseAPI {
    /**
     * Add a task to a specific, existing section. This will remove the task from other sections of the project.  The task will be inserted at the top of a section unless an insert_before or insert_after parameter is declared.  This does not work for separators (tasks with the resource_subtype of section).
     * @summary Add task to section
     * @param {SectionsApiAddTaskToSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public addTaskToSection(requestParameters: SectionsApiAddTaskToSectionRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).addTaskToSection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new section in a project. Returns the full record of the newly created section.
     * @summary Create a section in a project
     * @param {SectionsApiCreateNewSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public createNewSection(requestParameters: SectionsApiCreateNewSectionRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).createNewSection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing section can be deleted by making a DELETE request on the URL for that section.  Note that sections must be empty to be deleted.  The last remaining section cannot be deleted.  Returns an empty data block.
     * @summary Delete a section
     * @param {SectionsApiDeleteSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public deleteSection(requestParameters: SectionsApiDeleteSectionRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).deleteSection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete record for a single section.
     * @summary Get a section
     * @param {SectionsApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public getRecord(requestParameters: SectionsApiGetRecordRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact records for all sections in the specified project.
     * @summary Get sections in a project
     * @param {SectionsApiListProjectSectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public listProjectSections(requestParameters: SectionsApiListProjectSectionsRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).listProjectSections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Move sections relative to each other. One of `before_section` or `after_section` is required.  Sections cannot be moved between projects.  Returns an empty data block.
     * @summary Move or Insert sections
     * @param {SectionsApiMoveOrInsertRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public moveOrInsert(requestParameters: SectionsApiMoveOrInsertRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).moveOrInsert(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing section can be updated by making a PUT request on the URL for that project. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged. (note that at this time, the only field that can be updated is the `name` field.)  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated section record.
     * @summary Update a section
     * @param {SectionsApiUpdateSectionRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SectionsApiGenerated
     */
    public updateSectionRecord(requestParameters: SectionsApiUpdateSectionRecordRequest, options?: AxiosRequestConfig) {
        return SectionsApiFp(this.configuration).updateSectionRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
