/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { WorkspaceAddUserRequest } from '../models';
// @ts-ignore
import { WorkspaceCompact } from '../models';
// @ts-ignore
import { WorkspaceRemoveUserRequest } from '../models';
// @ts-ignore
import { WorkspacesAddUserToWorkspaceRequest } from '../models';
// @ts-ignore
import { WorkspacesAddUserToWorkspaceResponse } from '../models';
// @ts-ignore
import { WorkspacesGetWorkspaceRecordResponse } from '../models';
// @ts-ignore
import { WorkspacesListMultipleResponse } from '../models';
// @ts-ignore
import { WorkspacesRemoveUserFromWorkspaceRequest } from '../models';
// @ts-ignore
import { WorkspacesRemoveUserFromWorkspaceResponse } from '../models';
// @ts-ignore
import { WorkspacesUpdateWorkspaceRecordRequest } from '../models';
// @ts-ignore
import { WorkspacesUpdateWorkspaceRecordResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkspacesApi - axios parameter creator
 * @export
 */
export const WorkspacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
         * @summary Add a user to a workspace or organization
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {WorkspacesAddUserToWorkspaceRequest} workspacesAddUserToWorkspaceRequest The user to add to the workspace.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'email' | 'name' | 'photo' | 'photo.image_1024x1024' | 'photo.image_128x128' | 'photo.image_21x21' | 'photo.image_27x27' | 'photo.image_36x36' | 'photo.image_60x60'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToWorkspace: async (workspaceGid: string, workspacesAddUserToWorkspaceRequest: WorkspacesAddUserToWorkspaceRequest, optPretty?: boolean, optFields?: Array<'email' | 'name' | 'photo' | 'photo.image_1024x1024' | 'photo.image_128x128' | 'photo.image_21x21' | 'photo.image_27x27' | 'photo.image_36x36' | 'photo.image_60x60'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('addUserToWorkspace', 'workspaceGid', workspaceGid)
            // verify required parameter 'workspacesAddUserToWorkspaceRequest' is not null or undefined
            assertParamExists('addUserToWorkspace', 'workspacesAddUserToWorkspaceRequest', workspacesAddUserToWorkspaceRequest)
            const localVarPath = `/workspaces/{workspace_gid}/addUser`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workspacesAddUserToWorkspaceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/addUser',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workspacesAddUserToWorkspaceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the full workspace record for a single workspace.
         * @summary Get a workspace
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'email_domains' | 'is_organization' | 'name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceRecord: async (workspaceGid: string, optPretty?: boolean, optFields?: Array<'email_domains' | 'is_organization' | 'name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('getWorkspaceRecord', 'workspaceGid', workspaceGid)
            const localVarPath = `/workspaces/{workspace_gid}`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact records for all workspaces visible to the authorized user.
         * @summary Get multiple workspaces
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'email_domains' | 'is_organization' | 'name' | 'offset' | 'path' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultiple: async (optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'email_domains' | 'is_organization' | 'name' | 'offset' | 'path' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
         * @summary Remove a user from a workspace or organization
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {WorkspacesRemoveUserFromWorkspaceRequest} workspacesRemoveUserFromWorkspaceRequest The user to remove from the workspace.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromWorkspace: async (workspaceGid: string, workspacesRemoveUserFromWorkspaceRequest: WorkspacesRemoveUserFromWorkspaceRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'workspaceGid', workspaceGid)
            // verify required parameter 'workspacesRemoveUserFromWorkspaceRequest' is not null or undefined
            assertParamExists('removeUserFromWorkspace', 'workspacesRemoveUserFromWorkspaceRequest', workspacesRemoveUserFromWorkspaceRequest)
            const localVarPath = `/workspaces/{workspace_gid}/removeUser`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workspacesRemoveUserFromWorkspaceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/removeUser',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workspacesRemoveUserFromWorkspaceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
         * @summary Update a workspace
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {WorkspacesUpdateWorkspaceRecordRequest} workspacesUpdateWorkspaceRecordRequest The workspace object with all updated properties.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'email_domains' | 'is_organization' | 'name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspaceRecord: async (workspaceGid: string, workspacesUpdateWorkspaceRecordRequest: WorkspacesUpdateWorkspaceRecordRequest, optPretty?: boolean, optFields?: Array<'email_domains' | 'is_organization' | 'name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('updateWorkspaceRecord', 'workspaceGid', workspaceGid)
            // verify required parameter 'workspacesUpdateWorkspaceRecordRequest' is not null or undefined
            assertParamExists('updateWorkspaceRecord', 'workspacesUpdateWorkspaceRecordRequest', workspacesUpdateWorkspaceRecordRequest)
            const localVarPath = `/workspaces/{workspace_gid}`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workspacesUpdateWorkspaceRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workspacesUpdateWorkspaceRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspacesApi - functional programming interface
 * @export
 */
export const WorkspacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspacesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
         * @summary Add a user to a workspace or organization
         * @param {WorkspacesApiAddUserToWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToWorkspace(requestParameters: WorkspacesApiAddUserToWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesAddUserToWorkspaceResponse>> {
            const workspacesAddUserToWorkspaceRequest: WorkspacesAddUserToWorkspaceRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToWorkspace(requestParameters.workspaceGid, workspacesAddUserToWorkspaceRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the full workspace record for a single workspace.
         * @summary Get a workspace
         * @param {WorkspacesApiGetWorkspaceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkspaceRecord(requestParameters: WorkspacesApiGetWorkspaceRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesGetWorkspaceRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceRecord(requestParameters.workspaceGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact records for all workspaces visible to the authorized user.
         * @summary Get multiple workspaces
         * @param {WorkspacesApiListMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultiple(requestParameters: WorkspacesApiListMultipleRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesListMultipleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultiple(requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
         * @summary Remove a user from a workspace or organization
         * @param {WorkspacesApiRemoveUserFromWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromWorkspace(requestParameters: WorkspacesApiRemoveUserFromWorkspaceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesRemoveUserFromWorkspaceResponse>> {
            const workspacesRemoveUserFromWorkspaceRequest: WorkspacesRemoveUserFromWorkspaceRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromWorkspace(requestParameters.workspaceGid, workspacesRemoveUserFromWorkspaceRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
         * @summary Update a workspace
         * @param {WorkspacesApiUpdateWorkspaceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWorkspaceRecord(requestParameters: WorkspacesApiUpdateWorkspaceRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesUpdateWorkspaceRecordResponse>> {
            const workspacesUpdateWorkspaceRecordRequest: WorkspacesUpdateWorkspaceRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWorkspaceRecord(requestParameters.workspaceGid, workspacesUpdateWorkspaceRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkspacesApi - factory interface
 * @export
 */
export const WorkspacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspacesApiFp(configuration)
    return {
        /**
         * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
         * @summary Add a user to a workspace or organization
         * @param {WorkspacesApiAddUserToWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToWorkspace(requestParameters: WorkspacesApiAddUserToWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspacesAddUserToWorkspaceResponse> {
            return localVarFp.addUserToWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the full workspace record for a single workspace.
         * @summary Get a workspace
         * @param {WorkspacesApiGetWorkspaceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceRecord(requestParameters: WorkspacesApiGetWorkspaceRecordRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspacesGetWorkspaceRecordResponse> {
            return localVarFp.getWorkspaceRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact records for all workspaces visible to the authorized user.
         * @summary Get multiple workspaces
         * @param {WorkspacesApiListMultipleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultiple(requestParameters: WorkspacesApiListMultipleRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WorkspacesListMultipleResponse> {
            return localVarFp.listMultiple(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
         * @summary Remove a user from a workspace or organization
         * @param {WorkspacesApiRemoveUserFromWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromWorkspace(requestParameters: WorkspacesApiRemoveUserFromWorkspaceRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspacesRemoveUserFromWorkspaceResponse> {
            return localVarFp.removeUserFromWorkspace(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
         * @summary Update a workspace
         * @param {WorkspacesApiUpdateWorkspaceRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWorkspaceRecord(requestParameters: WorkspacesApiUpdateWorkspaceRecordRequest, options?: AxiosRequestConfig): AxiosPromise<WorkspacesUpdateWorkspaceRecordResponse> {
            return localVarFp.updateWorkspaceRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserToWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiAddUserToWorkspaceRequest
 */
export type WorkspacesApiAddUserToWorkspaceRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof WorkspacesApiAddUserToWorkspace
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspacesApiAddUserToWorkspace
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'email' | 'name' | 'photo' | 'photo.image_1024x1024' | 'photo.image_128x128' | 'photo.image_21x21' | 'photo.image_27x27' | 'photo.image_36x36' | 'photo.image_60x60'>}
    * @memberof WorkspacesApiAddUserToWorkspace
    */
    readonly optFields?: Array<'email' | 'name' | 'photo' | 'photo.image_1024x1024' | 'photo.image_128x128' | 'photo.image_21x21' | 'photo.image_27x27' | 'photo.image_36x36' | 'photo.image_60x60'>
    
} & WorkspacesAddUserToWorkspaceRequest

/**
 * Request parameters for getWorkspaceRecord operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiGetWorkspaceRecordRequest
 */
export type WorkspacesApiGetWorkspaceRecordRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof WorkspacesApiGetWorkspaceRecord
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspacesApiGetWorkspaceRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'email_domains' | 'is_organization' | 'name'>}
    * @memberof WorkspacesApiGetWorkspaceRecord
    */
    readonly optFields?: Array<'email_domains' | 'is_organization' | 'name'>
    
}

/**
 * Request parameters for listMultiple operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiListMultipleRequest
 */
export type WorkspacesApiListMultipleRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspacesApiListMultiple
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof WorkspacesApiListMultiple
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof WorkspacesApiListMultiple
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'email_domains' | 'is_organization' | 'name' | 'offset' | 'path' | 'uri'>}
    * @memberof WorkspacesApiListMultiple
    */
    readonly optFields?: Array<'email_domains' | 'is_organization' | 'name' | 'offset' | 'path' | 'uri'>
    
}

/**
 * Request parameters for removeUserFromWorkspace operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiRemoveUserFromWorkspaceRequest
 */
export type WorkspacesApiRemoveUserFromWorkspaceRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof WorkspacesApiRemoveUserFromWorkspace
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspacesApiRemoveUserFromWorkspace
    */
    readonly optPretty?: boolean
    
} & WorkspacesRemoveUserFromWorkspaceRequest

/**
 * Request parameters for updateWorkspaceRecord operation in WorkspacesApi.
 * @export
 * @interface WorkspacesApiUpdateWorkspaceRecordRequest
 */
export type WorkspacesApiUpdateWorkspaceRecordRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof WorkspacesApiUpdateWorkspaceRecord
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof WorkspacesApiUpdateWorkspaceRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'email_domains' | 'is_organization' | 'name'>}
    * @memberof WorkspacesApiUpdateWorkspaceRecord
    */
    readonly optFields?: Array<'email_domains' | 'is_organization' | 'name'>
    
} & WorkspacesUpdateWorkspaceRecordRequest

/**
 * WorkspacesApiGenerated - object-oriented interface
 * @export
 * @class WorkspacesApiGenerated
 * @extends {BaseAPI}
 */
export class WorkspacesApiGenerated extends BaseAPI {
    /**
     * Add a user to a workspace or organization. The user can be referenced by their globally unique user ID or their email address. Returns the full user record for the invited user.
     * @summary Add a user to a workspace or organization
     * @param {WorkspacesApiAddUserToWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public addUserToWorkspace(requestParameters: WorkspacesApiAddUserToWorkspaceRequest, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).addUserToWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the full workspace record for a single workspace.
     * @summary Get a workspace
     * @param {WorkspacesApiGetWorkspaceRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public getWorkspaceRecord(requestParameters: WorkspacesApiGetWorkspaceRecordRequest, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).getWorkspaceRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact records for all workspaces visible to the authorized user.
     * @summary Get multiple workspaces
     * @param {WorkspacesApiListMultipleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public listMultiple(requestParameters: WorkspacesApiListMultipleRequest = {}, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).listMultiple(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a user from a workspace or organization. The user making this call must be an admin in the workspace. The user can be referenced by their globally unique user ID or their email address. Returns an empty data record.
     * @summary Remove a user from a workspace or organization
     * @param {WorkspacesApiRemoveUserFromWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public removeUserFromWorkspace(requestParameters: WorkspacesApiRemoveUserFromWorkspaceRequest, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).removeUserFromWorkspace(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing workspace can be updated by making a PUT request on the URL for that workspace. Only the fields provided in the data block will be updated; any unspecified fields will remain unchanged. Currently the only field that can be modified for a workspace is its name. Returns the complete, updated workspace record.
     * @summary Update a workspace
     * @param {WorkspacesApiUpdateWorkspaceRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspacesApiGenerated
     */
    public updateWorkspaceRecord(requestParameters: WorkspacesApiUpdateWorkspaceRecordRequest, options?: AxiosRequestConfig) {
        return WorkspacesApiFp(this.configuration).updateWorkspaceRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
