/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { GoalMetricBase } from '../models';
// @ts-ignore
import { GoalMetricCurrentValueRequest } from '../models';
// @ts-ignore
import { GoalRequest } from '../models';
// @ts-ignore
import { GoalUpdateRequest } from '../models';
// @ts-ignore
import { GoalsAddCollaboratorsToGoalRequest } from '../models';
// @ts-ignore
import { GoalsAddCollaboratorsToGoalResponse } from '../models';
// @ts-ignore
import { GoalsCreateMetricRequest } from '../models';
// @ts-ignore
import { GoalsCreateMetricResponse } from '../models';
// @ts-ignore
import { GoalsCreateNewGoalRecordRequest } from '../models';
// @ts-ignore
import { GoalsCreateNewGoalRecordResponse } from '../models';
// @ts-ignore
import { GoalsDeleteRecordResponse } from '../models';
// @ts-ignore
import { GoalsGetCompactRecordsResponse } from '../models';
// @ts-ignore
import { GoalsGetGoalRecordResponse } from '../models';
// @ts-ignore
import { GoalsGetParentGoalsResponse } from '../models';
// @ts-ignore
import { GoalsRemoveFollowersFromGoalRequest } from '../models';
// @ts-ignore
import { GoalsRemoveFollowersFromGoalResponse } from '../models';
// @ts-ignore
import { GoalsUpdateGoalRecordRequest } from '../models';
// @ts-ignore
import { GoalsUpdateGoalRecordResponse } from '../models';
// @ts-ignore
import { GoalsUpdateMetricCurrentValueRequest } from '../models';
// @ts-ignore
import { GoalsUpdateMetricCurrentValueResponse } from '../models';
// @ts-ignore
import { TaskAddFollowersRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Add a collaborator to a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalsAddCollaboratorsToGoalRequest} goalsAddCollaboratorsToGoalRequest The followers to be added as collaborators
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollaboratorsToGoal: async (goalGid: string, goalsAddCollaboratorsToGoalRequest: GoalsAddCollaboratorsToGoalRequest, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('addCollaboratorsToGoal', 'goalGid', goalGid)
            // verify required parameter 'goalsAddCollaboratorsToGoalRequest' is not null or undefined
            assertParamExists('addCollaboratorsToGoal', 'goalsAddCollaboratorsToGoalRequest', goalsAddCollaboratorsToGoalRequest)
            const localVarPath = `/goals/{goal_gid}/addFollowers`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsAddCollaboratorsToGoalRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/addFollowers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsAddCollaboratorsToGoalRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @summary Create a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalsCreateMetricRequest} goalsCreateMetricRequest The goal metric to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetric: async (goalGid: string, goalsCreateMetricRequest: GoalsCreateMetricRequest, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('createMetric', 'goalGid', goalGid)
            // verify required parameter 'goalsCreateMetricRequest' is not null or undefined
            assertParamExists('createMetric', 'goalsCreateMetricRequest', goalsCreateMetricRequest)
            const localVarPath = `/goals/{goal_gid}/setMetric`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsCreateMetricRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/setMetric',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsCreateMetricRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @summary Create a goal
         * @param {GoalsCreateNewGoalRecordRequest} goalsCreateNewGoalRecordRequest The goal to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGoalRecord: async (goalsCreateNewGoalRecordRequest: GoalsCreateNewGoalRecordRequest, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalsCreateNewGoalRecordRequest' is not null or undefined
            assertParamExists('createNewGoalRecord', 'goalsCreateNewGoalRecordRequest', goalsCreateNewGoalRecordRequest)
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsCreateNewGoalRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsCreateNewGoalRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @summary Delete a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord: async (goalGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('deleteRecord', 'goalGid', goalGid)
            const localVarPath = `/goals/{goal_gid}`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns compact goal records.
         * @summary Get goals
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {string} [portfolio] Globally unique identifier for supporting portfolio.
         * @param {string} [project] Globally unique identifier for supporting project.
         * @param {string} [task] Globally unique identifier for supporting task.
         * @param {boolean} [isWorkspaceLevel] Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
         * @param {string} [team] Globally unique identifier for the team.
         * @param {string} [workspace] Globally unique identifier for the workspace.
         * @param {Array<string>} [timePeriods] Globally unique identifiers for the time periods.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords: async (optPretty?: boolean, portfolio?: string, project?: string, task?: string, isWorkspaceLevel?: boolean, team?: string, workspace?: string, timePeriods?: Array<string>, limit?: number, offset?: string, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/goals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (portfolio !== undefined) {
                localVarQueryParameter['portfolio'] = portfolio;
            }

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (task !== undefined) {
                localVarQueryParameter['task'] = task;
            }

            if (isWorkspaceLevel !== undefined) {
                localVarQueryParameter['is_workspace_level'] = isWorkspaceLevel;
            }

            if (team !== undefined) {
                localVarQueryParameter['team'] = team;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (timePeriods) {
                localVarQueryParameter['time_periods'] = timePeriods;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete goal record for a single goal.
         * @summary Get a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalRecord: async (goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('getGoalRecord', 'goalGid', goalGid)
            const localVarPath = `/goals/{goal_gid}`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a compact representation of all of the parent goals of a goal.
         * @summary Get parent goals from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentGoals: async (goalGid: string, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('getParentGoals', 'goalGid', goalGid)
            const localVarPath = `/goals/{goal_gid}/parentGoals`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/parentGoals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Remove a collaborator from a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalsRemoveFollowersFromGoalRequest} goalsRemoveFollowersFromGoalRequest The followers to be removed as collaborators
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFollowersFromGoal: async (goalGid: string, goalsRemoveFollowersFromGoalRequest: GoalsRemoveFollowersFromGoalRequest, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('removeFollowersFromGoal', 'goalGid', goalGid)
            // verify required parameter 'goalsRemoveFollowersFromGoalRequest' is not null or undefined
            assertParamExists('removeFollowersFromGoal', 'goalsRemoveFollowersFromGoalRequest', goalsRemoveFollowersFromGoalRequest)
            const localVarPath = `/goals/{goal_gid}/removeFollowers`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsRemoveFollowersFromGoalRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/removeFollowers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsRemoveFollowersFromGoalRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @summary Update a goal
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalsUpdateGoalRecordRequest} goalsUpdateGoalRecordRequest The updated fields for the goal.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalRecord: async (goalGid: string, goalsUpdateGoalRecordRequest: GoalsUpdateGoalRecordRequest, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('updateGoalRecord', 'goalGid', goalGid)
            // verify required parameter 'goalsUpdateGoalRecordRequest' is not null or undefined
            assertParamExists('updateGoalRecord', 'goalsUpdateGoalRecordRequest', goalsUpdateGoalRecordRequest)
            const localVarPath = `/goals/{goal_gid}`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsUpdateGoalRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsUpdateGoalRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @summary Update a goal metric
         * @param {string} goalGid Globally unique identifier for the goal.
         * @param {GoalsUpdateMetricCurrentValueRequest} goalsUpdateMetricCurrentValueRequest The updated fields for the goal metric.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetricCurrentValue: async (goalGid: string, goalsUpdateMetricCurrentValueRequest: GoalsUpdateMetricCurrentValueRequest, optPretty?: boolean, optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'goalGid' is not null or undefined
            assertParamExists('updateMetricCurrentValue', 'goalGid', goalGid)
            // verify required parameter 'goalsUpdateMetricCurrentValueRequest' is not null or undefined
            assertParamExists('updateMetricCurrentValue', 'goalsUpdateMetricCurrentValueRequest', goalsUpdateMetricCurrentValueRequest)
            const localVarPath = `/goals/{goal_gid}/setMetricCurrentValue`
                .replace(`{${"goal_gid"}}`, encodeURIComponent(String(goalGid !== undefined ? goalGid : `-goal_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsUpdateMetricCurrentValueRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/goals/{goal_gid}/setMetricCurrentValue',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsUpdateMetricCurrentValueRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Add a collaborator to a goal
         * @param {GoalsApiAddCollaboratorsToGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCollaboratorsToGoal(requestParameters: GoalsApiAddCollaboratorsToGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsAddCollaboratorsToGoalResponse>> {
            const goalsAddCollaboratorsToGoalRequest: GoalsAddCollaboratorsToGoalRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCollaboratorsToGoal(requestParameters.goalGid, goalsAddCollaboratorsToGoalRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @summary Create a goal metric
         * @param {GoalsApiCreateMetricRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMetric(requestParameters: GoalsApiCreateMetricRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsCreateMetricResponse>> {
            const goalsCreateMetricRequest: GoalsCreateMetricRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMetric(requestParameters.goalGid, goalsCreateMetricRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @summary Create a goal
         * @param {GoalsApiCreateNewGoalRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewGoalRecord(requestParameters: GoalsApiCreateNewGoalRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsCreateNewGoalRecordResponse>> {
            const goalsCreateNewGoalRecordRequest: GoalsCreateNewGoalRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewGoalRecord(goalsCreateNewGoalRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @summary Delete a goal
         * @param {GoalsApiDeleteRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecord(requestParameters: GoalsApiDeleteRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsDeleteRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecord(requestParameters.goalGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns compact goal records.
         * @summary Get goals
         * @param {GoalsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompactRecords(requestParameters: GoalsApiGetCompactRecordsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetCompactRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompactRecords(requestParameters.optPretty, requestParameters.portfolio, requestParameters.project, requestParameters.task, requestParameters.isWorkspaceLevel, requestParameters.team, requestParameters.workspace, requestParameters.timePeriods, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete goal record for a single goal.
         * @summary Get a goal
         * @param {GoalsApiGetGoalRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoalRecord(requestParameters: GoalsApiGetGoalRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetGoalRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoalRecord(requestParameters.goalGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a compact representation of all of the parent goals of a goal.
         * @summary Get parent goals from a goal
         * @param {GoalsApiGetParentGoalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParentGoals(requestParameters: GoalsApiGetParentGoalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetParentGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParentGoals(requestParameters.goalGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Remove a collaborator from a goal
         * @param {GoalsApiRemoveFollowersFromGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFollowersFromGoal(requestParameters: GoalsApiRemoveFollowersFromGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsRemoveFollowersFromGoalResponse>> {
            const goalsRemoveFollowersFromGoalRequest: GoalsRemoveFollowersFromGoalRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFollowersFromGoal(requestParameters.goalGid, goalsRemoveFollowersFromGoalRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @summary Update a goal
         * @param {GoalsApiUpdateGoalRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoalRecord(requestParameters: GoalsApiUpdateGoalRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsUpdateGoalRecordResponse>> {
            const goalsUpdateGoalRecordRequest: GoalsUpdateGoalRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoalRecord(requestParameters.goalGid, goalsUpdateGoalRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @summary Update a goal metric
         * @param {GoalsApiUpdateMetricCurrentValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetricCurrentValue(requestParameters: GoalsApiUpdateMetricCurrentValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsUpdateMetricCurrentValueResponse>> {
            const goalsUpdateMetricCurrentValueRequest: GoalsUpdateMetricCurrentValueRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetricCurrentValue(requestParameters.goalGid, goalsUpdateMetricCurrentValueRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Add a collaborator to a goal
         * @param {GoalsApiAddCollaboratorsToGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollaboratorsToGoal(requestParameters: GoalsApiAddCollaboratorsToGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsAddCollaboratorsToGoalResponse> {
            return localVarFp.addCollaboratorsToGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
         * @summary Create a goal metric
         * @param {GoalsApiCreateMetricRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMetric(requestParameters: GoalsApiCreateMetricRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsCreateMetricResponse> {
            return localVarFp.createMetric(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
         * @summary Create a goal
         * @param {GoalsApiCreateNewGoalRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewGoalRecord(requestParameters: GoalsApiCreateNewGoalRecordRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsCreateNewGoalRecordResponse> {
            return localVarFp.createNewGoalRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
         * @summary Delete a goal
         * @param {GoalsApiDeleteRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord(requestParameters: GoalsApiDeleteRecordRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsDeleteRecordResponse> {
            return localVarFp.deleteRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns compact goal records.
         * @summary Get goals
         * @param {GoalsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords(requestParameters: GoalsApiGetCompactRecordsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GoalsGetCompactRecordsResponse> {
            return localVarFp.getCompactRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete goal record for a single goal.
         * @summary Get a goal
         * @param {GoalsApiGetGoalRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalRecord(requestParameters: GoalsApiGetGoalRecordRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsGetGoalRecordResponse> {
            return localVarFp.getGoalRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a compact representation of all of the parent goals of a goal.
         * @summary Get parent goals from a goal
         * @param {GoalsApiGetParentGoalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentGoals(requestParameters: GoalsApiGetParentGoalsRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsGetParentGoalsResponse> {
            return localVarFp.getParentGoals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
         * @summary Remove a collaborator from a goal
         * @param {GoalsApiRemoveFollowersFromGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFollowersFromGoal(requestParameters: GoalsApiRemoveFollowersFromGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsRemoveFollowersFromGoalResponse> {
            return localVarFp.removeFollowersFromGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
         * @summary Update a goal
         * @param {GoalsApiUpdateGoalRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalRecord(requestParameters: GoalsApiUpdateGoalRecordRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsUpdateGoalRecordResponse> {
            return localVarFp.updateGoalRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
         * @summary Update a goal metric
         * @param {GoalsApiUpdateMetricCurrentValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetricCurrentValue(requestParameters: GoalsApiUpdateMetricCurrentValueRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsUpdateMetricCurrentValueResponse> {
            return localVarFp.updateMetricCurrentValue(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCollaboratorsToGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiAddCollaboratorsToGoalRequest
 */
export type GoalsApiAddCollaboratorsToGoalRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiAddCollaboratorsToGoal
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiAddCollaboratorsToGoal
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiAddCollaboratorsToGoal
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
} & GoalsAddCollaboratorsToGoalRequest

/**
 * Request parameters for createMetric operation in GoalsApi.
 * @export
 * @interface GoalsApiCreateMetricRequest
 */
export type GoalsApiCreateMetricRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiCreateMetric
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiCreateMetric
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiCreateMetric
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
} & GoalsCreateMetricRequest

/**
 * Request parameters for createNewGoalRecord operation in GoalsApi.
 * @export
 * @interface GoalsApiCreateNewGoalRecordRequest
 */
export type GoalsApiCreateNewGoalRecordRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiCreateNewGoalRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiCreateNewGoalRecord
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
} & GoalsCreateNewGoalRecordRequest

/**
 * Request parameters for deleteRecord operation in GoalsApi.
 * @export
 * @interface GoalsApiDeleteRecordRequest
 */
export type GoalsApiDeleteRecordRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiDeleteRecord
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiDeleteRecord
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getCompactRecords operation in GoalsApi.
 * @export
 * @interface GoalsApiGetCompactRecordsRequest
 */
export type GoalsApiGetCompactRecordsRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly optPretty?: boolean
    
    /**
    * Globally unique identifier for supporting portfolio.
    * @type {string}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly portfolio?: string
    
    /**
    * Globally unique identifier for supporting project.
    * @type {string}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly project?: string
    
    /**
    * Globally unique identifier for supporting task.
    * @type {string}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly task?: string
    
    /**
    * Filter to goals with is_workspace_level set to query value. Must be used with the workspace parameter.
    * @type {boolean}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly isWorkspaceLevel?: boolean
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly team?: string
    
    /**
    * Globally unique identifier for the workspace.
    * @type {string}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly workspace?: string
    
    /**
    * Globally unique identifiers for the time periods.
    * @type {Array<string>}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly timePeriods?: Array<string>
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiGetCompactRecords
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'offset' | 'owner' | 'owner.name' | 'path' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getGoalRecord operation in GoalsApi.
 * @export
 * @interface GoalsApiGetGoalRecordRequest
 */
export type GoalsApiGetGoalRecordRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiGetGoalRecord
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiGetGoalRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiGetGoalRecord
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getParentGoals operation in GoalsApi.
 * @export
 * @interface GoalsApiGetParentGoalsRequest
 */
export type GoalsApiGetParentGoalsRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiGetParentGoals
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiGetParentGoals
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiGetParentGoals
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for removeFollowersFromGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiRemoveFollowersFromGoalRequest
 */
export type GoalsApiRemoveFollowersFromGoalRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiRemoveFollowersFromGoal
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiRemoveFollowersFromGoal
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiRemoveFollowersFromGoal
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
} & GoalsRemoveFollowersFromGoalRequest

/**
 * Request parameters for updateGoalRecord operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateGoalRecordRequest
 */
export type GoalsApiUpdateGoalRecordRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiUpdateGoalRecord
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiUpdateGoalRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiUpdateGoalRecord
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
} & GoalsUpdateGoalRecordRequest

/**
 * Request parameters for updateMetricCurrentValue operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateMetricCurrentValueRequest
 */
export type GoalsApiUpdateMetricCurrentValueRequest = {
    
    /**
    * Globally unique identifier for the goal.
    * @type {string}
    * @memberof GoalsApiUpdateMetricCurrentValue
    */
    readonly goalGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof GoalsApiUpdateMetricCurrentValue
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>}
    * @memberof GoalsApiUpdateMetricCurrentValue
    */
    readonly optFields?: Array<'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'is_workspace_level' | 'liked' | 'likes' | 'likes.user' | 'likes.user.name' | 'metric' | 'metric.can_manage' | 'metric.currency_code' | 'metric.current_display_value' | 'metric.current_number_value' | 'metric.initial_number_value' | 'metric.precision' | 'metric.progress_source' | 'metric.resource_subtype' | 'metric.target_number_value' | 'metric.unit' | 'name' | 'notes' | 'num_likes' | 'owner' | 'owner.name' | 'start_on' | 'status' | 'team' | 'team.name' | 'time_period' | 'time_period.display_name' | 'time_period.end_on' | 'time_period.period' | 'time_period.start_on' | 'workspace' | 'workspace.name'>
    
} & GoalsUpdateMetricCurrentValueRequest

/**
 * GoalsApiGenerated - object-oriented interface
 * @export
 * @class GoalsApiGenerated
 * @extends {BaseAPI}
 */
export class GoalsApiGenerated extends BaseAPI {
    /**
     * Adds followers to a goal. Returns the goal the followers were added to. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @summary Add a collaborator to a goal
     * @param {GoalsApiAddCollaboratorsToGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public addCollaboratorsToGoal(requestParameters: GoalsApiAddCollaboratorsToGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).addCollaboratorsToGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates and adds a goal metric to a specified goal. Note that this replaces an existing goal metric if one already exists.
     * @summary Create a goal metric
     * @param {GoalsApiCreateMetricRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public createMetric(requestParameters: GoalsApiCreateMetricRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createMetric(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new goal in a workspace or team.  Returns the full record of the newly created goal.
     * @summary Create a goal
     * @param {GoalsApiCreateNewGoalRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public createNewGoalRecord(requestParameters: GoalsApiCreateNewGoalRecordRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createNewGoalRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing goal can be deleted by making a DELETE request on the URL for that goal.  Returns an empty data record.
     * @summary Delete a goal
     * @param {GoalsApiDeleteRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public deleteRecord(requestParameters: GoalsApiDeleteRecordRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).deleteRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns compact goal records.
     * @summary Get goals
     * @param {GoalsApiGetCompactRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getCompactRecords(requestParameters: GoalsApiGetCompactRecordsRequest = {}, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getCompactRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete goal record for a single goal.
     * @summary Get a goal
     * @param {GoalsApiGetGoalRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getGoalRecord(requestParameters: GoalsApiGetGoalRecordRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getGoalRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a compact representation of all of the parent goals of a goal.
     * @summary Get parent goals from a goal
     * @param {GoalsApiGetParentGoalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getParentGoals(requestParameters: GoalsApiGetParentGoalsRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getParentGoals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes followers from a goal. Returns the goal the followers were removed from. Each goal can be associated with zero or more followers in the system. Requests to add/remove followers, if successful, will return the complete updated goal record, described above.
     * @summary Remove a collaborator from a goal
     * @param {GoalsApiRemoveFollowersFromGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public removeFollowersFromGoal(requestParameters: GoalsApiRemoveFollowersFromGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).removeFollowersFromGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing goal can be updated by making a PUT request on the URL for that goal. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated goal record.
     * @summary Update a goal
     * @param {GoalsApiUpdateGoalRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateGoalRecord(requestParameters: GoalsApiUpdateGoalRecordRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateGoalRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a goal\'s existing metric\'s `current_number_value` if one exists, otherwise responds with a 400 status code.  Returns the complete updated goal metric record.
     * @summary Update a goal metric
     * @param {GoalsApiUpdateMetricCurrentValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateMetricCurrentValue(requestParameters: GoalsApiUpdateMetricCurrentValueRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateMetricCurrentValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
