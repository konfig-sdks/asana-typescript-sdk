/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddCustomFieldSettingRequest } from '../models';
// @ts-ignore
import { AddMembersRequest } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PortfolioAddItemRequest } from '../models';
// @ts-ignore
import { PortfolioRemoveItemRequest } from '../models';
// @ts-ignore
import { PortfolioRequest } from '../models';
// @ts-ignore
import { PortfoliosAddCustomFieldSettingRequest } from '../models';
// @ts-ignore
import { PortfoliosAddCustomFieldSettingResponse } from '../models';
// @ts-ignore
import { PortfoliosAddMembersToPortfolioRequest } from '../models';
// @ts-ignore
import { PortfoliosAddMembersToPortfolioResponse } from '../models';
// @ts-ignore
import { PortfoliosAddPortfolioItemRequest } from '../models';
// @ts-ignore
import { PortfoliosAddPortfolioItemResponse } from '../models';
// @ts-ignore
import { PortfoliosCreateNewPortfolioRecordRequest } from '../models';
// @ts-ignore
import { PortfoliosCreateNewPortfolioRecordResponse } from '../models';
// @ts-ignore
import { PortfoliosDeleteRecordResponse } from '../models';
// @ts-ignore
import { PortfoliosGetItemsResponse } from '../models';
// @ts-ignore
import { PortfoliosGetRecordResponse } from '../models';
// @ts-ignore
import { PortfoliosListMultiplePortfoliosResponse } from '../models';
// @ts-ignore
import { PortfoliosRemoveCustomFieldSettingRequest } from '../models';
// @ts-ignore
import { PortfoliosRemoveCustomFieldSettingResponse } from '../models';
// @ts-ignore
import { PortfoliosRemoveItemFromPortfolioRequest } from '../models';
// @ts-ignore
import { PortfoliosRemoveItemFromPortfolioResponse } from '../models';
// @ts-ignore
import { PortfoliosRemoveMembersFromPortfolioRequest } from '../models';
// @ts-ignore
import { PortfoliosRemoveMembersFromPortfolioResponse } from '../models';
// @ts-ignore
import { PortfoliosUpdatePortfolioRecordRequest } from '../models';
// @ts-ignore
import { PortfoliosUpdatePortfolioRecordResponse } from '../models';
// @ts-ignore
import { RemoveCustomFieldSettingRequest } from '../models';
// @ts-ignore
import { RemoveMembersRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PortfoliosApi - axios parameter creator
 * @export
 */
export const PortfoliosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
         * @summary Add a custom field to a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosAddCustomFieldSettingRequest} portfoliosAddCustomFieldSettingRequest Information about the custom field setting.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomFieldSetting: async (portfolioGid: string, portfoliosAddCustomFieldSettingRequest: PortfoliosAddCustomFieldSettingRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('addCustomFieldSetting', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosAddCustomFieldSettingRequest' is not null or undefined
            assertParamExists('addCustomFieldSetting', 'portfoliosAddCustomFieldSettingRequest', portfoliosAddCustomFieldSettingRequest)
            const localVarPath = `/portfolios/{portfolio_gid}/addCustomFieldSetting`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosAddCustomFieldSettingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/addCustomFieldSetting',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosAddCustomFieldSettingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
         * @summary Add users to a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosAddMembersToPortfolioRequest} portfoliosAddMembersToPortfolioRequest Information about the members being added.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersToPortfolio: async (portfolioGid: string, portfoliosAddMembersToPortfolioRequest: PortfoliosAddMembersToPortfolioRequest, optPretty?: boolean, optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('addMembersToPortfolio', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosAddMembersToPortfolioRequest' is not null or undefined
            assertParamExists('addMembersToPortfolio', 'portfoliosAddMembersToPortfolioRequest', portfoliosAddMembersToPortfolioRequest)
            const localVarPath = `/portfolios/{portfolio_gid}/addMembers`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosAddMembersToPortfolioRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/addMembers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosAddMembersToPortfolioRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an item to a portfolio. Returns an empty data block.
         * @summary Add a portfolio item
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosAddPortfolioItemRequest} portfoliosAddPortfolioItemRequest Information about the item being inserted.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPortfolioItem: async (portfolioGid: string, portfoliosAddPortfolioItemRequest: PortfoliosAddPortfolioItemRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('addPortfolioItem', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosAddPortfolioItemRequest' is not null or undefined
            assertParamExists('addPortfolioItem', 'portfoliosAddPortfolioItemRequest', portfoliosAddPortfolioItemRequest)
            const localVarPath = `/portfolios/{portfolio_gid}/addItem`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosAddPortfolioItemRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/addItem',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosAddPortfolioItemRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
         * @summary Create a portfolio
         * @param {PortfoliosCreateNewPortfolioRecordRequest} portfoliosCreateNewPortfolioRecordRequest The portfolio to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPortfolioRecord: async (portfoliosCreateNewPortfolioRecordRequest: PortfoliosCreateNewPortfolioRecordRequest, optPretty?: boolean, optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfoliosCreateNewPortfolioRecordRequest' is not null or undefined
            assertParamExists('createNewPortfolioRecord', 'portfoliosCreateNewPortfolioRecordRequest', portfoliosCreateNewPortfolioRecordRequest)
            const localVarPath = `/portfolios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosCreateNewPortfolioRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosCreateNewPortfolioRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
         * @summary Delete a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord: async (portfolioGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('deleteRecord', 'portfolioGid', portfolioGid)
            const localVarPath = `/portfolios/{portfolio_gid}`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the items in compact form in a portfolio.
         * @summary Get portfolio items
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'archived' | 'color' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_from_template' | 'created_from_template.name' | 'current_status' | 'current_status.author' | 'current_status.author.name' | 'current_status.color' | 'current_status.created_at' | 'current_status.created_by' | 'current_status.created_by.name' | 'current_status.html_text' | 'current_status.modified_at' | 'current_status.text' | 'current_status.title' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'default_access_level' | 'default_view' | 'due_date' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'icon' | 'members' | 'members.name' | 'minimum_access_level_for_customization' | 'minimum_access_level_for_sharing' | 'modified_at' | 'name' | 'notes' | 'offset' | 'owner' | 'path' | 'permalink_url' | 'privacy_setting' | 'project_brief' | 'public' | 'start_on' | 'team' | 'team.name' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems: async (portfolioGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'archived' | 'color' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_from_template' | 'created_from_template.name' | 'current_status' | 'current_status.author' | 'current_status.author.name' | 'current_status.color' | 'current_status.created_at' | 'current_status.created_by' | 'current_status.created_by.name' | 'current_status.html_text' | 'current_status.modified_at' | 'current_status.text' | 'current_status.title' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'default_access_level' | 'default_view' | 'due_date' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'icon' | 'members' | 'members.name' | 'minimum_access_level_for_customization' | 'minimum_access_level_for_sharing' | 'modified_at' | 'name' | 'notes' | 'offset' | 'owner' | 'path' | 'permalink_url' | 'privacy_setting' | 'project_brief' | 'public' | 'start_on' | 'team' | 'team.name' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('getItems', 'portfolioGid', portfolioGid)
            const localVarPath = `/portfolios/{portfolio_gid}/items`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete portfolio record for a single portfolio.
         * @summary Get a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (portfolioGid: string, optPretty?: boolean, optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('getRecord', 'portfolioGid', portfolioGid)
            const localVarPath = `/portfolios/{portfolio_gid}`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the portfolios in compact representation that are owned by the current API user.
         * @summary Get multiple portfolios
         * @param {string} workspace The workspace or organization to filter portfolios on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [owner] The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned.
         * @param {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'offset' | 'owner' | 'owner.name' | 'path' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'uri' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultiplePortfolios: async (workspace: string, optPretty?: boolean, limit?: number, offset?: string, owner?: string, optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'offset' | 'owner' | 'owner.name' | 'path' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'uri' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            assertParamExists('listMultiplePortfolios', 'workspace', workspace)
            const localVarPath = `/portfolios`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes a custom field setting from a portfolio.
         * @summary Remove a custom field from a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosRemoveCustomFieldSettingRequest} portfoliosRemoveCustomFieldSettingRequest Information about the custom field setting being removed.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomFieldSetting: async (portfolioGid: string, portfoliosRemoveCustomFieldSettingRequest: PortfoliosRemoveCustomFieldSettingRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('removeCustomFieldSetting', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosRemoveCustomFieldSettingRequest' is not null or undefined
            assertParamExists('removeCustomFieldSetting', 'portfoliosRemoveCustomFieldSettingRequest', portfoliosRemoveCustomFieldSettingRequest)
            const localVarPath = `/portfolios/{portfolio_gid}/removeCustomFieldSetting`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosRemoveCustomFieldSettingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/removeCustomFieldSetting',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosRemoveCustomFieldSettingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an item from a portfolio. Returns an empty data block.
         * @summary Remove a portfolio item
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosRemoveItemFromPortfolioRequest} portfoliosRemoveItemFromPortfolioRequest Information about the item being removed.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromPortfolio: async (portfolioGid: string, portfoliosRemoveItemFromPortfolioRequest: PortfoliosRemoveItemFromPortfolioRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('removeItemFromPortfolio', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosRemoveItemFromPortfolioRequest' is not null or undefined
            assertParamExists('removeItemFromPortfolio', 'portfoliosRemoveItemFromPortfolioRequest', portfoliosRemoveItemFromPortfolioRequest)
            const localVarPath = `/portfolios/{portfolio_gid}/removeItem`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosRemoveItemFromPortfolioRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/removeItem',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosRemoveItemFromPortfolioRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
         * @summary Remove users from a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosRemoveMembersFromPortfolioRequest} portfoliosRemoveMembersFromPortfolioRequest Information about the members being removed.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembersFromPortfolio: async (portfolioGid: string, portfoliosRemoveMembersFromPortfolioRequest: PortfoliosRemoveMembersFromPortfolioRequest, optPretty?: boolean, optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('removeMembersFromPortfolio', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosRemoveMembersFromPortfolioRequest' is not null or undefined
            assertParamExists('removeMembersFromPortfolio', 'portfoliosRemoveMembersFromPortfolioRequest', portfoliosRemoveMembersFromPortfolioRequest)
            const localVarPath = `/portfolios/{portfolio_gid}/removeMembers`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosRemoveMembersFromPortfolioRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}/removeMembers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosRemoveMembersFromPortfolioRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
         * @summary Update a portfolio
         * @param {string} portfolioGid Globally unique identifier for the portfolio.
         * @param {PortfoliosUpdatePortfolioRecordRequest} portfoliosUpdatePortfolioRecordRequest The updated fields for the portfolio.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortfolioRecord: async (portfolioGid: string, portfoliosUpdatePortfolioRecordRequest: PortfoliosUpdatePortfolioRecordRequest, optPretty?: boolean, optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'portfolioGid' is not null or undefined
            assertParamExists('updatePortfolioRecord', 'portfolioGid', portfolioGid)
            // verify required parameter 'portfoliosUpdatePortfolioRecordRequest' is not null or undefined
            assertParamExists('updatePortfolioRecord', 'portfoliosUpdatePortfolioRecordRequest', portfoliosUpdatePortfolioRecordRequest)
            const localVarPath = `/portfolios/{portfolio_gid}`
                .replace(`{${"portfolio_gid"}}`, encodeURIComponent(String(portfolioGid !== undefined ? portfolioGid : `-portfolio_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: portfoliosUpdatePortfolioRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/portfolios/{portfolio_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(portfoliosUpdatePortfolioRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfoliosApi - functional programming interface
 * @export
 */
export const PortfoliosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortfoliosApiAxiosParamCreator(configuration)
    return {
        /**
         * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
         * @summary Add a custom field to a portfolio
         * @param {PortfoliosApiAddCustomFieldSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomFieldSetting(requestParameters: PortfoliosApiAddCustomFieldSettingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosAddCustomFieldSettingResponse>> {
            const portfoliosAddCustomFieldSettingRequest: PortfoliosAddCustomFieldSettingRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomFieldSetting(requestParameters.portfolioGid, portfoliosAddCustomFieldSettingRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
         * @summary Add users to a portfolio
         * @param {PortfoliosApiAddMembersToPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMembersToPortfolio(requestParameters: PortfoliosApiAddMembersToPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosAddMembersToPortfolioResponse>> {
            const portfoliosAddMembersToPortfolioRequest: PortfoliosAddMembersToPortfolioRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMembersToPortfolio(requestParameters.portfolioGid, portfoliosAddMembersToPortfolioRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an item to a portfolio. Returns an empty data block.
         * @summary Add a portfolio item
         * @param {PortfoliosApiAddPortfolioItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPortfolioItem(requestParameters: PortfoliosApiAddPortfolioItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosAddPortfolioItemResponse>> {
            const portfoliosAddPortfolioItemRequest: PortfoliosAddPortfolioItemRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPortfolioItem(requestParameters.portfolioGid, portfoliosAddPortfolioItemRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
         * @summary Create a portfolio
         * @param {PortfoliosApiCreateNewPortfolioRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewPortfolioRecord(requestParameters: PortfoliosApiCreateNewPortfolioRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosCreateNewPortfolioRecordResponse>> {
            const portfoliosCreateNewPortfolioRecordRequest: PortfoliosCreateNewPortfolioRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewPortfolioRecord(portfoliosCreateNewPortfolioRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
         * @summary Delete a portfolio
         * @param {PortfoliosApiDeleteRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecord(requestParameters: PortfoliosApiDeleteRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosDeleteRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecord(requestParameters.portfolioGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of the items in compact form in a portfolio.
         * @summary Get portfolio items
         * @param {PortfoliosApiGetItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItems(requestParameters: PortfoliosApiGetItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosGetItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItems(requestParameters.portfolioGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete portfolio record for a single portfolio.
         * @summary Get a portfolio
         * @param {PortfoliosApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: PortfoliosApiGetRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.portfolioGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the portfolios in compact representation that are owned by the current API user.
         * @summary Get multiple portfolios
         * @param {PortfoliosApiListMultiplePortfoliosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMultiplePortfolios(requestParameters: PortfoliosApiListMultiplePortfoliosRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosListMultiplePortfoliosResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMultiplePortfolios(requestParameters.workspace, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.owner, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes a custom field setting from a portfolio.
         * @summary Remove a custom field from a portfolio
         * @param {PortfoliosApiRemoveCustomFieldSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeCustomFieldSetting(requestParameters: PortfoliosApiRemoveCustomFieldSettingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosRemoveCustomFieldSettingResponse>> {
            const portfoliosRemoveCustomFieldSettingRequest: PortfoliosRemoveCustomFieldSettingRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeCustomFieldSetting(requestParameters.portfolioGid, portfoliosRemoveCustomFieldSettingRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove an item from a portfolio. Returns an empty data block.
         * @summary Remove a portfolio item
         * @param {PortfoliosApiRemoveItemFromPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeItemFromPortfolio(requestParameters: PortfoliosApiRemoveItemFromPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosRemoveItemFromPortfolioResponse>> {
            const portfoliosRemoveItemFromPortfolioRequest: PortfoliosRemoveItemFromPortfolioRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeItemFromPortfolio(requestParameters.portfolioGid, portfoliosRemoveItemFromPortfolioRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
         * @summary Remove users from a portfolio
         * @param {PortfoliosApiRemoveMembersFromPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMembersFromPortfolio(requestParameters: PortfoliosApiRemoveMembersFromPortfolioRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosRemoveMembersFromPortfolioResponse>> {
            const portfoliosRemoveMembersFromPortfolioRequest: PortfoliosRemoveMembersFromPortfolioRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMembersFromPortfolio(requestParameters.portfolioGid, portfoliosRemoveMembersFromPortfolioRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
         * @summary Update a portfolio
         * @param {PortfoliosApiUpdatePortfolioRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePortfolioRecord(requestParameters: PortfoliosApiUpdatePortfolioRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortfoliosUpdatePortfolioRecordResponse>> {
            const portfoliosUpdatePortfolioRecordRequest: PortfoliosUpdatePortfolioRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePortfolioRecord(requestParameters.portfolioGid, portfoliosUpdatePortfolioRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PortfoliosApi - factory interface
 * @export
 */
export const PortfoliosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortfoliosApiFp(configuration)
    return {
        /**
         * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
         * @summary Add a custom field to a portfolio
         * @param {PortfoliosApiAddCustomFieldSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomFieldSetting(requestParameters: PortfoliosApiAddCustomFieldSettingRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosAddCustomFieldSettingResponse> {
            return localVarFp.addCustomFieldSetting(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
         * @summary Add users to a portfolio
         * @param {PortfoliosApiAddMembersToPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMembersToPortfolio(requestParameters: PortfoliosApiAddMembersToPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosAddMembersToPortfolioResponse> {
            return localVarFp.addMembersToPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an item to a portfolio. Returns an empty data block.
         * @summary Add a portfolio item
         * @param {PortfoliosApiAddPortfolioItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPortfolioItem(requestParameters: PortfoliosApiAddPortfolioItemRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosAddPortfolioItemResponse> {
            return localVarFp.addPortfolioItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
         * @summary Create a portfolio
         * @param {PortfoliosApiCreateNewPortfolioRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewPortfolioRecord(requestParameters: PortfoliosApiCreateNewPortfolioRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosCreateNewPortfolioRecordResponse> {
            return localVarFp.createNewPortfolioRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
         * @summary Delete a portfolio
         * @param {PortfoliosApiDeleteRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecord(requestParameters: PortfoliosApiDeleteRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosDeleteRecordResponse> {
            return localVarFp.deleteRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the items in compact form in a portfolio.
         * @summary Get portfolio items
         * @param {PortfoliosApiGetItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItems(requestParameters: PortfoliosApiGetItemsRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosGetItemsResponse> {
            return localVarFp.getItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete portfolio record for a single portfolio.
         * @summary Get a portfolio
         * @param {PortfoliosApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: PortfoliosApiGetRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the portfolios in compact representation that are owned by the current API user.
         * @summary Get multiple portfolios
         * @param {PortfoliosApiListMultiplePortfoliosRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMultiplePortfolios(requestParameters: PortfoliosApiListMultiplePortfoliosRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosListMultiplePortfoliosResponse> {
            return localVarFp.listMultiplePortfolios(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes a custom field setting from a portfolio.
         * @summary Remove a custom field from a portfolio
         * @param {PortfoliosApiRemoveCustomFieldSettingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeCustomFieldSetting(requestParameters: PortfoliosApiRemoveCustomFieldSettingRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosRemoveCustomFieldSettingResponse> {
            return localVarFp.removeCustomFieldSetting(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an item from a portfolio. Returns an empty data block.
         * @summary Remove a portfolio item
         * @param {PortfoliosApiRemoveItemFromPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeItemFromPortfolio(requestParameters: PortfoliosApiRemoveItemFromPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosRemoveItemFromPortfolioResponse> {
            return localVarFp.removeItemFromPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
         * @summary Remove users from a portfolio
         * @param {PortfoliosApiRemoveMembersFromPortfolioRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMembersFromPortfolio(requestParameters: PortfoliosApiRemoveMembersFromPortfolioRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosRemoveMembersFromPortfolioResponse> {
            return localVarFp.removeMembersFromPortfolio(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
         * @summary Update a portfolio
         * @param {PortfoliosApiUpdatePortfolioRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortfolioRecord(requestParameters: PortfoliosApiUpdatePortfolioRecordRequest, options?: AxiosRequestConfig): AxiosPromise<PortfoliosUpdatePortfolioRecordResponse> {
            return localVarFp.updatePortfolioRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCustomFieldSetting operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiAddCustomFieldSettingRequest
 */
export type PortfoliosApiAddCustomFieldSettingRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiAddCustomFieldSetting
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiAddCustomFieldSetting
    */
    readonly optPretty?: boolean
    
} & PortfoliosAddCustomFieldSettingRequest

/**
 * Request parameters for addMembersToPortfolio operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiAddMembersToPortfolioRequest
 */
export type PortfoliosApiAddMembersToPortfolioRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiAddMembersToPortfolio
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiAddMembersToPortfolio
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiAddMembersToPortfolio
    */
    readonly optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>
    
} & PortfoliosAddMembersToPortfolioRequest

/**
 * Request parameters for addPortfolioItem operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiAddPortfolioItemRequest
 */
export type PortfoliosApiAddPortfolioItemRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiAddPortfolioItem
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiAddPortfolioItem
    */
    readonly optPretty?: boolean
    
} & PortfoliosAddPortfolioItemRequest

/**
 * Request parameters for createNewPortfolioRecord operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiCreateNewPortfolioRecordRequest
 */
export type PortfoliosApiCreateNewPortfolioRecordRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiCreateNewPortfolioRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiCreateNewPortfolioRecord
    */
    readonly optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>
    
} & PortfoliosCreateNewPortfolioRecordRequest

/**
 * Request parameters for deleteRecord operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiDeleteRecordRequest
 */
export type PortfoliosApiDeleteRecordRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiDeleteRecord
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiDeleteRecord
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getItems operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiGetItemsRequest
 */
export type PortfoliosApiGetItemsRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiGetItems
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiGetItems
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof PortfoliosApiGetItems
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof PortfoliosApiGetItems
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'archived' | 'color' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_from_template' | 'created_from_template.name' | 'current_status' | 'current_status.author' | 'current_status.author.name' | 'current_status.color' | 'current_status.created_at' | 'current_status.created_by' | 'current_status.created_by.name' | 'current_status.html_text' | 'current_status.modified_at' | 'current_status.text' | 'current_status.title' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'default_access_level' | 'default_view' | 'due_date' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'icon' | 'members' | 'members.name' | 'minimum_access_level_for_customization' | 'minimum_access_level_for_sharing' | 'modified_at' | 'name' | 'notes' | 'offset' | 'owner' | 'path' | 'permalink_url' | 'privacy_setting' | 'project_brief' | 'public' | 'start_on' | 'team' | 'team.name' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiGetItems
    */
    readonly optFields?: Array<'archived' | 'color' | 'completed' | 'completed_at' | 'completed_by' | 'completed_by.name' | 'created_at' | 'created_from_template' | 'created_from_template.name' | 'current_status' | 'current_status.author' | 'current_status.author.name' | 'current_status.color' | 'current_status.created_at' | 'current_status.created_by' | 'current_status.created_by.name' | 'current_status.html_text' | 'current_status.modified_at' | 'current_status.text' | 'current_status.title' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'default_access_level' | 'default_view' | 'due_date' | 'due_on' | 'followers' | 'followers.name' | 'html_notes' | 'icon' | 'members' | 'members.name' | 'minimum_access_level_for_customization' | 'minimum_access_level_for_sharing' | 'modified_at' | 'name' | 'notes' | 'offset' | 'owner' | 'path' | 'permalink_url' | 'privacy_setting' | 'project_brief' | 'public' | 'start_on' | 'team' | 'team.name' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for getRecord operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiGetRecordRequest
 */
export type PortfoliosApiGetRecordRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiGetRecord
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiGetRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiGetRecord
    */
    readonly optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for listMultiplePortfolios operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiListMultiplePortfoliosRequest
 */
export type PortfoliosApiListMultiplePortfoliosRequest = {
    
    /**
    * The workspace or organization to filter portfolios on.
    * @type {string}
    * @memberof PortfoliosApiListMultiplePortfolios
    */
    readonly workspace: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiListMultiplePortfolios
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof PortfoliosApiListMultiplePortfolios
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof PortfoliosApiListMultiplePortfolios
    */
    readonly offset?: string
    
    /**
    * The user who owns the portfolio. Currently, API users can only get a list of portfolios that they themselves own, unless the request is made from a Service Account. In the case of a Service Account, if this parameter is specified, then all portfolios owned by this parameter are returned. Otherwise, all portfolios across the workspace are returned.
    * @type {string}
    * @memberof PortfoliosApiListMultiplePortfolios
    */
    readonly owner?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'offset' | 'owner' | 'owner.name' | 'path' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'uri' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiListMultiplePortfolios
    */
    readonly optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'offset' | 'owner' | 'owner.name' | 'path' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'uri' | 'workspace' | 'workspace.name'>
    
}

/**
 * Request parameters for removeCustomFieldSetting operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiRemoveCustomFieldSettingRequest
 */
export type PortfoliosApiRemoveCustomFieldSettingRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiRemoveCustomFieldSetting
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiRemoveCustomFieldSetting
    */
    readonly optPretty?: boolean
    
} & PortfoliosRemoveCustomFieldSettingRequest

/**
 * Request parameters for removeItemFromPortfolio operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiRemoveItemFromPortfolioRequest
 */
export type PortfoliosApiRemoveItemFromPortfolioRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiRemoveItemFromPortfolio
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiRemoveItemFromPortfolio
    */
    readonly optPretty?: boolean
    
} & PortfoliosRemoveItemFromPortfolioRequest

/**
 * Request parameters for removeMembersFromPortfolio operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiRemoveMembersFromPortfolioRequest
 */
export type PortfoliosApiRemoveMembersFromPortfolioRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiRemoveMembersFromPortfolio
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiRemoveMembersFromPortfolio
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiRemoveMembersFromPortfolio
    */
    readonly optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>
    
} & PortfoliosRemoveMembersFromPortfolioRequest

/**
 * Request parameters for updatePortfolioRecord operation in PortfoliosApi.
 * @export
 * @interface PortfoliosApiUpdatePortfolioRecordRequest
 */
export type PortfoliosApiUpdatePortfolioRecordRequest = {
    
    /**
    * Globally unique identifier for the portfolio.
    * @type {string}
    * @memberof PortfoliosApiUpdatePortfolioRecord
    */
    readonly portfolioGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof PortfoliosApiUpdatePortfolioRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>}
    * @memberof PortfoliosApiUpdatePortfolioRecord
    */
    readonly optFields?: Array<'color' | 'created_at' | 'created_by' | 'created_by.name' | 'current_status_update' | 'current_status_update.resource_subtype' | 'current_status_update.title' | 'custom_field_settings' | 'custom_field_settings.custom_field' | 'custom_field_settings.custom_field.asana_created_field' | 'custom_field_settings.custom_field.created_by' | 'custom_field_settings.custom_field.created_by.name' | 'custom_field_settings.custom_field.currency_code' | 'custom_field_settings.custom_field.custom_label' | 'custom_field_settings.custom_field.custom_label_position' | 'custom_field_settings.custom_field.date_value' | 'custom_field_settings.custom_field.date_value.date' | 'custom_field_settings.custom_field.date_value.date_time' | 'custom_field_settings.custom_field.description' | 'custom_field_settings.custom_field.display_value' | 'custom_field_settings.custom_field.enabled' | 'custom_field_settings.custom_field.enum_options' | 'custom_field_settings.custom_field.enum_options.color' | 'custom_field_settings.custom_field.enum_options.enabled' | 'custom_field_settings.custom_field.enum_options.name' | 'custom_field_settings.custom_field.enum_value' | 'custom_field_settings.custom_field.enum_value.color' | 'custom_field_settings.custom_field.enum_value.enabled' | 'custom_field_settings.custom_field.enum_value.name' | 'custom_field_settings.custom_field.format' | 'custom_field_settings.custom_field.has_notifications_enabled' | 'custom_field_settings.custom_field.id_prefix' | 'custom_field_settings.custom_field.is_formula_field' | 'custom_field_settings.custom_field.is_global_to_workspace' | 'custom_field_settings.custom_field.is_value_read_only' | 'custom_field_settings.custom_field.multi_enum_values' | 'custom_field_settings.custom_field.multi_enum_values.color' | 'custom_field_settings.custom_field.multi_enum_values.enabled' | 'custom_field_settings.custom_field.multi_enum_values.name' | 'custom_field_settings.custom_field.name' | 'custom_field_settings.custom_field.number_value' | 'custom_field_settings.custom_field.people_value' | 'custom_field_settings.custom_field.people_value.name' | 'custom_field_settings.custom_field.precision' | 'custom_field_settings.custom_field.representation_type' | 'custom_field_settings.custom_field.resource_subtype' | 'custom_field_settings.custom_field.text_value' | 'custom_field_settings.custom_field.type' | 'custom_field_settings.is_important' | 'custom_field_settings.parent' | 'custom_field_settings.parent.name' | 'custom_field_settings.project' | 'custom_field_settings.project.name' | 'custom_fields' | 'custom_fields.date_value' | 'custom_fields.date_value.date' | 'custom_fields.date_value.date_time' | 'custom_fields.display_value' | 'custom_fields.enabled' | 'custom_fields.enum_options' | 'custom_fields.enum_options.color' | 'custom_fields.enum_options.enabled' | 'custom_fields.enum_options.name' | 'custom_fields.enum_value' | 'custom_fields.enum_value.color' | 'custom_fields.enum_value.enabled' | 'custom_fields.enum_value.name' | 'custom_fields.id_prefix' | 'custom_fields.is_formula_field' | 'custom_fields.multi_enum_values' | 'custom_fields.multi_enum_values.color' | 'custom_fields.multi_enum_values.enabled' | 'custom_fields.multi_enum_values.name' | 'custom_fields.name' | 'custom_fields.number_value' | 'custom_fields.representation_type' | 'custom_fields.resource_subtype' | 'custom_fields.text_value' | 'custom_fields.type' | 'due_on' | 'members' | 'members.name' | 'name' | 'owner' | 'owner.name' | 'permalink_url' | 'project_templates' | 'project_templates.name' | 'public' | 'start_on' | 'workspace' | 'workspace.name'>
    
} & PortfoliosUpdatePortfolioRecordRequest

/**
 * PortfoliosApiGenerated - object-oriented interface
 * @export
 * @class PortfoliosApiGenerated
 * @extends {BaseAPI}
 */
export class PortfoliosApiGenerated extends BaseAPI {
    /**
     * Custom fields are associated with portfolios by way of custom field settings.  This method creates a setting for the portfolio.
     * @summary Add a custom field to a portfolio
     * @param {PortfoliosApiAddCustomFieldSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public addCustomFieldSetting(requestParameters: PortfoliosApiAddCustomFieldSettingRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).addCustomFieldSetting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds the specified list of users as members of the portfolio. Returns the updated portfolio record.
     * @summary Add users to a portfolio
     * @param {PortfoliosApiAddMembersToPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public addMembersToPortfolio(requestParameters: PortfoliosApiAddMembersToPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).addMembersToPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an item to a portfolio. Returns an empty data block.
     * @summary Add a portfolio item
     * @param {PortfoliosApiAddPortfolioItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public addPortfolioItem(requestParameters: PortfoliosApiAddPortfolioItemRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).addPortfolioItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new portfolio in the given workspace with the supplied name.  Note that portfolios created in the Asana UI may have some state (like the “Priority” custom field) which is automatically added to the portfolio when it is created. Portfolios created via our API will *not* be created with the same initial state to allow integrations to create their own starting state on a portfolio.
     * @summary Create a portfolio
     * @param {PortfoliosApiCreateNewPortfolioRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public createNewPortfolioRecord(requestParameters: PortfoliosApiCreateNewPortfolioRecordRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).createNewPortfolioRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing portfolio can be deleted by making a DELETE request on the URL for that portfolio.  Returns an empty data record.
     * @summary Delete a portfolio
     * @param {PortfoliosApiDeleteRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public deleteRecord(requestParameters: PortfoliosApiDeleteRecordRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).deleteRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the items in compact form in a portfolio.
     * @summary Get portfolio items
     * @param {PortfoliosApiGetItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public getItems(requestParameters: PortfoliosApiGetItemsRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).getItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete portfolio record for a single portfolio.
     * @summary Get a portfolio
     * @param {PortfoliosApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public getRecord(requestParameters: PortfoliosApiGetRecordRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the portfolios in compact representation that are owned by the current API user.
     * @summary Get multiple portfolios
     * @param {PortfoliosApiListMultiplePortfoliosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public listMultiplePortfolios(requestParameters: PortfoliosApiListMultiplePortfoliosRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).listMultiplePortfolios(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes a custom field setting from a portfolio.
     * @summary Remove a custom field from a portfolio
     * @param {PortfoliosApiRemoveCustomFieldSettingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public removeCustomFieldSetting(requestParameters: PortfoliosApiRemoveCustomFieldSettingRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).removeCustomFieldSetting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an item from a portfolio. Returns an empty data block.
     * @summary Remove a portfolio item
     * @param {PortfoliosApiRemoveItemFromPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public removeItemFromPortfolio(requestParameters: PortfoliosApiRemoveItemFromPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).removeItemFromPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the specified list of users from members of the portfolio. Returns the updated portfolio record.
     * @summary Remove users from a portfolio
     * @param {PortfoliosApiRemoveMembersFromPortfolioRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public removeMembersFromPortfolio(requestParameters: PortfoliosApiRemoveMembersFromPortfolioRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).removeMembersFromPortfolio(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An existing portfolio can be updated by making a PUT request on the URL for that portfolio. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  Returns the complete updated portfolio record.
     * @summary Update a portfolio
     * @param {PortfoliosApiUpdatePortfolioRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiGenerated
     */
    public updatePortfolioRecord(requestParameters: PortfoliosApiUpdatePortfolioRecordRequest, options?: AxiosRequestConfig) {
        return PortfoliosApiFp(this.configuration).updatePortfolioRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
