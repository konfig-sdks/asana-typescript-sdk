/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { TeamMembershipsGetCompactRecordsResponse } from '../models';
// @ts-ignore
import { TeamMembershipsGetCompactResponse } from '../models';
// @ts-ignore
import { TeamMembershipsGetRecordByIdResponse } from '../models';
// @ts-ignore
import { TeamMembershipsGetUserCompactResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamMembershipsApi - axios parameter creator
 * @export
 */
export const TeamMembershipsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the compact team memberships for the team.
         * @summary Get memberships from a team
         * @param {string} teamGid Globally unique identifier for the team.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompact: async (teamGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamGid' is not null or undefined
            assertParamExists('getCompact', 'teamGid', teamGid)
            const localVarPath = `/teams/{team_gid}/team_memberships`
                .replace(`{${"team_gid"}}`, encodeURIComponent(String(teamGid !== undefined ? teamGid : `-team_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_gid}/team_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns compact team membership records.
         * @summary Get team memberships
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {string} [team] Globally unique identifier for the team.
         * @param {string} [user] A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user. This parameter must be used with the workspace parameter.
         * @param {string} [workspace] Globally unique identifier for the workspace. This parameter must be used with the user parameter.
         * @param {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords: async (optPretty?: boolean, limit?: number, offset?: string, team?: string, user?: string, workspace?: string, optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/team_memberships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (team !== undefined) {
                localVarQueryParameter['team'] = team;
            }

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete team membership record for a single team membership.
         * @summary Get a team membership
         * @param {string} teamMembershipGid 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById: async (teamMembershipGid: string, optPretty?: boolean, optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamMembershipGid' is not null or undefined
            assertParamExists('getRecordById', 'teamMembershipGid', teamMembershipGid)
            const localVarPath = `/team_memberships/{team_membership_gid}`
                .replace(`{${"team_membership_gid"}}`, encodeURIComponent(String(teamMembershipGid !== undefined ? teamMembershipGid : `-team_membership_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/team_memberships/{team_membership_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact team membership records for the user.
         * @summary Get memberships from a user
         * @param {string} userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {string} workspace Globally unique identifier for the workspace.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompact: async (userGid: string, workspace: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userGid' is not null or undefined
            assertParamExists('getUserCompact', 'userGid', userGid)
            // verify required parameter 'workspace' is not null or undefined
            assertParamExists('getUserCompact', 'workspace', workspace)
            const localVarPath = `/users/{user_gid}/team_memberships`
                .replace(`{${"user_gid"}}`, encodeURIComponent(String(userGid !== undefined ? userGid : `-user_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (workspace !== undefined) {
                localVarQueryParameter['workspace'] = workspace;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_gid}/team_memberships',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamMembershipsApi - functional programming interface
 * @export
 */
export const TeamMembershipsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamMembershipsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the compact team memberships for the team.
         * @summary Get memberships from a team
         * @param {TeamMembershipsApiGetCompactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompact(requestParameters: TeamMembershipsApiGetCompactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMembershipsGetCompactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompact(requestParameters.teamGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns compact team membership records.
         * @summary Get team memberships
         * @param {TeamMembershipsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompactRecords(requestParameters: TeamMembershipsApiGetCompactRecordsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMembershipsGetCompactRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompactRecords(requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.team, requestParameters.user, requestParameters.workspace, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete team membership record for a single team membership.
         * @summary Get a team membership
         * @param {TeamMembershipsApiGetRecordByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecordById(requestParameters: TeamMembershipsApiGetRecordByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMembershipsGetRecordByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecordById(requestParameters.teamMembershipGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact team membership records for the user.
         * @summary Get memberships from a user
         * @param {TeamMembershipsApiGetUserCompactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserCompact(requestParameters: TeamMembershipsApiGetUserCompactRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamMembershipsGetUserCompactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCompact(requestParameters.userGid, requestParameters.workspace, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamMembershipsApi - factory interface
 * @export
 */
export const TeamMembershipsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamMembershipsApiFp(configuration)
    return {
        /**
         * Returns the compact team memberships for the team.
         * @summary Get memberships from a team
         * @param {TeamMembershipsApiGetCompactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompact(requestParameters: TeamMembershipsApiGetCompactRequest, options?: AxiosRequestConfig): AxiosPromise<TeamMembershipsGetCompactResponse> {
            return localVarFp.getCompact(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns compact team membership records.
         * @summary Get team memberships
         * @param {TeamMembershipsApiGetCompactRecordsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompactRecords(requestParameters: TeamMembershipsApiGetCompactRecordsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TeamMembershipsGetCompactRecordsResponse> {
            return localVarFp.getCompactRecords(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete team membership record for a single team membership.
         * @summary Get a team membership
         * @param {TeamMembershipsApiGetRecordByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecordById(requestParameters: TeamMembershipsApiGetRecordByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TeamMembershipsGetRecordByIdResponse> {
            return localVarFp.getRecordById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact team membership records for the user.
         * @summary Get memberships from a user
         * @param {TeamMembershipsApiGetUserCompactRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCompact(requestParameters: TeamMembershipsApiGetUserCompactRequest, options?: AxiosRequestConfig): AxiosPromise<TeamMembershipsGetUserCompactResponse> {
            return localVarFp.getUserCompact(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompact operation in TeamMembershipsApi.
 * @export
 * @interface TeamMembershipsApiGetCompactRequest
 */
export type TeamMembershipsApiGetCompactRequest = {
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof TeamMembershipsApiGetCompact
    */
    readonly teamGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamMembershipsApiGetCompact
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TeamMembershipsApiGetCompact
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TeamMembershipsApiGetCompact
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>}
    * @memberof TeamMembershipsApiGetCompact
    */
    readonly optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>
    
}

/**
 * Request parameters for getCompactRecords operation in TeamMembershipsApi.
 * @export
 * @interface TeamMembershipsApiGetCompactRecordsRequest
 */
export type TeamMembershipsApiGetCompactRecordsRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly offset?: string
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly team?: string
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user. This parameter must be used with the workspace parameter.
    * @type {string}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly user?: string
    
    /**
    * Globally unique identifier for the workspace. This parameter must be used with the user parameter.
    * @type {string}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly workspace?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>}
    * @memberof TeamMembershipsApiGetCompactRecords
    */
    readonly optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>
    
}

/**
 * Request parameters for getRecordById operation in TeamMembershipsApi.
 * @export
 * @interface TeamMembershipsApiGetRecordByIdRequest
 */
export type TeamMembershipsApiGetRecordByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TeamMembershipsApiGetRecordById
    */
    readonly teamMembershipGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamMembershipsApiGetRecordById
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>}
    * @memberof TeamMembershipsApiGetRecordById
    */
    readonly optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>
    
}

/**
 * Request parameters for getUserCompact operation in TeamMembershipsApi.
 * @export
 * @interface TeamMembershipsApiGetUserCompactRequest
 */
export type TeamMembershipsApiGetUserCompactRequest = {
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof TeamMembershipsApiGetUserCompact
    */
    readonly userGid: string
    
    /**
    * Globally unique identifier for the workspace.
    * @type {string}
    * @memberof TeamMembershipsApiGetUserCompact
    */
    readonly workspace: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamMembershipsApiGetUserCompact
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TeamMembershipsApiGetUserCompact
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TeamMembershipsApiGetUserCompact
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>}
    * @memberof TeamMembershipsApiGetUserCompact
    */
    readonly optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'offset' | 'path' | 'team' | 'team.name' | 'uri' | 'user' | 'user.name'>
    
}

/**
 * TeamMembershipsApiGenerated - object-oriented interface
 * @export
 * @class TeamMembershipsApiGenerated
 * @extends {BaseAPI}
 */
export class TeamMembershipsApiGenerated extends BaseAPI {
    /**
     * Returns the compact team memberships for the team.
     * @summary Get memberships from a team
     * @param {TeamMembershipsApiGetCompactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembershipsApiGenerated
     */
    public getCompact(requestParameters: TeamMembershipsApiGetCompactRequest, options?: AxiosRequestConfig) {
        return TeamMembershipsApiFp(this.configuration).getCompact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns compact team membership records.
     * @summary Get team memberships
     * @param {TeamMembershipsApiGetCompactRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembershipsApiGenerated
     */
    public getCompactRecords(requestParameters: TeamMembershipsApiGetCompactRecordsRequest = {}, options?: AxiosRequestConfig) {
        return TeamMembershipsApiFp(this.configuration).getCompactRecords(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete team membership record for a single team membership.
     * @summary Get a team membership
     * @param {TeamMembershipsApiGetRecordByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembershipsApiGenerated
     */
    public getRecordById(requestParameters: TeamMembershipsApiGetRecordByIdRequest, options?: AxiosRequestConfig) {
        return TeamMembershipsApiFp(this.configuration).getRecordById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact team membership records for the user.
     * @summary Get memberships from a user
     * @param {TeamMembershipsApiGetUserCompactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamMembershipsApiGenerated
     */
    public getUserCompact(requestParameters: TeamMembershipsApiGetUserCompactRequest, options?: AxiosRequestConfig) {
        return TeamMembershipsApiFp(this.configuration).getUserCompact(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
