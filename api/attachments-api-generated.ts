/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentRequest } from '../models';
// @ts-ignore
import { AttachmentsDeleteSpecificResponse } from '../models';
// @ts-ignore
import { AttachmentsGetAllForObjectResponse } from '../models';
// @ts-ignore
import { AttachmentsGetAttachmentRecordResponse } from '../models';
// @ts-ignore
import { AttachmentsUploadAttachmentResponse } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AttachmentsApi - axios parameter creator
 * @export
 */
export const AttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a specific, existing attachment.  Returns an empty data record.
         * @summary Delete an attachment
         * @param {string} attachmentGid Globally unique identifier for the attachment.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecific: async (attachmentGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attachmentGid' is not null or undefined
            assertParamExists('deleteSpecific', 'attachmentGid', attachmentGid)
            const localVarPath = `/attachments/{attachment_gid}`
                .replace(`{${"attachment_gid"}}`, encodeURIComponent(String(attachmentGid !== undefined ? attachmentGid : `-attachment_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attachments/{attachment_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact records for all attachments on the object.  There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the \"Key resources\" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.  Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to `GET /attachments` for a task will return all of the images in the task, including inline images.
         * @summary Get attachments from an object
         * @param {string} parent Globally unique identifier for object to fetch statuses from. Must be a GID for a &#x60;project&#x60;, &#x60;project_brief&#x60;, or &#x60;task&#x60;.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permanent_url' | 'resource_subtype' | 'size' | 'uri' | 'view_url'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForObject: async (parent: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permanent_url' | 'resource_subtype' | 'size' | 'uri' | 'view_url'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parent' is not null or undefined
            assertParamExists('getAllForObject', 'parent', parent)
            const localVarPath = `/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (parent !== undefined) {
                localVarQueryParameter['parent'] = parent;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attachments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the full record for a single attachment.
         * @summary Get an attachment
         * @param {string} attachmentGid Globally unique identifier for the attachment.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentRecord: async (attachmentGid: string, optPretty?: boolean, optFields?: Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'attachmentGid' is not null or undefined
            assertParamExists('getAttachmentRecord', 'attachmentGid', attachmentGid)
            const localVarPath = `/attachments/{attachment_gid}`
                .replace(`{${"attachment_gid"}}`, encodeURIComponent(String(attachmentGid !== undefined ? attachmentGid : `-attachment_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attachments/{attachment_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form `CRLF` or `\\r\\n` outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
         * @summary Upload an attachment
         * @param {string} parent Required identifier of the parent task, project, or project_brief, as a string. 
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {string} [resourceSubtype] The type of the attachment. Must be one of the given values. If not specified, a file attachment of type &#x60;asana&#x60; will be assumed. Note that if the value of &#x60;resource_subtype&#x60; is &#x60;external&#x60;, a &#x60;parent&#x60;, &#x60;name&#x60;, and &#x60;url&#x60; must also be provided. 
         * @param {Uint8Array | File | buffer.File} [file] Required for &#x60;asana&#x60; attachments. 
         * @param {string} [url] The URL of the external resource being attached. Required for attachments of type &#x60;external&#x60;. 
         * @param {string} [name] The name of the external resource being attached. Required for attachments of type &#x60;external&#x60;. 
         * @param {boolean} [connectToApp] *Optional*. Only relevant for external attachments with a parent task. A boolean indicating whether the current app should be connected with the attachment for the purposes of showing an app components widget. Requires the app to have been added to a project the parent task is in. 
         * @param {AttachmentRequest} [attachmentRequest] The file you want to upload.  *Note when using curl:*  Be sure to add an &#x60;‘@’&#x60; before the file path, and use the &#x60;--form&#x60; option instead of the &#x60;-d&#x60; option.  When uploading PDFs with curl, force the content-type to be pdf by appending the content type to the file path: &#x60;--form \&quot;file&#x3D;@file.pdf;type&#x3D;application/pdf\&quot;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment: async (parent: string, optPretty?: boolean, optFields?: Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>, resourceSubtype?: string, file?: Uint8Array | File | buffer.File, url?: string, name?: string, connectToApp?: boolean, attachmentRequest?: AttachmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parent' is not null or undefined
            assertParamExists('uploadAttachment', 'parent', parent)
            const localVarPath = `/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


            if (resourceSubtype !== undefined) {
                await addFormParam('resource_subtype', resourceSubtype, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (parent !== undefined) {
                await addFormParam('parent', parent, false, true)
            }
    
            if (url !== undefined) {
                await addFormParam('url', url, false, true)
            }
    
            if (name !== undefined) {
                await addFormParam('name', name, false, true)
            }
    
            if (connectToApp !== undefined) {
                await addFormParam('connect_to_app', connectToApp, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: attachmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/attachments',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentsApi - functional programming interface
 * @export
 */
export const AttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a specific, existing attachment.  Returns an empty data record.
         * @summary Delete an attachment
         * @param {AttachmentsApiDeleteSpecificRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecific(requestParameters: AttachmentsApiDeleteSpecificRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsDeleteSpecificResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecific(requestParameters.attachmentGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact records for all attachments on the object.  There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the \"Key resources\" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.  Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to `GET /attachments` for a task will return all of the images in the task, including inline images.
         * @summary Get attachments from an object
         * @param {AttachmentsApiGetAllForObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllForObject(requestParameters: AttachmentsApiGetAllForObjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsGetAllForObjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllForObject(requestParameters.parent, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the full record for a single attachment.
         * @summary Get an attachment
         * @param {AttachmentsApiGetAttachmentRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttachmentRecord(requestParameters: AttachmentsApiGetAttachmentRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsGetAttachmentRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttachmentRecord(requestParameters.attachmentGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form `CRLF` or `\\r\\n` outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
         * @summary Upload an attachment
         * @param {AttachmentsApiUploadAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadAttachment(requestParameters: AttachmentsApiUploadAttachmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsUploadAttachmentResponse>> {
            const attachmentRequest: AttachmentRequest = {
                resource_subtype: requestParameters.resource_subtype,
                file: requestParameters.file,
                parent: requestParameters.parent,
                url: requestParameters.url,
                name: requestParameters.name,
                connect_to_app: requestParameters.connect_to_app
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadAttachment(requestParameters.parent, requestParameters.optPretty, requestParameters.optFields, requestParameters.resourceSubtype, requestParameters.file, requestParameters.url, requestParameters.name, requestParameters.connectToApp, attachmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttachmentsApi - factory interface
 * @export
 */
export const AttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentsApiFp(configuration)
    return {
        /**
         * Deletes a specific, existing attachment.  Returns an empty data record.
         * @summary Delete an attachment
         * @param {AttachmentsApiDeleteSpecificRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecific(requestParameters: AttachmentsApiDeleteSpecificRequest, options?: AxiosRequestConfig): AxiosPromise<AttachmentsDeleteSpecificResponse> {
            return localVarFp.deleteSpecific(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact records for all attachments on the object.  There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the \"Key resources\" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.  Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to `GET /attachments` for a task will return all of the images in the task, including inline images.
         * @summary Get attachments from an object
         * @param {AttachmentsApiGetAllForObjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllForObject(requestParameters: AttachmentsApiGetAllForObjectRequest, options?: AxiosRequestConfig): AxiosPromise<AttachmentsGetAllForObjectResponse> {
            return localVarFp.getAllForObject(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the full record for a single attachment.
         * @summary Get an attachment
         * @param {AttachmentsApiGetAttachmentRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttachmentRecord(requestParameters: AttachmentsApiGetAttachmentRecordRequest, options?: AxiosRequestConfig): AxiosPromise<AttachmentsGetAttachmentRecordResponse> {
            return localVarFp.getAttachmentRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form `CRLF` or `\\r\\n` outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
         * @summary Upload an attachment
         * @param {AttachmentsApiUploadAttachmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadAttachment(requestParameters: AttachmentsApiUploadAttachmentRequest, options?: AxiosRequestConfig): AxiosPromise<AttachmentsUploadAttachmentResponse> {
            return localVarFp.uploadAttachment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteSpecific operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiDeleteSpecificRequest
 */
export type AttachmentsApiDeleteSpecificRequest = {
    
    /**
    * Globally unique identifier for the attachment.
    * @type {string}
    * @memberof AttachmentsApiDeleteSpecific
    */
    readonly attachmentGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof AttachmentsApiDeleteSpecific
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getAllForObject operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiGetAllForObjectRequest
 */
export type AttachmentsApiGetAllForObjectRequest = {
    
    /**
    * Globally unique identifier for object to fetch statuses from. Must be a GID for a `project`, `project_brief`, or `task`.
    * @type {string}
    * @memberof AttachmentsApiGetAllForObject
    */
    readonly parent: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof AttachmentsApiGetAllForObject
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof AttachmentsApiGetAllForObject
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof AttachmentsApiGetAllForObject
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permanent_url' | 'resource_subtype' | 'size' | 'uri' | 'view_url'>}
    * @memberof AttachmentsApiGetAllForObject
    */
    readonly optFields?: Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'offset' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'path' | 'permanent_url' | 'resource_subtype' | 'size' | 'uri' | 'view_url'>
    
}

/**
 * Request parameters for getAttachmentRecord operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiGetAttachmentRecordRequest
 */
export type AttachmentsApiGetAttachmentRecordRequest = {
    
    /**
    * Globally unique identifier for the attachment.
    * @type {string}
    * @memberof AttachmentsApiGetAttachmentRecord
    */
    readonly attachmentGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof AttachmentsApiGetAttachmentRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>}
    * @memberof AttachmentsApiGetAttachmentRecord
    */
    readonly optFields?: Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>
    
}

/**
 * Request parameters for uploadAttachment operation in AttachmentsApi.
 * @export
 * @interface AttachmentsApiUploadAttachmentRequest
 */
export type AttachmentsApiUploadAttachmentRequest = {
    
    /**
    * Required identifier of the parent task, project, or project_brief, as a string. 
    * @type {string}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly parent: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly optFields?: Array<'connected_to_app' | 'created_at' | 'download_url' | 'host' | 'name' | 'parent' | 'parent.created_by' | 'parent.name' | 'parent.resource_subtype' | 'permanent_url' | 'resource_subtype' | 'size' | 'view_url'>
    
    /**
    * The type of the attachment. Must be one of the given values. If not specified, a file attachment of type `asana` will be assumed. Note that if the value of `resource_subtype` is `external`, a `parent`, `name`, and `url` must also be provided. 
    * @type {string}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly resourceSubtype?: string
    
    /**
    * Required for `asana` attachments. 
    * @type {Uint8Array | File | buffer.File}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly file?: Uint8Array | File | buffer.File
    
    /**
    * The URL of the external resource being attached. Required for attachments of type `external`. 
    * @type {string}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly url?: string
    
    /**
    * The name of the external resource being attached. Required for attachments of type `external`. 
    * @type {string}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly name?: string
    
    /**
    * *Optional*. Only relevant for external attachments with a parent task. A boolean indicating whether the current app should be connected with the attachment for the purposes of showing an app components widget. Requires the app to have been added to a project the parent task is in. 
    * @type {boolean}
    * @memberof AttachmentsApiUploadAttachment
    */
    readonly connectToApp?: boolean
    
} & AttachmentRequest

/**
 * AttachmentsApiGenerated - object-oriented interface
 * @export
 * @class AttachmentsApiGenerated
 * @extends {BaseAPI}
 */
export class AttachmentsApiGenerated extends BaseAPI {
    /**
     * Deletes a specific, existing attachment.  Returns an empty data record.
     * @summary Delete an attachment
     * @param {AttachmentsApiDeleteSpecificRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApiGenerated
     */
    public deleteSpecific(requestParameters: AttachmentsApiDeleteSpecificRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).deleteSpecific(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact records for all attachments on the object.  There are three possible `parent` values for this request: `project`, `project_brief`, and `task`. For a project, an attachment refers to a file uploaded to the \"Key resources\" section in the project Overview. For a project brief, an attachment refers to inline files in the project brief itself. For a task, an attachment refers to a file directly associated to that task.  Note that within the Asana app, inline images in the task description do not appear in the index of image thumbnails nor as stories in the task. However, requests made to `GET /attachments` for a task will return all of the images in the task, including inline images.
     * @summary Get attachments from an object
     * @param {AttachmentsApiGetAllForObjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApiGenerated
     */
    public getAllForObject(requestParameters: AttachmentsApiGetAllForObjectRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).getAllForObject(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the full record for a single attachment.
     * @summary Get an attachment
     * @param {AttachmentsApiGetAttachmentRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApiGenerated
     */
    public getAttachmentRecord(requestParameters: AttachmentsApiGetAttachmentRecordRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).getAttachmentRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload an attachment.  This method uploads an attachment on an object and returns the compact record for the created attachment object. This is possible by either:  - Providing the URL of the external resource being attached, or - Downloading the file content first and then uploading it as any other attachment. Note that it is not possible to attach files from third party services such as Dropbox, Box, Vimeo & Google Drive via the API  The 100MB size limit on attachments in Asana is enforced on this endpoint.  This endpoint expects a multipart/form-data encoded request containing the full contents of the file to be uploaded.  Requests made should follow the HTTP/1.1 specification that line terminators are of the form `CRLF` or `\\r\\n` outlined [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules) in order for the server to reliably and properly handle the request.
     * @summary Upload an attachment
     * @param {AttachmentsApiUploadAttachmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentsApiGenerated
     */
    public uploadAttachment(requestParameters: AttachmentsApiUploadAttachmentRequest, options?: AxiosRequestConfig) {
        return AttachmentsApiFp(this.configuration).uploadAttachment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
