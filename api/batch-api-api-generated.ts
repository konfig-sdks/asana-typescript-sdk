/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchApiSubmitParallelRequestsRequest } from '../models';
// @ts-ignore
import { BatchApiSubmitParallelRequestsResponse } from '../models';
// @ts-ignore
import { BatchRequest } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BatchApiApi - axios parameter creator
 * @export
 */
export const BatchApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Make multiple requests in parallel to Asana\'s API.
         * @summary Submit parallel requests
         * @param {BatchApiSubmitParallelRequestsRequest} batchApiSubmitParallelRequestsRequest The requests to batch together via the Batch API.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'body' | 'headers' | 'status_code'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitParallelRequests: async (batchApiSubmitParallelRequestsRequest: BatchApiSubmitParallelRequestsRequest, optPretty?: boolean, optFields?: Array<'body' | 'headers' | 'status_code'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchApiSubmitParallelRequestsRequest' is not null or undefined
            assertParamExists('submitParallelRequests', 'batchApiSubmitParallelRequestsRequest', batchApiSubmitParallelRequestsRequest)
            const localVarPath = `/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: batchApiSubmitParallelRequestsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batch',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(batchApiSubmitParallelRequestsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BatchApiApi - functional programming interface
 * @export
 */
export const BatchApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BatchApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Make multiple requests in parallel to Asana\'s API.
         * @summary Submit parallel requests
         * @param {BatchApiApiSubmitParallelRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitParallelRequests(requestParameters: BatchApiApiSubmitParallelRequestsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchApiSubmitParallelRequestsResponse>> {
            const batchApiSubmitParallelRequestsRequest: BatchApiSubmitParallelRequestsRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitParallelRequests(batchApiSubmitParallelRequestsRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BatchApiApi - factory interface
 * @export
 */
export const BatchApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BatchApiApiFp(configuration)
    return {
        /**
         * Make multiple requests in parallel to Asana\'s API.
         * @summary Submit parallel requests
         * @param {BatchApiApiSubmitParallelRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitParallelRequests(requestParameters: BatchApiApiSubmitParallelRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<BatchApiSubmitParallelRequestsResponse> {
            return localVarFp.submitParallelRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for submitParallelRequests operation in BatchApiApi.
 * @export
 * @interface BatchApiApiSubmitParallelRequestsRequest
 */
export type BatchApiApiSubmitParallelRequestsRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof BatchApiApiSubmitParallelRequests
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'body' | 'headers' | 'status_code'>}
    * @memberof BatchApiApiSubmitParallelRequests
    */
    readonly optFields?: Array<'body' | 'headers' | 'status_code'>
    
} & BatchApiSubmitParallelRequestsRequest

/**
 * BatchApiApiGenerated - object-oriented interface
 * @export
 * @class BatchApiApiGenerated
 * @extends {BaseAPI}
 */
export class BatchApiApiGenerated extends BaseAPI {
    /**
     * Make multiple requests in parallel to Asana\'s API.
     * @summary Submit parallel requests
     * @param {BatchApiApiSubmitParallelRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiApiGenerated
     */
    public submitParallelRequests(requestParameters: BatchApiApiSubmitParallelRequestsRequest, options?: AxiosRequestConfig) {
        return BatchApiApiFp(this.configuration).submitParallelRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
