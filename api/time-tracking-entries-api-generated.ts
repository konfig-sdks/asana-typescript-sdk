/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec](https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateTimeTrackingEntryRequest } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { TimeTrackingEntriesCreateNewTimeEntryRecordRequest } from '../models';
// @ts-ignore
import { TimeTrackingEntriesCreateNewTimeEntryRecordResponse } from '../models';
// @ts-ignore
import { TimeTrackingEntriesDeleteTimeEntryResponse } from '../models';
// @ts-ignore
import { TimeTrackingEntriesGetForTaskResponse } from '../models';
// @ts-ignore
import { TimeTrackingEntriesGetRecordResponse } from '../models';
// @ts-ignore
import { TimeTrackingEntriesUpdateTimeTrackingEntryRequest } from '../models';
// @ts-ignore
import { TimeTrackingEntriesUpdateTimeTrackingEntryResponse } from '../models';
// @ts-ignore
import { UpdateTimeTrackingEntryRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeTrackingEntriesApi - axios parameter creator
 * @export
 */
export const TimeTrackingEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a time tracking entry on a given task.  Returns the record of the newly created time tracking entry.
         * @summary Create a time tracking entry
         * @param {string} taskGid The task to operate on.
         * @param {TimeTrackingEntriesCreateNewTimeEntryRecordRequest} timeTrackingEntriesCreateNewTimeEntryRecordRequest Information about the time tracking entry.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTimeEntryRecord: async (taskGid: string, timeTrackingEntriesCreateNewTimeEntryRecordRequest: TimeTrackingEntriesCreateNewTimeEntryRecordRequest, optPretty?: boolean, optFields?: Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('createNewTimeEntryRecord', 'taskGid', taskGid)
            // verify required parameter 'timeTrackingEntriesCreateNewTimeEntryRecordRequest' is not null or undefined
            assertParamExists('createNewTimeEntryRecord', 'timeTrackingEntriesCreateNewTimeEntryRecordRequest', timeTrackingEntriesCreateNewTimeEntryRecordRequest)
            const localVarPath = `/tasks/{task_gid}/time_tracking_entries`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingEntriesCreateNewTimeEntryRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/time_tracking_entries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingEntriesCreateNewTimeEntryRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing time tracking entry can be deleted by making a `DELETE` request on the URL for that time tracking entry.  Returns an empty data record.
         * @summary Delete a time tracking entry
         * @param {string} timeTrackingEntryGid Globally unique identifier for the time tracking entry.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeEntry: async (timeTrackingEntryGid: string, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeTrackingEntryGid' is not null or undefined
            assertParamExists('deleteTimeEntry', 'timeTrackingEntryGid', timeTrackingEntryGid)
            const localVarPath = `/time_tracking_entries/{time_tracking_entry_gid}`
                .replace(`{${"time_tracking_entry_gid"}}`, encodeURIComponent(String(timeTrackingEntryGid !== undefined ? timeTrackingEntryGid : `-time_tracking_entry_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time_tracking_entries/{time_tracking_entry_gid}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns time tracking entries for a given task.
         * @summary Get time tracking entries for a task
         * @param {string} taskGid The task to operate on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'offset' | 'path' | 'uri'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForTask: async (taskGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'offset' | 'path' | 'uri'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskGid' is not null or undefined
            assertParamExists('getForTask', 'taskGid', taskGid)
            const localVarPath = `/tasks/{task_gid}/time_tracking_entries`
                .replace(`{${"task_gid"}}`, encodeURIComponent(String(taskGid !== undefined ? taskGid : `-task_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tasks/{task_gid}/time_tracking_entries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the complete time tracking entry record for a single time tracking entry.
         * @summary Get a time tracking entry
         * @param {string} timeTrackingEntryGid Globally unique identifier for the time tracking entry.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord: async (timeTrackingEntryGid: string, optPretty?: boolean, optFields?: Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeTrackingEntryGid' is not null or undefined
            assertParamExists('getRecord', 'timeTrackingEntryGid', timeTrackingEntryGid)
            const localVarPath = `/time_tracking_entries/{time_tracking_entry_gid}`
                .replace(`{${"time_tracking_entry_gid"}}`, encodeURIComponent(String(timeTrackingEntryGid !== undefined ? timeTrackingEntryGid : `-time_tracking_entry_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time_tracking_entries/{time_tracking_entry_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A specific, existing time tracking entry can be updated by making a `PUT` request on the URL for that time tracking entry. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated time tracking entry record.
         * @summary Update a time tracking entry
         * @param {string} timeTrackingEntryGid Globally unique identifier for the time tracking entry.
         * @param {TimeTrackingEntriesUpdateTimeTrackingEntryRequest} timeTrackingEntriesUpdateTimeTrackingEntryRequest The updated fields for the time tracking entry.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeTrackingEntry: async (timeTrackingEntryGid: string, timeTrackingEntriesUpdateTimeTrackingEntryRequest: TimeTrackingEntriesUpdateTimeTrackingEntryRequest, optPretty?: boolean, optFields?: Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timeTrackingEntryGid' is not null or undefined
            assertParamExists('updateTimeTrackingEntry', 'timeTrackingEntryGid', timeTrackingEntryGid)
            // verify required parameter 'timeTrackingEntriesUpdateTimeTrackingEntryRequest' is not null or undefined
            assertParamExists('updateTimeTrackingEntry', 'timeTrackingEntriesUpdateTimeTrackingEntryRequest', timeTrackingEntriesUpdateTimeTrackingEntryRequest)
            const localVarPath = `/time_tracking_entries/{time_tracking_entry_gid}`
                .replace(`{${"time_tracking_entry_gid"}}`, encodeURIComponent(String(timeTrackingEntryGid !== undefined ? timeTrackingEntryGid : `-time_tracking_entry_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingEntriesUpdateTimeTrackingEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time_tracking_entries/{time_tracking_entry_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingEntriesUpdateTimeTrackingEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeTrackingEntriesApi - functional programming interface
 * @export
 */
export const TimeTrackingEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeTrackingEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a time tracking entry on a given task.  Returns the record of the newly created time tracking entry.
         * @summary Create a time tracking entry
         * @param {TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTimeEntryRecord(requestParameters: TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTrackingEntriesCreateNewTimeEntryRecordResponse>> {
            const timeTrackingEntriesCreateNewTimeEntryRecordRequest: TimeTrackingEntriesCreateNewTimeEntryRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewTimeEntryRecord(requestParameters.taskGid, timeTrackingEntriesCreateNewTimeEntryRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing time tracking entry can be deleted by making a `DELETE` request on the URL for that time tracking entry.  Returns an empty data record.
         * @summary Delete a time tracking entry
         * @param {TimeTrackingEntriesApiDeleteTimeEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeEntry(requestParameters: TimeTrackingEntriesApiDeleteTimeEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTrackingEntriesDeleteTimeEntryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeEntry(requestParameters.timeTrackingEntryGid, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns time tracking entries for a given task.
         * @summary Get time tracking entries for a task
         * @param {TimeTrackingEntriesApiGetForTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getForTask(requestParameters: TimeTrackingEntriesApiGetForTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTrackingEntriesGetForTaskResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getForTask(requestParameters.taskGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the complete time tracking entry record for a single time tracking entry.
         * @summary Get a time tracking entry
         * @param {TimeTrackingEntriesApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecord(requestParameters: TimeTrackingEntriesApiGetRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTrackingEntriesGetRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecord(requestParameters.timeTrackingEntryGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A specific, existing time tracking entry can be updated by making a `PUT` request on the URL for that time tracking entry. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated time tracking entry record.
         * @summary Update a time tracking entry
         * @param {TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTimeTrackingEntry(requestParameters: TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTrackingEntriesUpdateTimeTrackingEntryResponse>> {
            const timeTrackingEntriesUpdateTimeTrackingEntryRequest: TimeTrackingEntriesUpdateTimeTrackingEntryRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTimeTrackingEntry(requestParameters.timeTrackingEntryGid, timeTrackingEntriesUpdateTimeTrackingEntryRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeTrackingEntriesApi - factory interface
 * @export
 */
export const TimeTrackingEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeTrackingEntriesApiFp(configuration)
    return {
        /**
         * Creates a time tracking entry on a given task.  Returns the record of the newly created time tracking entry.
         * @summary Create a time tracking entry
         * @param {TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTimeEntryRecord(requestParameters: TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TimeTrackingEntriesCreateNewTimeEntryRecordResponse> {
            return localVarFp.createNewTimeEntryRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing time tracking entry can be deleted by making a `DELETE` request on the URL for that time tracking entry.  Returns an empty data record.
         * @summary Delete a time tracking entry
         * @param {TimeTrackingEntriesApiDeleteTimeEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeEntry(requestParameters: TimeTrackingEntriesApiDeleteTimeEntryRequest, options?: AxiosRequestConfig): AxiosPromise<TimeTrackingEntriesDeleteTimeEntryResponse> {
            return localVarFp.deleteTimeEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns time tracking entries for a given task.
         * @summary Get time tracking entries for a task
         * @param {TimeTrackingEntriesApiGetForTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getForTask(requestParameters: TimeTrackingEntriesApiGetForTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TimeTrackingEntriesGetForTaskResponse> {
            return localVarFp.getForTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the complete time tracking entry record for a single time tracking entry.
         * @summary Get a time tracking entry
         * @param {TimeTrackingEntriesApiGetRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecord(requestParameters: TimeTrackingEntriesApiGetRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TimeTrackingEntriesGetRecordResponse> {
            return localVarFp.getRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A specific, existing time tracking entry can be updated by making a `PUT` request on the URL for that time tracking entry. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated time tracking entry record.
         * @summary Update a time tracking entry
         * @param {TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTimeTrackingEntry(requestParameters: TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest, options?: AxiosRequestConfig): AxiosPromise<TimeTrackingEntriesUpdateTimeTrackingEntryResponse> {
            return localVarFp.updateTimeTrackingEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewTimeEntryRecord operation in TimeTrackingEntriesApi.
 * @export
 * @interface TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest
 */
export type TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TimeTrackingEntriesApiCreateNewTimeEntryRecord
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TimeTrackingEntriesApiCreateNewTimeEntryRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>}
    * @memberof TimeTrackingEntriesApiCreateNewTimeEntryRecord
    */
    readonly optFields?: Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>
    
} & TimeTrackingEntriesCreateNewTimeEntryRecordRequest

/**
 * Request parameters for deleteTimeEntry operation in TimeTrackingEntriesApi.
 * @export
 * @interface TimeTrackingEntriesApiDeleteTimeEntryRequest
 */
export type TimeTrackingEntriesApiDeleteTimeEntryRequest = {
    
    /**
    * Globally unique identifier for the time tracking entry.
    * @type {string}
    * @memberof TimeTrackingEntriesApiDeleteTimeEntry
    */
    readonly timeTrackingEntryGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TimeTrackingEntriesApiDeleteTimeEntry
    */
    readonly optPretty?: boolean
    
}

/**
 * Request parameters for getForTask operation in TimeTrackingEntriesApi.
 * @export
 * @interface TimeTrackingEntriesApiGetForTaskRequest
 */
export type TimeTrackingEntriesApiGetForTaskRequest = {
    
    /**
    * The task to operate on.
    * @type {string}
    * @memberof TimeTrackingEntriesApiGetForTask
    */
    readonly taskGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TimeTrackingEntriesApiGetForTask
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TimeTrackingEntriesApiGetForTask
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TimeTrackingEntriesApiGetForTask
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'offset' | 'path' | 'uri'>}
    * @memberof TimeTrackingEntriesApiGetForTask
    */
    readonly optFields?: Array<'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'offset' | 'path' | 'uri'>
    
}

/**
 * Request parameters for getRecord operation in TimeTrackingEntriesApi.
 * @export
 * @interface TimeTrackingEntriesApiGetRecordRequest
 */
export type TimeTrackingEntriesApiGetRecordRequest = {
    
    /**
    * Globally unique identifier for the time tracking entry.
    * @type {string}
    * @memberof TimeTrackingEntriesApiGetRecord
    */
    readonly timeTrackingEntryGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TimeTrackingEntriesApiGetRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>}
    * @memberof TimeTrackingEntriesApiGetRecord
    */
    readonly optFields?: Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>
    
}

/**
 * Request parameters for updateTimeTrackingEntry operation in TimeTrackingEntriesApi.
 * @export
 * @interface TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest
 */
export type TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest = {
    
    /**
    * Globally unique identifier for the time tracking entry.
    * @type {string}
    * @memberof TimeTrackingEntriesApiUpdateTimeTrackingEntry
    */
    readonly timeTrackingEntryGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TimeTrackingEntriesApiUpdateTimeTrackingEntry
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>}
    * @memberof TimeTrackingEntriesApiUpdateTimeTrackingEntry
    */
    readonly optFields?: Array<'created_at' | 'created_by' | 'created_by.name' | 'duration_minutes' | 'entered_on' | 'task' | 'task.created_by' | 'task.name' | 'task.resource_subtype'>
    
} & TimeTrackingEntriesUpdateTimeTrackingEntryRequest

/**
 * TimeTrackingEntriesApiGenerated - object-oriented interface
 * @export
 * @class TimeTrackingEntriesApiGenerated
 * @extends {BaseAPI}
 */
export class TimeTrackingEntriesApiGenerated extends BaseAPI {
    /**
     * Creates a time tracking entry on a given task.  Returns the record of the newly created time tracking entry.
     * @summary Create a time tracking entry
     * @param {TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingEntriesApiGenerated
     */
    public createNewTimeEntryRecord(requestParameters: TimeTrackingEntriesApiCreateNewTimeEntryRecordRequest, options?: AxiosRequestConfig) {
        return TimeTrackingEntriesApiFp(this.configuration).createNewTimeEntryRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing time tracking entry can be deleted by making a `DELETE` request on the URL for that time tracking entry.  Returns an empty data record.
     * @summary Delete a time tracking entry
     * @param {TimeTrackingEntriesApiDeleteTimeEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingEntriesApiGenerated
     */
    public deleteTimeEntry(requestParameters: TimeTrackingEntriesApiDeleteTimeEntryRequest, options?: AxiosRequestConfig) {
        return TimeTrackingEntriesApiFp(this.configuration).deleteTimeEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns time tracking entries for a given task.
     * @summary Get time tracking entries for a task
     * @param {TimeTrackingEntriesApiGetForTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingEntriesApiGenerated
     */
    public getForTask(requestParameters: TimeTrackingEntriesApiGetForTaskRequest, options?: AxiosRequestConfig) {
        return TimeTrackingEntriesApiFp(this.configuration).getForTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the complete time tracking entry record for a single time tracking entry.
     * @summary Get a time tracking entry
     * @param {TimeTrackingEntriesApiGetRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingEntriesApiGenerated
     */
    public getRecord(requestParameters: TimeTrackingEntriesApiGetRecordRequest, options?: AxiosRequestConfig) {
        return TimeTrackingEntriesApiFp(this.configuration).getRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A specific, existing time tracking entry can be updated by making a `PUT` request on the URL for that time tracking entry. Only the fields provided in the `data` block will be updated; any unspecified fields will remain unchanged.  When using this method, it is best to specify only those fields you wish to change, or else you may overwrite changes made by another user since you last retrieved the task.  Returns the complete updated time tracking entry record.
     * @summary Update a time tracking entry
     * @param {TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingEntriesApiGenerated
     */
    public updateTimeTrackingEntry(requestParameters: TimeTrackingEntriesApiUpdateTimeTrackingEntryRequest, options?: AxiosRequestConfig) {
        return TimeTrackingEntriesApiFp(this.configuration).updateTimeTrackingEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
