/* tslint:disable */
/* eslint-disable */
/*
Asana

This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/openapi/master/defs/asana_oas.yaml).

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { TeamAddUserRequest } from '../models';
// @ts-ignore
import { TeamRemoveUserRequest } from '../models';
// @ts-ignore
import { TeamRequest } from '../models';
// @ts-ignore
import { TeamsAddUserToTeamRequest } from '../models';
// @ts-ignore
import { TeamsAddUserToTeamResponse } from '../models';
// @ts-ignore
import { TeamsCreateTeamRecordRequest } from '../models';
// @ts-ignore
import { TeamsCreateTeamRecordResponse } from '../models';
// @ts-ignore
import { TeamsGetTeamRecordResponse } from '../models';
// @ts-ignore
import { TeamsGetUserTeamsResponse } from '../models';
// @ts-ignore
import { TeamsListWorkspaceTeamsResponse } from '../models';
// @ts-ignore
import { TeamsRemoveUserFromTeamRequest } from '../models';
// @ts-ignore
import { TeamsRemoveUserFromTeamResponse } from '../models';
// @ts-ignore
import { TeamsUpdateTeamRecordRequest } from '../models';
// @ts-ignore
import { TeamsUpdateTeamRecordResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
         * @summary Add a user to a team
         * @param {string} teamGid Globally unique identifier for the team.
         * @param {TeamsAddUserToTeamRequest} teamsAddUserToTeamRequest The user to add to the team.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToTeam: async (teamGid: string, teamsAddUserToTeamRequest: TeamsAddUserToTeamRequest, optPretty?: boolean, optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamGid' is not null or undefined
            assertParamExists('addUserToTeam', 'teamGid', teamGid)
            // verify required parameter 'teamsAddUserToTeamRequest' is not null or undefined
            assertParamExists('addUserToTeam', 'teamsAddUserToTeamRequest', teamsAddUserToTeamRequest)
            const localVarPath = `/teams/{team_gid}/addUser`
                .replace(`{${"team_gid"}}`, encodeURIComponent(String(teamGid !== undefined ? teamGid : `-team_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsAddUserToTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_gid}/addUser',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsAddUserToTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a team within the current workspace.
         * @summary Create a team
         * @param {TeamsCreateTeamRecordRequest} teamsCreateTeamRecordRequest The team to create.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamRecord: async (teamsCreateTeamRecordRequest: TeamsCreateTeamRecordRequest, optPretty?: boolean, optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamsCreateTeamRecordRequest' is not null or undefined
            assertParamExists('createTeamRecord', 'teamsCreateTeamRecordRequest', teamsCreateTeamRecordRequest)
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsCreateTeamRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsCreateTeamRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the full record for a single team.
         * @summary Get a team
         * @param {string} teamGid Globally unique identifier for the team.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamRecord: async (teamGid: string, optPretty?: boolean, optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamGid' is not null or undefined
            assertParamExists('getTeamRecord', 'teamGid', teamGid)
            const localVarPath = `/teams/{team_gid}`
                .replace(`{${"team_gid"}}`, encodeURIComponent(String(teamGid !== undefined ? teamGid : `-team_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_gid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact records for all teams to which the given user is assigned.
         * @summary Get teams for a user
         * @param {string} userGid A string identifying a user. This can either be the string \&quot;me\&quot;, an email, or the gid of a user.
         * @param {string} organization The workspace or organization to filter teams on.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTeams: async (userGid: string, organization: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userGid' is not null or undefined
            assertParamExists('getUserTeams', 'userGid', userGid)
            // verify required parameter 'organization' is not null or undefined
            assertParamExists('getUserTeams', 'organization', organization)
            const localVarPath = `/users/{user_gid}/teams`
                .replace(`{${"user_gid"}}`, encodeURIComponent(String(userGid !== undefined ? userGid : `-user_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (organization !== undefined) {
                localVarQueryParameter['organization'] = organization;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{user_gid}/teams',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the compact records for all teams in the workspace visible to the authorized user.
         * @summary Get teams in a workspace
         * @param {string} workspaceGid Globally unique identifier for the workspace or organization.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {number} [limit] Results per page. The number of objects to return per page. The value must be between 1 and 100.
         * @param {string} [offset] Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \&#39;Note: You can only pass in an offset that was returned to you via a previously paginated request.\&#39;
         * @param {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaceTeams: async (workspaceGid: string, optPretty?: boolean, limit?: number, offset?: string, optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceGid' is not null or undefined
            assertParamExists('listWorkspaceTeams', 'workspaceGid', workspaceGid)
            const localVarPath = `/workspaces/{workspace_gid}/teams`
                .replace(`{${"workspace_gid"}}`, encodeURIComponent(String(workspaceGid !== undefined ? workspaceGid : `-workspace_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/workspaces/{workspace_gid}/teams',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The user making this call must be a member of the team in order to remove themselves or others.
         * @summary Remove a user from a team
         * @param {string} teamGid Globally unique identifier for the team.
         * @param {TeamsRemoveUserFromTeamRequest} teamsRemoveUserFromTeamRequest The user to remove from the team.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromTeam: async (teamGid: string, teamsRemoveUserFromTeamRequest: TeamsRemoveUserFromTeamRequest, optPretty?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamGid' is not null or undefined
            assertParamExists('removeUserFromTeam', 'teamGid', teamGid)
            // verify required parameter 'teamsRemoveUserFromTeamRequest' is not null or undefined
            assertParamExists('removeUserFromTeam', 'teamsRemoveUserFromTeamRequest', teamsRemoveUserFromTeamRequest)
            const localVarPath = `/teams/{team_gid}/removeUser`
                .replace(`{${"team_gid"}}`, encodeURIComponent(String(teamGid !== undefined ? teamGid : `-team_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsRemoveUserFromTeamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_gid}/removeUser',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsRemoveUserFromTeamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a team within the current workspace.
         * @summary Update a team
         * @param {string} teamGid Globally unique identifier for the team.
         * @param {TeamsUpdateTeamRecordRequest} teamsUpdateTeamRecordRequest The team to update.
         * @param {boolean} [optPretty] Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
         * @param {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>} [optFields] This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamRecord: async (teamGid: string, teamsUpdateTeamRecordRequest: TeamsUpdateTeamRecordRequest, optPretty?: boolean, optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamGid' is not null or undefined
            assertParamExists('updateTeamRecord', 'teamGid', teamGid)
            // verify required parameter 'teamsUpdateTeamRecordRequest' is not null or undefined
            assertParamExists('updateTeamRecord', 'teamsUpdateTeamRecordRequest', teamsUpdateTeamRecordRequest)
            const localVarPath = `/teams/{team_gid}`
                .replace(`{${"team_gid"}}`, encodeURIComponent(String(teamGid !== undefined ? teamGid : `-team_gid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)
            // authentication personalAccessToken required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (optPretty !== undefined) {
                localVarQueryParameter['opt_pretty'] = optPretty;
            }

            if (optFields) {
                localVarQueryParameter['opt_fields'] = optFields.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: teamsUpdateTeamRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/teams/{team_gid}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(teamsUpdateTeamRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamsApiAxiosParamCreator(configuration)
    return {
        /**
         * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
         * @summary Add a user to a team
         * @param {TeamsApiAddUserToTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserToTeam(requestParameters: TeamsApiAddUserToTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsAddUserToTeamResponse>> {
            const teamsAddUserToTeamRequest: TeamsAddUserToTeamRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToTeam(requestParameters.teamGid, teamsAddUserToTeamRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a team within the current workspace.
         * @summary Create a team
         * @param {TeamsApiCreateTeamRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTeamRecord(requestParameters: TeamsApiCreateTeamRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsCreateTeamRecordResponse>> {
            const teamsCreateTeamRecordRequest: TeamsCreateTeamRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTeamRecord(teamsCreateTeamRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the full record for a single team.
         * @summary Get a team
         * @param {TeamsApiGetTeamRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamRecord(requestParameters: TeamsApiGetTeamRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsGetTeamRecordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamRecord(requestParameters.teamGid, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact records for all teams to which the given user is assigned.
         * @summary Get teams for a user
         * @param {TeamsApiGetUserTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTeams(requestParameters: TeamsApiGetUserTeamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsGetUserTeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTeams(requestParameters.userGid, requestParameters.organization, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the compact records for all teams in the workspace visible to the authorized user.
         * @summary Get teams in a workspace
         * @param {TeamsApiListWorkspaceTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWorkspaceTeams(requestParameters: TeamsApiListWorkspaceTeamsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsListWorkspaceTeamsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspaceTeams(requestParameters.workspaceGid, requestParameters.optPretty, requestParameters.limit, requestParameters.offset, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The user making this call must be a member of the team in order to remove themselves or others.
         * @summary Remove a user from a team
         * @param {TeamsApiRemoveUserFromTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeUserFromTeam(requestParameters: TeamsApiRemoveUserFromTeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsRemoveUserFromTeamResponse>> {
            const teamsRemoveUserFromTeamRequest: TeamsRemoveUserFromTeamRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFromTeam(requestParameters.teamGid, teamsRemoveUserFromTeamRequest, requestParameters.optPretty, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a team within the current workspace.
         * @summary Update a team
         * @param {TeamsApiUpdateTeamRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeamRecord(requestParameters: TeamsApiUpdateTeamRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamsUpdateTeamRecordResponse>> {
            const teamsUpdateTeamRecordRequest: TeamsUpdateTeamRecordRequest = {
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeamRecord(requestParameters.teamGid, teamsUpdateTeamRecordRequest, requestParameters.optPretty, requestParameters.optFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamsApiFp(configuration)
    return {
        /**
         * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
         * @summary Add a user to a team
         * @param {TeamsApiAddUserToTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserToTeam(requestParameters: TeamsApiAddUserToTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsAddUserToTeamResponse> {
            return localVarFp.addUserToTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a team within the current workspace.
         * @summary Create a team
         * @param {TeamsApiCreateTeamRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTeamRecord(requestParameters: TeamsApiCreateTeamRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsCreateTeamRecordResponse> {
            return localVarFp.createTeamRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the full record for a single team.
         * @summary Get a team
         * @param {TeamsApiGetTeamRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamRecord(requestParameters: TeamsApiGetTeamRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsGetTeamRecordResponse> {
            return localVarFp.getTeamRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact records for all teams to which the given user is assigned.
         * @summary Get teams for a user
         * @param {TeamsApiGetUserTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTeams(requestParameters: TeamsApiGetUserTeamsRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsGetUserTeamsResponse> {
            return localVarFp.getUserTeams(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the compact records for all teams in the workspace visible to the authorized user.
         * @summary Get teams in a workspace
         * @param {TeamsApiListWorkspaceTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWorkspaceTeams(requestParameters: TeamsApiListWorkspaceTeamsRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsListWorkspaceTeamsResponse> {
            return localVarFp.listWorkspaceTeams(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The user making this call must be a member of the team in order to remove themselves or others.
         * @summary Remove a user from a team
         * @param {TeamsApiRemoveUserFromTeamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeUserFromTeam(requestParameters: TeamsApiRemoveUserFromTeamRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsRemoveUserFromTeamResponse> {
            return localVarFp.removeUserFromTeam(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a team within the current workspace.
         * @summary Update a team
         * @param {TeamsApiUpdateTeamRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeamRecord(requestParameters: TeamsApiUpdateTeamRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TeamsUpdateTeamRecordResponse> {
            return localVarFp.updateTeamRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserToTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiAddUserToTeamRequest
 */
export type TeamsApiAddUserToTeamRequest = {
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof TeamsApiAddUserToTeam
    */
    readonly teamGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiAddUserToTeam
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>}
    * @memberof TeamsApiAddUserToTeam
    */
    readonly optFields?: Array<'is_admin' | 'is_guest' | 'is_limited_access' | 'team' | 'team.name' | 'user' | 'user.name'>
    
} & TeamsAddUserToTeamRequest

/**
 * Request parameters for createTeamRecord operation in TeamsApi.
 * @export
 * @interface TeamsApiCreateTeamRecordRequest
 */
export type TeamsApiCreateTeamRecordRequest = {
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiCreateTeamRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>}
    * @memberof TeamsApiCreateTeamRecord
    */
    readonly optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>
    
} & TeamsCreateTeamRecordRequest

/**
 * Request parameters for getTeamRecord operation in TeamsApi.
 * @export
 * @interface TeamsApiGetTeamRecordRequest
 */
export type TeamsApiGetTeamRecordRequest = {
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof TeamsApiGetTeamRecord
    */
    readonly teamGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiGetTeamRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>}
    * @memberof TeamsApiGetTeamRecord
    */
    readonly optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>
    
}

/**
 * Request parameters for getUserTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiGetUserTeamsRequest
 */
export type TeamsApiGetUserTeamsRequest = {
    
    /**
    * A string identifying a user. This can either be the string \"me\", an email, or the gid of a user.
    * @type {string}
    * @memberof TeamsApiGetUserTeams
    */
    readonly userGid: string
    
    /**
    * The workspace or organization to filter teams on.
    * @type {string}
    * @memberof TeamsApiGetUserTeams
    */
    readonly organization: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiGetUserTeams
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TeamsApiGetUserTeams
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TeamsApiGetUserTeams
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>}
    * @memberof TeamsApiGetUserTeams
    */
    readonly optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>
    
}

/**
 * Request parameters for listWorkspaceTeams operation in TeamsApi.
 * @export
 * @interface TeamsApiListWorkspaceTeamsRequest
 */
export type TeamsApiListWorkspaceTeamsRequest = {
    
    /**
    * Globally unique identifier for the workspace or organization.
    * @type {string}
    * @memberof TeamsApiListWorkspaceTeams
    */
    readonly workspaceGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiListWorkspaceTeams
    */
    readonly optPretty?: boolean
    
    /**
    * Results per page. The number of objects to return per page. The value must be between 1 and 100.
    * @type {number}
    * @memberof TeamsApiListWorkspaceTeams
    */
    readonly limit?: number
    
    /**
    * Offset token. An offset to the next page returned by the API. A pagination request will return an offset token, which can be used as an input parameter to the next request. If an offset is not passed in, the API will return the first page of results. \'Note: You can only pass in an offset that was returned to you via a previously paginated request.\'
    * @type {string}
    * @memberof TeamsApiListWorkspaceTeams
    */
    readonly offset?: string
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>}
    * @memberof TeamsApiListWorkspaceTeams
    */
    readonly optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'offset' | 'organization' | 'organization.name' | 'path' | 'permalink_url' | 'team_member_removal_access_level' | 'uri' | 'visibility'>
    
}

/**
 * Request parameters for removeUserFromTeam operation in TeamsApi.
 * @export
 * @interface TeamsApiRemoveUserFromTeamRequest
 */
export type TeamsApiRemoveUserFromTeamRequest = {
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof TeamsApiRemoveUserFromTeam
    */
    readonly teamGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiRemoveUserFromTeam
    */
    readonly optPretty?: boolean
    
} & TeamsRemoveUserFromTeamRequest

/**
 * Request parameters for updateTeamRecord operation in TeamsApi.
 * @export
 * @interface TeamsApiUpdateTeamRecordRequest
 */
export type TeamsApiUpdateTeamRecordRequest = {
    
    /**
    * Globally unique identifier for the team.
    * @type {string}
    * @memberof TeamsApiUpdateTeamRecord
    */
    readonly teamGid: string
    
    /**
    * Provides “pretty” output. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.
    * @type {boolean}
    * @memberof TeamsApiUpdateTeamRecord
    */
    readonly optPretty?: boolean
    
    /**
    * This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.
    * @type {Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>}
    * @memberof TeamsApiUpdateTeamRecord
    */
    readonly optFields?: Array<'description' | 'edit_team_name_or_description_access_level' | 'edit_team_visibility_or_trash_team_access_level' | 'guest_invite_management_access_level' | 'html_description' | 'join_request_management_access_level' | 'member_invite_management_access_level' | 'name' | 'organization' | 'organization.name' | 'permalink_url' | 'team_member_removal_access_level' | 'visibility'>
    
} & TeamsUpdateTeamRecordRequest

/**
 * TeamsApiGenerated - object-oriented interface
 * @export
 * @class TeamsApiGenerated
 * @extends {BaseAPI}
 */
export class TeamsApiGenerated extends BaseAPI {
    /**
     * The user making this call must be a member of the team in order to add others. The user being added must exist in the same organization as the team.  Returns the complete team membership record for the newly added user.
     * @summary Add a user to a team
     * @param {TeamsApiAddUserToTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public addUserToTeam(requestParameters: TeamsApiAddUserToTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).addUserToTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a team within the current workspace.
     * @summary Create a team
     * @param {TeamsApiCreateTeamRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public createTeamRecord(requestParameters: TeamsApiCreateTeamRecordRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).createTeamRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the full record for a single team.
     * @summary Get a team
     * @param {TeamsApiGetTeamRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getTeamRecord(requestParameters: TeamsApiGetTeamRecordRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getTeamRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact records for all teams to which the given user is assigned.
     * @summary Get teams for a user
     * @param {TeamsApiGetUserTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public getUserTeams(requestParameters: TeamsApiGetUserTeamsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).getUserTeams(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the compact records for all teams in the workspace visible to the authorized user.
     * @summary Get teams in a workspace
     * @param {TeamsApiListWorkspaceTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public listWorkspaceTeams(requestParameters: TeamsApiListWorkspaceTeamsRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).listWorkspaceTeams(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The user making this call must be a member of the team in order to remove themselves or others.
     * @summary Remove a user from a team
     * @param {TeamsApiRemoveUserFromTeamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public removeUserFromTeam(requestParameters: TeamsApiRemoveUserFromTeamRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).removeUserFromTeam(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a team within the current workspace.
     * @summary Update a team
     * @param {TeamsApiUpdateTeamRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApiGenerated
     */
    public updateTeamRecord(requestParameters: TeamsApiUpdateTeamRecordRequest, options?: AxiosRequestConfig) {
        return TeamsApiFp(this.configuration).updateTeamRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
